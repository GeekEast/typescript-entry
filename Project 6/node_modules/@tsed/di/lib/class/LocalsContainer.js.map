{"version":3,"sources":["class/LocalsContainer.ts"],"names":[],"mappings":";;;AAEA,MAAa,eAAmB,SAAQ,GAAqB;IAC3D;;;;;OAKG;IACU,IAAI,CAAC,SAAiB,EAAE,GAAG,IAAW;;YACjD,MAAM,SAAS,GAAU,IAAI,CAAC,OAAO,EAAE,CAAC;YAExC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,QAAQ,EAAE;oBACrE,MAAM,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;iBACpC;aACF;QACH,CAAC;KAAA;IAED,OAAO;QACL,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACnC,CAAC;IAEK,OAAO;;YACX,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC9B,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;KAAA;CACF;AAzBD,0CAyBC","file":"LocalsContainer.js","sourcesContent":["import {TokenProvider} from \"../interfaces/TokenProvider\";\n\nexport class LocalsContainer<V> extends Map<TokenProvider, V> {\n  /**\n   * Emit an event to all service. See service [lifecycle hooks](/docs/services.md#lifecycle-hooks).\n   * @param eventName The event name to emit at all services.\n   * @param args List of the parameters to give to each services.\n   * @returns {Promise<any[]>} A list of promises.\n   */\n  public async emit(eventName: string, ...args: any[]) {\n    const instances: any[] = this.toArray();\n\n    for (const instance of instances) {\n      if (typeof instance === \"object\" && instance && eventName in instance) {\n        await instance[eventName](...args);\n      }\n    }\n  }\n\n  toArray() {\n    return Array.from(this.values());\n  }\n\n  async destroy() {\n    await this.emit(\"$onDestroy\");\n    this.clear();\n  }\n}\n"],"sourceRoot":"../../src"}