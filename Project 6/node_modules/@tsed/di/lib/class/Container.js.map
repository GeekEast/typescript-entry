{"version":3,"sources":["class/Container.ts"],"names":[],"mappings":";;AAGA,mEAA8D;AAC9D,uDAAkD;AAClD,yCAAoC;AAEpC,MAAa,SAAU,SAAQ,iCAA8B;IAC3D;;;;OAIG;IACI,GAAG,CAAC,KAAoB,EAAE,WAAoC,EAAE;QACrE,MAAM,QAAQ,GAAG,iCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iCAAe,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,mBAAQ,CAAC,KAAK,CAAC,CAAC;QAExG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAElC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAoB,EAAE,WAAoC,EAAE;QAC7E,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,KAAoB;QACrC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAoB,EAAE,QAAuB;QAC9D,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAoB;QACrC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,IAA4B;QAC9C,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;aACpB,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aACnE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;CACF;AA5DD,8BA4DC","file":"Container.js","sourcesContent":["import {IProvider} from \"../interfaces/IProvider\";\nimport {ProviderType} from \"../interfaces/ProviderType\";\nimport {TokenProvider} from \"../interfaces/TokenProvider\";\nimport {GlobalProviders} from \"../registries/GlobalProviders\";\nimport {LocalsContainer} from \"./LocalsContainer\";\nimport {Provider} from \"./Provider\";\n\nexport class Container extends LocalsContainer<Provider<any>> {\n  /**\n   *\n   * @param token\n   * @param settings\n   */\n  public add(token: TokenProvider, settings: Partial<IProvider<any>> = {}): this {\n    const provider = GlobalProviders.has(token) ? GlobalProviders.get(token)!.clone() : new Provider(token);\n\n    Object.assign(provider, settings);\n\n    return super.set(token, provider);\n  }\n\n  /**\n   * Add a provider to the\n   * @param token\n   * @param settings\n   */\n  public addProvider(token: TokenProvider, settings: Partial<IProvider<any>> = {}): this {\n    return this.add(token, settings);\n  }\n\n  /**\n   *\n   * @param token\n   */\n  public hasProvider(token: TokenProvider) {\n    return super.has(token);\n  }\n\n  /**\n   * Add a provider to the\n   * @param token\n   * @param provider\n   */\n  public setProvider(token: TokenProvider, provider: Provider<any>) {\n    return super.set(token, provider);\n  }\n\n  /**\n   * The getProvider() method returns a specified element from a Map object.\n   * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n   * @param token\n   */\n  public getProvider(token: TokenProvider): Provider<any> | undefined {\n    return super.get(token);\n  }\n\n  /**\n   * Get all providers registered in the injector container.\n   *\n   * @param {ProviderType} type Filter the list by the given ProviderType.\n   * @returns {[RegistryKey , Provider<any>][]}\n   */\n  public getProviders(type?: ProviderType | string): Provider<any>[] {\n    return Array.from(this)\n      .filter(([key, provider]) => (type ? provider.type === type : true))\n      .map(([key, provider]) => provider);\n  }\n}\n"],"sourceRoot":"../../src"}