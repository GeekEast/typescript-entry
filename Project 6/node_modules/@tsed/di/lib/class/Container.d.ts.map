{"version":3,"sources":["class/Container.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAC,YAAY,EAAC,MAAM,4BAA4B,CAAC;AACxD,OAAO,EAAC,aAAa,EAAC,MAAM,6BAA6B,CAAC;AAE1D,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAEpC,qBAAa,SAAU,SAAQ,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC3D;;;;OAIG;IACI,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,GAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAM,GAAG,IAAI;IAQ9E;;;;OAIG;IACI,WAAW,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,GAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAM,GAAG,IAAI;IAItF;;;OAGG;IACI,WAAW,CAAC,KAAK,EAAE,aAAa;IAIvC;;;;OAIG;IACI,WAAW,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;IAIhE;;;;OAIG;IACI,WAAW,CAAC,KAAK,EAAE,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,SAAS;IAInE;;;;;OAKG;IACI,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,GAAG,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE;CAKnE","file":"Container.d.ts","sourcesContent":["import {IProvider} from \"../interfaces/IProvider\";\nimport {ProviderType} from \"../interfaces/ProviderType\";\nimport {TokenProvider} from \"../interfaces/TokenProvider\";\nimport {GlobalProviders} from \"../registries/GlobalProviders\";\nimport {LocalsContainer} from \"./LocalsContainer\";\nimport {Provider} from \"./Provider\";\n\nexport class Container extends LocalsContainer<Provider<any>> {\n  /**\n   *\n   * @param token\n   * @param settings\n   */\n  public add(token: TokenProvider, settings: Partial<IProvider<any>> = {}): this {\n    const provider = GlobalProviders.has(token) ? GlobalProviders.get(token)!.clone() : new Provider(token);\n\n    Object.assign(provider, settings);\n\n    return super.set(token, provider);\n  }\n\n  /**\n   * Add a provider to the\n   * @param token\n   * @param settings\n   */\n  public addProvider(token: TokenProvider, settings: Partial<IProvider<any>> = {}): this {\n    return this.add(token, settings);\n  }\n\n  /**\n   *\n   * @param token\n   */\n  public hasProvider(token: TokenProvider) {\n    return super.has(token);\n  }\n\n  /**\n   * Add a provider to the\n   * @param token\n   * @param provider\n   */\n  public setProvider(token: TokenProvider, provider: Provider<any>) {\n    return super.set(token, provider);\n  }\n\n  /**\n   * The getProvider() method returns a specified element from a Map object.\n   * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n   * @param token\n   */\n  public getProvider(token: TokenProvider): Provider<any> | undefined {\n    return super.get(token);\n  }\n\n  /**\n   * Get all providers registered in the injector container.\n   *\n   * @param {ProviderType} type Filter the list by the given ProviderType.\n   * @returns {[RegistryKey , Provider<any>][]}\n   */\n  public getProviders(type?: ProviderType | string): Provider<any>[] {\n    return Array.from(this)\n      .filter(([key, provider]) => (type ? provider.type === type : true))\n      .map(([key, provider]) => provider);\n  }\n}\n"],"sourceRoot":"../../src"}