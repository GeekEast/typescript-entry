{"version":3,"sources":["class/Provider.ts"],"names":[],"mappings":"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","file":"Provider.js","sourcesContent":["import {Enumerable, getClass, getKeys, isClass, nameOf, NotEnumerable, Store, Type} from \"@tsed/core\";\nimport {ProviderScope} from \"../interfaces\";\nimport {IProvider} from \"../interfaces/IProvider\";\nimport {ProviderType} from \"../interfaces/ProviderType\";\nimport {TokenProvider} from \"../interfaces/TokenProvider\";\n\nexport class Provider<T> implements IProvider<T> {\n  /**\n   *\n   */\n  @Enumerable()\n  public type: ProviderType | any = ProviderType.PROVIDER;\n  /**\n   *\n   */\n  @Enumerable()\n  public injectable: boolean = true;\n  /**\n   *\n   */\n  @Enumerable()\n  public instance: T;\n  /**\n   *\n   */\n  @Enumerable()\n  public deps: any[];\n  /**\n   *\n   */\n  @Enumerable()\n  public useFactory: Function;\n  /**\n   *\n   */\n  @Enumerable()\n  public useValue: any;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _provide: TokenProvider;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _useClass: Type<T>;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _instance: T;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _scope: ProviderScope;\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _store: Store;\n\n  [key: string]: any;\n\n  constructor(token: TokenProvider) {\n    this.provide = token;\n    this.useClass = token;\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get provide(): any {\n    return this._provide;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set provide(value: any) {\n    this._provide = isClass(value) ? getClass(value) : value;\n  }\n\n  /**\n   *\n   * @returns {Type<T>}\n   */\n  get useClass(): Type<T> {\n    return this._useClass;\n  }\n\n  /**\n   * Create a new store if the given value is a class. Otherwise the value is ignored.\n   * @param value\n   */\n  @Enumerable()\n  set useClass(value: Type<T>) {\n    if (isClass(value)) {\n      this._useClass = getClass(value);\n      this._store = Store.from(value);\n    }\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get className() {\n    return this.name;\n  }\n\n  /**\n   *\n   */\n  get name() {\n    return nameOf(this.provide);\n  }\n\n  /**\n   *\n   * @returns {Store}\n   */\n  public get store(): Store {\n    return this._store;\n  }\n\n  /**\n   * Get the scope of the provider.\n   * @returns {boolean}\n   */\n  get scope(): ProviderScope {\n    return this._store ? this.store.get(\"scope\") : this._scope;\n  }\n\n  /**\n   * Change the scope value of the provider.\n   * @param scope\n   */\n  @Enumerable()\n  set scope(scope: ProviderScope) {\n    this._store ? this.store.set(\"scope\", scope) : this._scope;\n  }\n\n  /**\n   *\n   */\n  clone(): Provider<any> {\n    const provider = new (getClass(this))(this.provide);\n\n    getKeys(this).forEach(key => {\n      provider[key] = this[key];\n    });\n\n    return provider;\n  }\n\n  toString() {\n    return `Token:${this.name}`;\n  }\n}\n"],"sourceRoot":"../../src"}