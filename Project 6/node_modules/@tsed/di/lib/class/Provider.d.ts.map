{"version":3,"sources":["class/Provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgE,KAAK,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACtG,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAC,SAAS,EAAC,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAC,YAAY,EAAC,MAAM,4BAA4B,CAAC;AACxD,OAAO,EAAC,aAAa,EAAC,MAAM,6BAA6B,CAAC;AAE1D,qBAAa,QAAQ,CAAC,CAAC,CAAE,YAAW,SAAS,CAAC,CAAC,CAAC;IAC9C;;OAEG;IAEI,IAAI,EAAE,YAAY,GAAG,GAAG,CAAyB;IACxD;;OAEG;IAEI,UAAU,EAAE,OAAO,CAAQ;IAClC;;OAEG;IAEI,QAAQ,EAAE,CAAC,CAAC;IACnB;;OAEG;IAEI,IAAI,EAAE,GAAG,EAAE,CAAC;IACnB;;OAEG;IAEI,UAAU,EAAE,QAAQ,CAAC;IAC5B;;OAEG;IAEI,QAAQ,EAAE,GAAG,CAAC;IACrB;;OAEG;IAEH,SAAS,CAAC,QAAQ,EAAE,aAAa,CAAC;IAClC;;OAEG;IAEH,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7B;;OAEG;IAEH,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;IACvB;;OAEG;IAEH,SAAS,CAAC,MAAM,EAAE,aAAa,CAAC;IAChC;;OAEG;IAEH,OAAO,CAAC,MAAM,CAAQ;IAEtB,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,CAAC;gBAEP,KAAK,EAAE,aAAa;IAKhC;;;OAGG;;;;;IACC,OAAO,EAAI,GAAG;IAYlB;;;OAGG;;;;;IACC,QAAQ,EAAI,IAAI,CAAC,CAAC,CAAC;IAgBvB;;;OAGG;aACC,SAAS;IAIb;;OAEG;aACC,IAAI;IAIR;;;OAGG;aACQ,KAAK,EAAI,KAAK;IAIzB;;;OAGG;;;;;IACC,KAAK,EAAI,aAAa;IAa1B;;OAEG;IACH,KAAK,IAAI,QAAQ,CAAC,GAAG,CAAC;IAUtB,QAAQ;CAGT","file":"Provider.d.ts","sourcesContent":["import {Enumerable, getClass, getKeys, isClass, nameOf, NotEnumerable, Store, Type} from \"@tsed/core\";\nimport {ProviderScope} from \"../interfaces\";\nimport {IProvider} from \"../interfaces/IProvider\";\nimport {ProviderType} from \"../interfaces/ProviderType\";\nimport {TokenProvider} from \"../interfaces/TokenProvider\";\n\nexport class Provider<T> implements IProvider<T> {\n  /**\n   *\n   */\n  @Enumerable()\n  public type: ProviderType | any = ProviderType.PROVIDER;\n  /**\n   *\n   */\n  @Enumerable()\n  public injectable: boolean = true;\n  /**\n   *\n   */\n  @Enumerable()\n  public instance: T;\n  /**\n   *\n   */\n  @Enumerable()\n  public deps: any[];\n  /**\n   *\n   */\n  @Enumerable()\n  public useFactory: Function;\n  /**\n   *\n   */\n  @Enumerable()\n  public useValue: any;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _provide: TokenProvider;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _useClass: Type<T>;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _instance: T;\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _scope: ProviderScope;\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _store: Store;\n\n  [key: string]: any;\n\n  constructor(token: TokenProvider) {\n    this.provide = token;\n    this.useClass = token;\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get provide(): any {\n    return this._provide;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set provide(value: any) {\n    this._provide = isClass(value) ? getClass(value) : value;\n  }\n\n  /**\n   *\n   * @returns {Type<T>}\n   */\n  get useClass(): Type<T> {\n    return this._useClass;\n  }\n\n  /**\n   * Create a new store if the given value is a class. Otherwise the value is ignored.\n   * @param value\n   */\n  @Enumerable()\n  set useClass(value: Type<T>) {\n    if (isClass(value)) {\n      this._useClass = getClass(value);\n      this._store = Store.from(value);\n    }\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get className() {\n    return this.name;\n  }\n\n  /**\n   *\n   */\n  get name() {\n    return nameOf(this.provide);\n  }\n\n  /**\n   *\n   * @returns {Store}\n   */\n  public get store(): Store {\n    return this._store;\n  }\n\n  /**\n   * Get the scope of the provider.\n   * @returns {boolean}\n   */\n  get scope(): ProviderScope {\n    return this._store ? this.store.get(\"scope\") : this._scope;\n  }\n\n  /**\n   * Change the scope value of the provider.\n   * @param scope\n   */\n  @Enumerable()\n  set scope(scope: ProviderScope) {\n    this._store ? this.store.set(\"scope\", scope) : this._scope;\n  }\n\n  /**\n   *\n   */\n  clone(): Provider<any> {\n    const provider = new (getClass(this))(this.provide);\n\n    getKeys(this).forEach(key => {\n      provider[key] = this[key];\n    });\n\n    return provider;\n  }\n\n  toString() {\n    return `Token:${this.name}`;\n  }\n}\n"],"sourceRoot":"../../src"}