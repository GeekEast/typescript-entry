{"version":3,"sources":["class/LocalsContainer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,EAAC,MAAM,6BAA6B,CAAC;AAE1D,qBAAa,eAAe,CAAC,CAAC,CAAE,SAAQ,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;IAC3D;;;;;OAKG;IACU,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE;IAUnD,OAAO;IAID,OAAO;CAId","file":"LocalsContainer.d.ts","sourcesContent":["import {TokenProvider} from \"../interfaces/TokenProvider\";\n\nexport class LocalsContainer<V> extends Map<TokenProvider, V> {\n  /**\n   * Emit an event to all service. See service [lifecycle hooks](/docs/services.md#lifecycle-hooks).\n   * @param eventName The event name to emit at all services.\n   * @param args List of the parameters to give to each services.\n   * @returns {Promise<any[]>} A list of promises.\n   */\n  public async emit(eventName: string, ...args: any[]) {\n    const instances: any[] = this.toArray();\n\n    for (const instance of instances) {\n      if (typeof instance === \"object\" && instance && eventName in instance) {\n        await instance[eventName](...args);\n      }\n    }\n  }\n\n  toArray() {\n    return Array.from(this.values());\n  }\n\n  async destroy() {\n    await this.emit(\"$onDestroy\");\n    this.clear();\n  }\n}\n"],"sourceRoot":"../../src"}