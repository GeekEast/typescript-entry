import { Store, Type } from "@tsed/core";
import { ProviderScope } from "../interfaces";
import { IProvider } from "../interfaces/IProvider";
import { ProviderType } from "../interfaces/ProviderType";
import { TokenProvider } from "../interfaces/TokenProvider";
export declare class Provider<T> implements IProvider<T> {
    /**
     *
     */
    type: ProviderType | any;
    /**
     *
     */
    injectable: boolean;
    /**
     *
     */
    instance: T;
    /**
     *
     */
    deps: any[];
    /**
     *
     */
    useFactory: Function;
    /**
     *
     */
    useValue: any;
    /**
     *
     */
    protected _provide: TokenProvider;
    /**
     *
     */
    protected _useClass: Type<T>;
    /**
     *
     */
    protected _instance: T;
    /**
     *
     */
    protected _scope: ProviderScope;
    /**
     *
     */
    private _store;
    [key: string]: any;
    constructor(token: TokenProvider);
    /**
     *
     * @returns {any}
     */
    /**
    *
    * @param value
    */
    provide: any;
    /**
     *
     * @returns {Type<T>}
     */
    /**
    * Create a new store if the given value is a class. Otherwise the value is ignored.
    * @param value
    */
    useClass: Type<T>;
    /**
     *
     * @returns {string}
     */
    readonly className: string;
    /**
     *
     */
    readonly name: string;
    /**
     *
     * @returns {Store}
     */
    readonly store: Store;
    /**
     * Get the scope of the provider.
     * @returns {boolean}
     */
    /**
    * Change the scope value of the provider.
    * @param scope
    */
    scope: ProviderScope;
    /**
     *
     */
    clone(): Provider<any>;
    toString(): string;
}
