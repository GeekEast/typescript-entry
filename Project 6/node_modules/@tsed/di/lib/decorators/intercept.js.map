{"version":3,"sources":["decorators/intercept.ts"],"names":[],"mappings":";;AAAA,qCAAuC;AACvC,8CAA0F;AAE1F;;;;;;GAMG;AACH,SAAgB,SAAS,CAAyB,WAAoB,EAAE,OAAa;IACnF,OAAO,CAAC,MAAW,EAAE,WAAmB,EAAE,UAA8B,EAAE,EAAE;QAC1E,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,sBAAsB,EAAE;YAC/C,CAAC,WAAW,CAAC,EAAE;gBACb,WAAW,EAAE,mCAAsB,CAAC,WAAW;gBAC/C,WAAW;gBACX,OAAO,EAAE,WAAW;gBACpB,OAAO;aACR;SACuB,CAAC,CAAC;QAE5B,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAbD,8BAaC","file":"intercept.js","sourcesContent":["import {Store, Type} from \"@tsed/core\";\nimport {IInjectableProperties, InjectablePropertyType, IInterceptor} from \"../interfaces\";\n\n/**\n * Attaches interceptor to method call and executes the before and after methods\n *\n * @param interceptor\n * @param options\n * @decorator\n */\nexport function Intercept<T extends IInterceptor>(interceptor: Type<T>, options?: any): Function {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    Store.from(target).merge(\"injectableProperties\", {\n      [propertyKey]: {\n        bindingType: InjectablePropertyType.INTERCEPTOR,\n        propertyKey,\n        useType: interceptor,\n        options\n      }\n    } as IInjectableProperties);\n\n    return descriptor;\n  };\n}\n"],"sourceRoot":"../../src"}