{"version":3,"sources":["decorators/inject.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,wBAAgB,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,GAAG,QAAQ,CAuC7C","file":"inject.d.ts","sourcesContent":["import {getDecoratorType, Metadata, Store, UnsupportedDecoratorType} from \"@tsed/core\";\n\n/**\n *\n * @param symbol\n * @returns {Function}\n * @decorator\n */\nexport function Inject(symbol?: any): Function {\n  return (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<Function> | number): any => {\n    const bindingType = getDecoratorType([target, propertyKey, descriptor], true);\n\n    switch (bindingType) {\n      case \"parameter\":\n      case \"parameter.constructor\":\n        if (symbol) {\n          const paramTypes = Metadata.getParamTypes(target, propertyKey);\n\n          paramTypes[descriptor as number] = symbol;\n          Metadata.setParamTypes(target, propertyKey, paramTypes);\n        }\n        break;\n\n      case \"property\":\n        Store.from(target).merge(\"injectableProperties\", {\n          [propertyKey]: {\n            bindingType,\n            propertyKey,\n            useType: symbol || Metadata.getType(target, propertyKey)\n          }\n        });\n        break;\n\n      case \"method\":\n        Store.from(target).merge(\"injectableProperties\", {\n          [propertyKey]: {\n            bindingType,\n            propertyKey\n          }\n        });\n\n        return descriptor;\n\n      default:\n        throw new UnsupportedDecoratorType(Inject, [target, propertyKey, descriptor]);\n    }\n  };\n}\n"],"sourceRoot":"../../src"}