{"version":3,"sources":["decorators/intercept.ts"],"names":[],"mappings":"AAAA,OAAO,EAAQ,IAAI,EAAC,MAAM,YAAY,CAAC;AACvC,OAAO,EAAgD,YAAY,EAAC,MAAM,eAAe,CAAC;AAE1F;;;;;;GAMG;AACH,wBAAgB,SAAS,CAAC,CAAC,SAAS,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,GAAG,GAAG,QAAQ,CAa/F","file":"intercept.d.ts","sourcesContent":["import {Store, Type} from \"@tsed/core\";\nimport {IInjectableProperties, InjectablePropertyType, IInterceptor} from \"../interfaces\";\n\n/**\n * Attaches interceptor to method call and executes the before and after methods\n *\n * @param interceptor\n * @param options\n * @decorator\n */\nexport function Intercept<T extends IInterceptor>(interceptor: Type<T>, options?: any): Function {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    Store.from(target).merge(\"injectableProperties\", {\n      [propertyKey]: {\n        bindingType: InjectablePropertyType.INTERCEPTOR,\n        propertyKey,\n        useType: interceptor,\n        options\n      }\n    } as IInjectableProperties);\n\n    return descriptor;\n  };\n}\n"],"sourceRoot":"../../src"}