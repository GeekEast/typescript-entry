{"version":3,"sources":["decorators/injectable.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,SAAS,EAAgB,MAAM,eAAe,CAAC;AAGvD;;;;;;;;;;;;;;;;;;GAkBG;AACH,wBAAgB,UAAU,CAAC,OAAO,GAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAoC,GAAG,QAAQ,CAOxG","file":"injectable.d.ts","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {IProvider, ProviderScope} from \"../interfaces\";\nimport {registerProvider} from \"../registries/ProviderRegistry\";\n\n/**\n * The decorators `@Injectable()` declare a new service can be injected in other service, controller, interceptor, etc.. on there `constructor`.\n * All classes annotated with `@Injectable()` are built one time, excepted if you change the default provider configuration.\n *\n * <<< @/docs/docs/snippets/providers/getting-started-injectable.ts\n *\n * ::: tip\n * `@Injectable()` use the `reflect-metadata` to collect and inject the built provided to other services.\n * :::\n *\n * ### Options\n *\n * - type (@@ProviderType@@  or `string`): Kind of provider. (Default: `ProviderType.PROVIDER`)\n * - scope (@@ProviderScope@): Kind of provider. (Default: `ProviderScope.SINGLETON`)\n * - deps (`Type<any>`): List of class or provider which will be injected to the constructor (Note: This options override default metadata generated by Typescript).\n *\n * @returns {Function}\n * @decorator\n */\nexport function Injectable(options: Partial<IProvider<any>> = {scope: ProviderScope.SINGLETON}): Function {\n  return (provide: Type<any>) => {\n    registerProvider({\n      ...options,\n      provide\n    });\n  };\n}\n"],"sourceRoot":"../../src"}