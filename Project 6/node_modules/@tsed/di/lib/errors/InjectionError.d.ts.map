{"version":3,"sources":["errors/InjectionError.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAE5C,qBAAa,cAAe,SAAQ,KAAK;IACvC,IAAI,SAAqB;IAElB,MAAM,EAAE,aAAa,EAAE,CAAM;IAC7B,MAAM,EAAE,GAAG,CAAC;gBAEP,KAAK,EAAE,aAAa,EAAE,MAAM,CAAC,EAAE,GAAG;CA0B/C","file":"InjectionError.d.ts","sourcesContent":["import {isString, nameOf} from \"@tsed/core\";\nimport {TokenProvider} from \"../interfaces\";\n\nexport class InjectionError extends Error {\n  name = \"INJECTION_ERROR\";\n\n  public tokens: TokenProvider[] = [];\n  public origin: any;\n\n  constructor(token: TokenProvider, origin?: any) {\n    super(isString(origin) ? origin : \"\");\n\n    this.tokens = [token];\n\n    if (origin) {\n      if (isString(origin)) {\n        this.origin = {\n          message: origin,\n          stack: this.stack\n        };\n      } else {\n        if (origin.tokens) {\n          this.tokens = this.tokens.concat(origin.tokens);\n          this.origin = origin.origin;\n        } else {\n          this.origin = origin;\n        }\n      }\n    }\n\n    const originMessage = this.origin ? \"\\nOrigin: \" + this.origin.message : \"\";\n    const tokensMessage = this.tokens.map(token => nameOf(token)).join(\" > \");\n\n    this.message = `Injection failed on ${tokensMessage}${originMessage}`;\n  }\n}\n"],"sourceRoot":"../../src"}