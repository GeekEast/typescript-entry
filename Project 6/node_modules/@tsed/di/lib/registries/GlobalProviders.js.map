{"version":3,"sources":["registries/GlobalProviders.ts"],"names":[],"mappings":";;AAAA,qCAA0C;AAC1C,gDAA2C;AAG3C,MAAa,sBAAuB,SAAQ,eAAuC;IAOjF;QACE,KAAK,CAAC,mBAAQ,CAAC,CAAC;QAPlB;;;WAGG;QACK,gBAAW,GAAkC,IAAI,GAAG,EAAE,CAAC;IAI/D,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CACZ,IAAY,EACZ,KAA0B,EAC1B,UAAqC,EAAC,UAAU,EAAE,IAAI,EAAC;QAEvD,MAAM,QAAQ,GAAG,IAAI,eAAQ,CAAgC,KAAK,EAAE;YAClE,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;SAC9B,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,CAAC,GAAG,CAClB,IAAI,EACJ,MAAM,CAAC,MAAM,CACX;YACE,QAAQ;YACR,UAAU,EAAE,IAAI;SACjB,EACD,OAAO,CACR,CACF,CAAC;QAEF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,MAA8B;QAChD,IAAI,IAAI,GAAW,UAAU,CAAC;QAE9B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,IAAI,GAAG,MAAM,CAAC;SACf;aAAM;YACL,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,QAAQ,EAAE;gBACZ,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;aACtB;SACF;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;SACpC;QAED,OAAO;YACL,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,IAAI;SACjB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,IAAY;QAC3B,OAAO,CAAC,QAA8B,EAAE,QAAc,EAAQ,EAAE;YAC9D,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;gBACrB,QAAQ,GAAG;oBACT,OAAO,EAAE,QAAQ;iBAClB,CAAC;aACH;YAED,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAC,EAAE,QAAQ,EAAE,EAAC,IAAI,EAAC,CAAC,CAAC;YACvD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,MAA8B;QACxC,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;IACnD,CAAC;CACF;AA7FD,wDA6FC;AAED;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,eAAe,GAAG,IAAI,sBAAsB,EAAE,CAAC","file":"GlobalProviders.js","sourcesContent":["import {Registry, Type} from \"@tsed/core\";\nimport {Provider} from \"../class/Provider\";\nimport {IProvider, RegistrySettings, TokenProvider, TypedProvidersRegistry} from \"../interfaces\";\n\nexport class GlobalProviderRegistry extends Registry<Provider<any>, IProvider<any>> {\n  /**\n   * Internal Map\n   * @type {Array}\n   */\n  private _registries: Map<string, RegistrySettings> = new Map();\n\n  constructor() {\n    super(Provider);\n  }\n\n  /**\n   *\n   * @param {string} type\n   * @param {Type<Provider<any>>} model\n   * @param options\n   * @returns {Registry<Provider<any>, IProvider<any>>}\n   */\n  createRegistry(\n    type: string,\n    model: Type<Provider<any>>,\n    options: Partial<RegistrySettings> = {injectable: true}\n  ): TypedProvidersRegistry {\n    const registry = new Registry<Provider<any>, IProvider<any>>(model, {\n      onCreate: this.set.bind(this)\n    });\n\n    this._registries.set(\n      type,\n      Object.assign(\n        {\n          registry,\n          injectable: true\n        },\n        options\n      )\n    );\n\n    return registry;\n  }\n\n  /**\n   *\n   * @param {string | TokenProvider} target\n   * @returns {RegistrySettings | undefined}\n   */\n  getRegistrySettings(target: string | TokenProvider): RegistrySettings {\n    let type: string = \"provider\";\n\n    if (typeof target === \"string\") {\n      type = target;\n    } else {\n      const provider = this.get(target);\n      if (provider) {\n        type = provider.type;\n      }\n    }\n\n    if (this._registries.has(type)) {\n      return this._registries.get(type)!;\n    }\n\n    return {\n      registry: this,\n      injectable: true\n    };\n  }\n\n  /**\n   *\n   * @returns {(provider: (any | IProvider<any>), instance?: any) => void}\n   */\n  createRegisterFn(type: string) {\n    return (provider: any | IProvider<any>, instance?: any): void => {\n      if (!provider.provide) {\n        provider = {\n          provide: provider\n        };\n      }\n\n      provider = Object.assign({instance}, provider, {type});\n      this.getRegistry(type).merge(provider.provide, provider);\n    };\n  }\n\n  /**\n   *\n   * @param {string | TokenProvider} target\n   * @returns {Registry<Provider<any>, IProvider<any>>}\n   */\n  getRegistry(target: string | TokenProvider): TypedProvidersRegistry {\n    return this.getRegistrySettings(target).registry;\n  }\n}\n\n/**\n *\n * @type {GlobalProviders}\n */\n// tslint:disable-next-line: variable-name\nexport const GlobalProviders = new GlobalProviderRegistry();\n"],"sourceRoot":"../../src"}