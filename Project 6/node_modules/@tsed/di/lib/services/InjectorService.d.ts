import { Container } from "../class/Container";
import { LocalsContainer } from "../class/LocalsContainer";
import { Provider } from "../class/Provider";
import { IDILogger, IDISettings, IInjectablePropertyService, IInjectablePropertyValue, IInvokeOptions, ProviderScope, TokenProvider } from "../interfaces";
/**
 * This service contain all services collected by `@Service` or services declared manually with `InjectorService.factory()` or `InjectorService.service()`.
 *
 * ### Example:
 *
 * ```typescript
 * import {InjectorService} from "@tsed/common";
 *
 * // Import the services (all services are decorated with @Service()";
 * import MyService1 from "./services/service1";
 * import MyService2 from "./services/service2";
 * import MyService3 from "./services/service3";
 *
 * // When all services is imported you can load InjectorService.
 * const injector = new InjectorService()
 * injector.load();
 *
 * const myService1 = injector.get<MyService1>(MyServcice1);
 * ```
 *
 * > Note: `ServerLoader` make this automatically when you use `ServerLoader.mount()` method (or settings attributes) and load services and controllers during the starting server.
 *
 */
export declare class InjectorService extends Container {
    settings: IDISettings;
    logger: IDILogger;
    scopes: {
        [key: string]: ProviderScope;
    };
    constructor();
    /**
     * Retrieve default scope for a given provider.
     * @param provider
     */
    scopeOf(provider: Provider<any>): ProviderScope;
    /**
     * Clone a provider from GlobalProviders and the given token. forkProvider method build automatically the provider if the instance parameter ins't given.
     * @param token
     * @param instance
     */
    forkProvider(token: TokenProvider, instance?: any): Provider<any>;
    /**
     * Return a list of instance build by the injector.
     */
    toArray(): any[];
    /**
     * Get a service or factory already constructed from his symbol or class.
     *
     * #### Example
     *
     * ```typescript
     * import {InjectorService} from "@tsed/common";
     * import MyService from "./services";
     *
     * class OtherService {
     *      constructor(injectorService: InjectorService) {
     *          const myService = injectorService.get<MyService>(MyService);
     *      }
     * }
     * ```
     *
     * @param token The class or symbol registered in InjectorService.
     * @returns {boolean}
     */
    get<T>(token: TokenProvider): T | undefined;
    /**
     * The has() method returns a boolean indicating whether an element with the specified key exists or not.
     * @returns {boolean}
     * @param token
     */
    has(token: TokenProvider): boolean;
    /**
     * Invoke the class and inject all services that required by the class constructor.
     *
     * #### Example
     *
     * ```typescript
     * import {InjectorService} from "@tsed/common";
     * import MyService from "./services";
     *
     * class OtherService {
     *     constructor(injectorService: InjectorService) {
     *          const myService = injectorService.invoke<MyService>(MyService);
     *      }
     *  }
     * ```
     *
     * @param token The injectable class to invoke. Class parameters are injected according constructor signature.
     * @param locals  Optional object. If preset then any argument Class are read from this object first, before the `InjectorService` is consulted.
     * @param options
     * @returns {T} The class constructed.
     */
    invoke<T>(token: TokenProvider, locals?: Map<TokenProvider, any>, options?: Partial<IInvokeOptions<T>>): T;
    /**
     * Build all providers from GlobalProviders or from given providers parameters and emit `$onInit` event.
     *
     * @param container
     */
    load(container?: Map<TokenProvider, Provider<any>>): Promise<LocalsContainer<any>>;
    /**
     *
     * @param instance
     */
    bindInjectableProperties(instance: any): void;
    /**
     *
     * @param instance
     * @param {string} propertyKey
     */
    bindMethod(instance: any, { propertyKey }: IInjectablePropertyService): void;
    /**
     *
     * @param instance
     * @param {string} propertyKey
     * @param {any} useType
     */
    bindProperty(instance: any, { propertyKey, useType }: IInjectablePropertyService): void;
    /**
     *
     * @param instance
     * @param {string} propertyKey
     * @param {any} useType
     */
    bindValue(instance: any, { propertyKey, expression, defaultValue }: IInjectablePropertyValue): void;
    /**
     *
     * @param instance
     * @param {string} propertyKey
     * @param {any} useType
     */
    bindConstant(instance: any, { propertyKey, expression, defaultValue }: IInjectablePropertyValue): {
        get: () => any;
        enumerable: boolean;
        configurable: boolean;
    };
    /**
     *
     * @param instance
     * @param propertyKey
     * @param useType
     * @param options
     */
    bindInterceptor(instance: any, { propertyKey, useType, options }: IInjectablePropertyService): void;
    /**
     * Invoke a class method and inject service.
     *
     * #### IInjectableMethod options
     *
     * * **target**: Optional. The class instance.
     * * **methodName**: `string` Optional. The method name.
     * * **designParamTypes**: `any[]` Optional. List of injectable types.
     * * **locals**: `Map<Function, any>` Optional. If preset then any argument Class are read from this object first, before the `InjectorService` is consulted.
     *
     * #### Example
     *
     * @param target
     * @param locals
     * @param options
     * @private
     */
    private _invoke;
    /**
     * Create options to invoke a provider or class.
     * @param token
     * @param options
     */
    private mapInvokeOptions;
}
