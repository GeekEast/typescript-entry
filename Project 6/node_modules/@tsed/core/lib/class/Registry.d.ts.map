{"version":3,"sources":["class/Registry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;AAGnC,MAAM,WAAW,YAAY,CAAC,CAAC;IAC7B;;;;OAIG;IACH,QAAQ,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;CAO5C;AAED,oBAAY,WAAW,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,GAAG,GAAG,CAAC;AAEvE;;GAEG;AACH,qBAAa,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAE,SAAQ,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAMzC,OAAO,CAAC,MAAM;IAAW,OAAO,CAAC,OAAO;IALpD;;;;OAIG;gBACiB,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,EAAU,OAAO,GAAE,YAAY,CAAC,CAAC,CAAM;IAK1E;;;;OAIG;IACH,GAAG,CAAC,GAAG,EAAE,WAAW,GAAG,CAAC,GAAG,SAAS;IAIpC;;;OAGG;IACH,iBAAiB,CAAC,GAAG,EAAE,WAAW,GAAG,CAAC;IAYtC;;;;OAIG;IACH,GAAG,CAAC,GAAG,EAAE,WAAW,GAAG,OAAO;IAI9B;;;;;OAKG;IACH,GAAG,CAAC,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,GAAG,IAAI;IAMxC;;;;OAIG;IACH,KAAK,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;IAUrD;;;;OAIG;IACH,MAAM,CAAC,GAAG,EAAE,WAAW,GAAG,OAAO;CAGlC","file":"Registry.d.ts","sourcesContent":["import {Type} from \"../interfaces\";\nimport {getClass, getClassOrSymbol} from \"../utils\";\n\nexport interface RegistryHook<T> {\n  /**\n   *\n   * @param {RegistryKey} key\n   * @param {T} item\n   */\n  onCreate?(key: RegistryKey, item: T): void;\n\n  /**\n   *\n   * @param {RegistryKey} key\n   */\n  // onDelete?(key: RegistryKey): void;\n}\n\nexport type RegistryKey = string | symbol | Type<any> | Function | any;\n\n/**\n * @private\n */\nexport class Registry<T, O> extends Map<RegistryKey, T> {\n  /**\n   *\n   * @param {Type<T>} _class\n   * @param {RegistryHook<T>} options\n   */\n  constructor(private _class: Type<T>, private options: RegistryHook<T> = {}) {\n    super();\n    this._class = getClass(this._class);\n  }\n\n  /**\n   * The get() method returns a specified element from a Map object.\n   * @param key Required. The key of the element to return from the Map object.\n   * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n   */\n  get(key: RegistryKey): T | undefined {\n    return super.get(getClassOrSymbol(key));\n  }\n\n  /**\n   *\n   * @param key\n   */\n  createIfNotExists(key: RegistryKey): T {\n    if (!this.has(key)) {\n      const item = new this._class(key);\n      this.set(key, item);\n      if (this.options && this.options.onCreate) {\n        this.options.onCreate(key, item);\n      }\n    }\n\n    return this.get(key)!;\n  }\n\n  /**\n   * The has() method returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key\n   * @returns {boolean}\n   */\n  has(key: RegistryKey): boolean {\n    return super.has(getClassOrSymbol(key));\n  }\n\n  /**\n   * The set() method adds or updates an element with a specified key and value to a Map object.\n   * @param key Required. The key of the element to add to the Map object.\n   * @param metadata Required. The value of the element to add to the Map object.\n   * @returns {Registry}\n   */\n  set(key: RegistryKey, metadata: T): this {\n    super.set(getClassOrSymbol(key), metadata);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param target\n   * @param options\n   */\n  merge(target: RegistryKey, options: Partial<O>): void {\n    const meta: T & {[key: string]: any} = this.createIfNotExists(target);\n\n    Object.keys(options).forEach(key => {\n      meta[key] = (options as any)[key];\n    });\n\n    this.set(target, meta);\n  }\n\n  /**\n   * The delete() method removes the specified element from a Map object.\n   * @param key Required. The key of the element to remove from the Map object.\n   * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.\n   */\n  delete(key: RegistryKey): boolean {\n    return super.delete(getClassOrSymbol(key));\n  }\n}\n"],"sourceRoot":"../../src"}