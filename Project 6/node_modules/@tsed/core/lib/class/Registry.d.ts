import { Type } from "../interfaces";
export interface RegistryHook<T> {
    /**
     *
     * @param {RegistryKey} key
     * @param {T} item
     */
    onCreate?(key: RegistryKey, item: T): void;
}
export declare type RegistryKey = string | symbol | Type<any> | Function | any;
/**
 * @private
 */
export declare class Registry<T, O> extends Map<RegistryKey, T> {
    private _class;
    private options;
    /**
     *
     * @param {Type<T>} _class
     * @param {RegistryHook<T>} options
     */
    constructor(_class: Type<T>, options?: RegistryHook<T>);
    /**
     * The get() method returns a specified element from a Map object.
     * @param key Required. The key of the element to return from the Map object.
     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.
     */
    get(key: RegistryKey): T | undefined;
    /**
     *
     * @param key
     */
    createIfNotExists(key: RegistryKey): T;
    /**
     * The has() method returns a boolean indicating whether an element with the specified key exists or not.
     * @param key
     * @returns {boolean}
     */
    has(key: RegistryKey): boolean;
    /**
     * The set() method adds or updates an element with a specified key and value to a Map object.
     * @param key Required. The key of the element to add to the Map object.
     * @param metadata Required. The value of the element to add to the Map object.
     * @returns {Registry}
     */
    set(key: RegistryKey, metadata: T): this;
    /**
     *
     * @param target
     * @param options
     */
    merge(target: RegistryKey, options: Partial<O>): void;
    /**
     * The delete() method removes the specified element from a Map object.
     * @param key Required. The key of the element to remove from the Map object.
     * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.
     */
    delete(key: RegistryKey): boolean;
}
