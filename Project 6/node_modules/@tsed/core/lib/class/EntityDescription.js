"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const decorators_1 = require("../decorators");
const interfaces_1 = require("../interfaces");
const utils_1 = require("../utils");
const Metadata_1 = require("./Metadata");
/**
 * EntityDescription store all information collected by a decorator (class, property key and in option the index of the parameters).
 */
class EntityDescription {
    constructor(_target, _propertyKey, index) {
        this._target = _target;
        this._propertyKey = _propertyKey;
        if (typeof index === "number") {
            this._index = index;
        }
        this.target = _target;
    }
    /**
     * Return the index of the parameters.
     * @returns {any}
     */
    get index() {
        return this._index;
    }
    /**
     * Class of the entity.
     * @returns {Type<any>}
     */
    get target() {
        return utils_1.getClass(this._target);
    }
    /**
     *
     * @param {Type<any>} target
     */
    set target(target) {
        this.setTarget(target);
    }
    /**
     * Return the class name of the entity.
     * @returns {string}
     */
    get targetName() {
        return utils_1.nameOf(this.target);
    }
    /**
     * Name of the method or attribute related to the class.
     * @returns {string|symbol}
     */
    get propertyKey() {
        return this._propertyKey;
    }
    /**
     *
     * @param value
     */
    set type(value) {
        this._type = value || Object;
    }
    /**
     *
     * @returns {Type<any>}
     */
    get type() {
        return this._type;
    }
    /**
     *
     * @returns {string}
     */
    get typeName() {
        return utils_1.nameOf(this._type);
    }
    /**
     *
     * @returns {any}
     */
    get collectionType() {
        return this._collectionType;
    }
    /**
     *
     * @param {Type<any>} collectionType
     */
    set collectionType(collectionType) {
        this._collectionType = collectionType;
    }
    /**
     *
     * @returns {string}
     */
    get collectionName() {
        return this._collectionType ? utils_1.nameOf(this._collectionType) : "";
    }
    /**
     *
     * @returns {boolean}
     */
    get isCollection() {
        return !!this._collectionType;
    }
    /**
     *
     * @returns {boolean}
     */
    get isArray() {
        return utils_1.isArrayOrArrayClass(this._collectionType);
    }
    /**
     *
     * @returns {boolean}
     */
    get isPrimitive() {
        return utils_1.isPrimitiveOrPrimitiveClass(this._type);
    }
    /**
     *
     * @returns {boolean}
     */
    get isDate() {
        return utils_1.isDate(this._type);
    }
    /**
     *
     * @returns {boolean}
     */
    get isObject() {
        return utils_1.isObject(this.type);
    }
    /**
     *
     * @returns {boolean}
     */
    get isClass() {
        return utils_1.isClass(this.type);
    }
    /**
     *
     * @returns {string}
     */
    get name() {
        return this._name;
    }
    /**
     *
     * @param {string} value
     */
    set name(value) {
        this._name = value;
    }
    setTarget(target) {
        this._target = target;
        let type;
        if (typeof this._index === "number") {
            type = Metadata_1.Metadata.getParamTypes(this._target, this._propertyKey)[this._index];
        }
        else {
            type = Metadata_1.Metadata.getType(this._target, this._propertyKey);
        }
        if (utils_1.isCollection(type)) {
            this._collectionType = type;
            this._type = Object;
        }
        else {
            this._type = type;
        }
        this._name = utils_1.nameOf(this._propertyKey);
    }
}
tslib_1.__decorate([
    decorators_1.NotEnumerable(),
    tslib_1.__metadata("design:type", interfaces_1.Type)
], EntityDescription.prototype, "_collectionType", void 0);
tslib_1.__decorate([
    decorators_1.NotEnumerable(),
    tslib_1.__metadata("design:type", String)
], EntityDescription.prototype, "_name", void 0);
tslib_1.__decorate([
    decorators_1.NotEnumerable(),
    tslib_1.__metadata("design:type", interfaces_1.Type)
], EntityDescription.prototype, "_type", void 0);
tslib_1.__decorate([
    decorators_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Number)
], EntityDescription.prototype, "_index", void 0);
exports.EntityDescription = EntityDescription;

//# sourceMappingURL=EntityDescription.js.map
