{"version":3,"sources":["class/EntityDescription.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;AAInC;;GAEG;AACH,8BAAsB,iBAAiB;IAwBzB,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;IAAE,SAAS,CAAC,YAAY,EAAE,MAAM,GAAG,MAAM;IAvBjF;;OAEG;IAEH,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC;;OAEG;IAEH,OAAO,CAAC,KAAK,CAAS;IAEtB;;OAEG;IAEH,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAE3B;;OAEG;IAEH,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC;gBAEH,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,EAAY,YAAY,EAAE,MAAM,GAAG,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,GAAG,kBAAkB;IAOtH;;;OAGG;aACC,KAAK,EAAI,MAAM;IAInB;;;OAGG;;;;;IACC,MAAM,EAAI,IAAI,CAAC,GAAG,CAAC;IAYvB;;;OAGG;aACC,UAAU,EAAI,MAAM;IAIxB;;;OAGG;aACC,WAAW,EAAI,MAAM,GAAG,MAAM;IAIlC;;;OAGG;;;;;IACC,IAAI,EAAQ,IAAI,CAAC,GAAG,CAAC;IAYzB;;;OAGG;aACC,QAAQ,EAAI,MAAM;IAItB;;;OAGG;;;;;IACC,cAAc,EAAI,IAAI,CAAC,GAAG,CAAC;IAY/B;;;OAGG;aACC,cAAc,EAAI,MAAM;IAI5B;;;OAGG;aACC,YAAY,EAAI,OAAO;IAI3B;;;OAGG;aACC,OAAO;IAIX;;;OAGG;aACC,WAAW;IAIf;;;OAGG;aACC,MAAM;IAIV;;;OAGG;aACC,QAAQ;IAIZ;;;OAGG;aACC,OAAO;IAIX;;;OAGG;;;;;IACC,IAAI,EAAI,MAAM;IAYlB,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;CAmB7C","file":"EntityDescription.d.ts","sourcesContent":["import {NotEnumerable} from \"../decorators\";\nimport {Type} from \"../interfaces\";\nimport {getClass, isArrayOrArrayClass, isClass, isCollection, isDate, isObject, isPrimitiveOrPrimitiveClass, nameOf} from \"../utils\";\nimport {Metadata} from \"./Metadata\";\n\n/**\n * EntityDescription store all information collected by a decorator (class, property key and in option the index of the parameters).\n */\nexport abstract class EntityDescription {\n  /**\n   * Type of the collection (Array, Map, Set, etc...)\n   */\n  @NotEnumerable()\n  protected _collectionType: Type<any>;\n  /**\n   * Custom name.\n   */\n  @NotEnumerable()\n  private _name: string;\n\n  /**\n   * Type of the entity.\n   */\n  @NotEnumerable()\n  protected _type: Type<any>;\n\n  /**\n   * Index of the entity. Only used when the entity describe a parameters.\n   */\n  @NotEnumerable()\n  protected _index: number;\n\n  constructor(protected _target: Type<any>, protected _propertyKey: string | symbol, index?: number | PropertyDescriptor) {\n    if (typeof index === \"number\") {\n      this._index = index;\n    }\n    this.target = _target;\n  }\n\n  /**\n   * Return the index of the parameters.\n   * @returns {any}\n   */\n  get index(): number {\n    return this._index;\n  }\n\n  /**\n   * Class of the entity.\n   * @returns {Type<any>}\n   */\n  get target(): Type<any> {\n    return getClass(this._target);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   */\n  set target(target: Type<any>) {\n    this.setTarget(target);\n  }\n\n  /**\n   * Return the class name of the entity.\n   * @returns {string}\n   */\n  get targetName(): string {\n    return nameOf(this.target);\n  }\n\n  /**\n   * Name of the method or attribute related to the class.\n   * @returns {string|symbol}\n   */\n  get propertyKey(): string | symbol {\n    return this._propertyKey;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get typeName(): string {\n    return nameOf(this._type);\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get collectionType(): Type<any> {\n    return this._collectionType;\n  }\n\n  /**\n   *\n   * @param {Type<any>} collectionType\n   */\n  set collectionType(collectionType: Type<any>) {\n    this._collectionType = collectionType;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get collectionName(): string {\n    return this._collectionType ? nameOf(this._collectionType) : \"\";\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return !!this._collectionType;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray() {\n    return isArrayOrArrayClass(this._collectionType);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isPrimitive() {\n    return isPrimitiveOrPrimitiveClass(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isDate() {\n    return isDate(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isObject() {\n    return isObject(this.type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isClass() {\n    return isClass(this.type);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   *\n   * @param {string} value\n   */\n  set name(value: string) {\n    this._name = value;\n  }\n\n  protected setTarget(target: Type<any>): void {\n    this._target = target;\n    let type;\n\n    if (typeof this._index === \"number\") {\n      type = Metadata.getParamTypes(this._target, this._propertyKey)[this._index];\n    } else {\n      type = Metadata.getType(this._target, this._propertyKey);\n    }\n\n    if (isCollection(type)) {\n      this._collectionType = type;\n      this._type = Object;\n    } else {\n      this._type = type;\n    }\n\n    this._name = nameOf(this._propertyKey);\n  }\n}\n"],"sourceRoot":"../../src"}