{"version":3,"sources":["class/EntityDescription.ts"],"names":[],"mappings":"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","file":"EntityDescription.js","sourcesContent":["import {NotEnumerable} from \"../decorators\";\nimport {Type} from \"../interfaces\";\nimport {getClass, isArrayOrArrayClass, isClass, isCollection, isDate, isObject, isPrimitiveOrPrimitiveClass, nameOf} from \"../utils\";\nimport {Metadata} from \"./Metadata\";\n\n/**\n * EntityDescription store all information collected by a decorator (class, property key and in option the index of the parameters).\n */\nexport abstract class EntityDescription {\n  /**\n   * Type of the collection (Array, Map, Set, etc...)\n   */\n  @NotEnumerable()\n  protected _collectionType: Type<any>;\n  /**\n   * Custom name.\n   */\n  @NotEnumerable()\n  private _name: string;\n\n  /**\n   * Type of the entity.\n   */\n  @NotEnumerable()\n  protected _type: Type<any>;\n\n  /**\n   * Index of the entity. Only used when the entity describe a parameters.\n   */\n  @NotEnumerable()\n  protected _index: number;\n\n  constructor(protected _target: Type<any>, protected _propertyKey: string | symbol, index?: number | PropertyDescriptor) {\n    if (typeof index === \"number\") {\n      this._index = index;\n    }\n    this.target = _target;\n  }\n\n  /**\n   * Return the index of the parameters.\n   * @returns {any}\n   */\n  get index(): number {\n    return this._index;\n  }\n\n  /**\n   * Class of the entity.\n   * @returns {Type<any>}\n   */\n  get target(): Type<any> {\n    return getClass(this._target);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   */\n  set target(target: Type<any>) {\n    this.setTarget(target);\n  }\n\n  /**\n   * Return the class name of the entity.\n   * @returns {string}\n   */\n  get targetName(): string {\n    return nameOf(this.target);\n  }\n\n  /**\n   * Name of the method or attribute related to the class.\n   * @returns {string|symbol}\n   */\n  get propertyKey(): string | symbol {\n    return this._propertyKey;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get typeName(): string {\n    return nameOf(this._type);\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get collectionType(): Type<any> {\n    return this._collectionType;\n  }\n\n  /**\n   *\n   * @param {Type<any>} collectionType\n   */\n  set collectionType(collectionType: Type<any>) {\n    this._collectionType = collectionType;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get collectionName(): string {\n    return this._collectionType ? nameOf(this._collectionType) : \"\";\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return !!this._collectionType;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray() {\n    return isArrayOrArrayClass(this._collectionType);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isPrimitive() {\n    return isPrimitiveOrPrimitiveClass(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isDate() {\n    return isDate(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isObject() {\n    return isObject(this.type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isClass() {\n    return isClass(this.type);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   *\n   * @param {string} value\n   */\n  set name(value: string) {\n    this._name = value;\n  }\n\n  protected setTarget(target: Type<any>): void {\n    this._target = target;\n    let type;\n\n    if (typeof this._index === \"number\") {\n      type = Metadata.getParamTypes(this._target, this._propertyKey)[this._index];\n    } else {\n      type = Metadata.getType(this._target, this._propertyKey);\n    }\n\n    if (isCollection(type)) {\n      this._collectionType = type;\n      this._type = Object;\n    } else {\n      this._type = type;\n    }\n\n    this._name = nameOf(this._propertyKey);\n  }\n}\n"],"sourceRoot":"../../src"}