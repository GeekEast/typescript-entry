{"version":3,"sources":["utils/promiseTimeout.ts"],"names":[],"mappings":";;AAAA;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,OAAqB,EAAE,OAAe,IAAI;IACvE,MAAM,OAAO,GAAG,CAAC,OAAqB,EAAE,IAAY,EAAE,EAAE,CACtD,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;QACpB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACtB,OAAO,EAAE,CAAC;YAEV,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;QACH,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,KAAK,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEL,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;IAE3D,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAdD,wCAcC","file":"promiseTimeout.js","sourcesContent":["/**\n *\n * @param {Promise<any>} promise\n * @param {number} time\n * @returns {Promise<any>}\n */\nexport function promiseTimeout(promise: Promise<any>, time: number = 1000): Promise<{ok: boolean; response: any}> {\n  const timeout = (promise: Promise<any>, time: number) =>\n    new Promise(resolve => {\n      promise.then(response => {\n        resolve();\n\n        return response;\n      });\n      setTimeout(() => resolve({ok: false}), time);\n    });\n\n  promise = promise.then(response => ({ok: true, response}));\n\n  return Promise.race([promise, timeout(promise, time)]);\n}\n"],"sourceRoot":"../../src"}