{"version":3,"sources":["utils/deepExtends.ts"],"names":[],"mappings":"AASA,wBAAgB,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,GAAE;IAAC,CAAC,GAAG,EAAE,MAAM,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,KAAK,GAAG,CAAA;CAAM,GAAG,GAAG,CA4E3H","file":"deepExtends.d.ts","sourcesContent":["/**\n *\n * @param out\n * @param obj\n * @param {{[p: string]: (collection: any[], value: any) => any}} reducers\n * @returns {any}\n */\nimport {isArrayOrArrayClass, isPrimitive, isPrimitiveOrPrimitiveClass} from \"./ObjectUtils\";\n\nexport function deepExtends(out: any, obj: any, reducers: {[key: string]: (collection: any[], value: any) => any} = {}): any {\n  if (obj === undefined || obj === null) {\n    return obj;\n  }\n\n  if (isPrimitive(obj) || typeof obj === \"symbol\" || typeof obj === \"function\") {\n    return obj;\n  }\n\n  if (isArrayOrArrayClass(obj)) {\n    out = out || [];\n  } else {\n    out = out || {};\n  }\n\n  const defaultReducer = reducers[\"default\"]\n    ? reducers[\"default\"]\n    : (collection: any[], value: any) => {\n        collection.push(value);\n\n        return collection;\n      };\n  const set = (key: string | number, value: any) => {\n    if (isArrayOrArrayClass(obj)) {\n      out.push(value);\n    } else {\n      out[key] = value;\n    }\n  };\n\n  Object.keys(obj).forEach(key => {\n    let value = obj[key];\n\n    if (value === undefined || value === null) {\n      return;\n    }\n\n    if (value === \"\" && out[key] !== \"\") {\n      return;\n    }\n\n    if (isPrimitiveOrPrimitiveClass(value) || typeof value === \"function\") {\n      set(key, value);\n\n      return;\n    }\n\n    if (isArrayOrArrayClass(value)) {\n      value = value.map((value: any) => deepExtends(undefined, value));\n\n      set(\n        key,\n        []\n          .concat(out[key] || [], value)\n          .reduce(\n            (collection: any[], value: any) => (reducers[key] ? reducers[key](collection, value) : defaultReducer(collection, value)),\n            []\n          )\n      );\n\n      return;\n    }\n\n    // Object\n    if (isArrayOrArrayClass(obj)) {\n      set(key, deepExtends(undefined, value, reducers));\n    } else {\n      set(key, deepExtends(out[key], value, reducers));\n    }\n  });\n\n  if (isArrayOrArrayClass(out)) {\n    out.reduce((collection: any[], value: any) => defaultReducer(collection, value), []);\n  }\n\n  return out;\n}\n"],"sourceRoot":"../../src"}