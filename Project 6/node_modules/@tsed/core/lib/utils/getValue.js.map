{"version":3,"sources":["utils/getValue.ts"],"names":[],"mappings":";;AAAA;;;;;;;GAOG;AACH,SAAgB,QAAQ,CAAC,UAAkB,EAAE,KAAU,EAAE,YAAkB,EAAE,SAAS,GAAG,GAAG;IAC1F,MAAM,IAAI,GAAa,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAEnD,MAAM,QAAQ,GAAG,CAAC,GAAW,EAAE,EAAE;QAC/B,IAAI,OAAO,KAAK,CAAC,GAAG,KAAK,UAAU,EAAE;YACnC,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACvB;QAED,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAG,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,GAAE;IAE3D,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;AACpD,CAAC;AAdD,4BAcC","file":"getValue.js","sourcesContent":["/**\n *\n * @param {string} expression\n * @param scope\n * @param defaultValue\n * @param separator\n * @returns {any}\n */\nexport function getValue(expression: string, scope: any, defaultValue?: any, separator = \".\") {\n  const keys: string[] = expression.split(separator);\n\n  const getValue = (key: string) => {\n    if (typeof scope.get === \"function\") {\n      return scope.get(key);\n    }\n\n    return scope[key];\n  };\n\n  while ((scope = getValue(keys.shift()!)) && keys.length) {}\n\n  return scope === undefined ? defaultValue : scope;\n}\n"],"sourceRoot":"../../src"}