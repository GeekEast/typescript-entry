{"version":3,"sources":["utils/ObjectUtils.ts"],"names":[],"mappings":"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","file":"ObjectUtils.d.ts","sourcesContent":["/**\n * Get the class constructor\n * @param target\n */\nexport function getConstructor(target: any): Function {\n  return typeof target === \"function\" ? target : target.constructor;\n}\n\n/**\n * Get the class constructor\n * @param target\n */\nexport function constructorOf(target: any): Function {\n  return getConstructor(target);\n}\n\n/**\n * Get the provide constructor if target is an instance.\n * @param target\n * @returns {*}\n */\nexport function getClass(target: any): any {\n  return target.prototype ? target : target.constructor;\n}\n\n/**\n * Get the provide constructor if target is an instance.\n * @param target\n * @returns {*}\n * @alias getClass\n */\nexport function classOf(target: any) {\n  return getClass(target);\n}\n\n/**\n *\n * @param target\n * @returns {symbol}\n */\nexport function getClassOrSymbol(target: any): any {\n  return isClass(target) ? getClass(target) : target;\n}\n\n/**\n *\n * @param target\n * @returns {\"string\" | \"number\" | \"boolean\" | \"any\"}\n */\nexport function primitiveOf(target: any): \"string\" | \"number\" | \"boolean\" | \"any\" {\n  if (isString(target)) {\n    return \"string\";\n  }\n  if (isNumber(target)) {\n    return \"number\";\n  }\n  if (isBoolean(target)) {\n    return \"boolean\";\n  }\n\n  return \"any\";\n}\n\n/**\n *\n * @param target\n */\nexport function isSymbol(target: any) {\n  return typeof target === \"symbol\" || target instanceof Symbol || target === Symbol;\n}\n\n/**\n *\n * @param target\n * @returns {boolean}\n */\nexport function isString(target: any): boolean {\n  return typeof target === \"string\" || target instanceof String || target === String;\n}\n\n/**\n *\n * @param target\n * @returns {boolean}\n */\nexport function isNumber(target: any): boolean {\n  return typeof target === \"number\" || target instanceof Number || target === Number;\n}\n\n/**\n *\n * @param target\n * @returns {boolean}\n */\nexport function isBoolean(target: any): boolean {\n  return typeof target === \"boolean\" || target instanceof Boolean || target === Boolean;\n}\n\n/**\n * Return true if the given obj is a primitive.\n * @param target\n * @returns {boolean}\n */\nexport function isPrimitiveOrPrimitiveClass(target: any): boolean {\n  return isString(target) || isNumber(target) || isBoolean(target);\n}\n\nexport function isPrimitive(target: any): boolean {\n  return isPrimitiveOrPrimitiveClass(target);\n}\n\n/**\n *\n * @param target\n * @returns {Boolean}\n */\nexport function isArray(target: any): boolean {\n  return Array.isArray(target);\n}\n\n/**\n * Return true if the clazz is an array.\n * @param target\n * @returns {boolean}\n */\nexport function isArrayOrArrayClass(target: any): boolean {\n  return target === Array || isArray(target);\n}\n\n/**\n * Return true if the target.\n * @param target\n * @returns {boolean}\n */\nexport function isCollection(target: any): boolean {\n  return (\n    isArrayOrArrayClass(target) ||\n    target === Map ||\n    target instanceof Map ||\n    target === Set ||\n    target instanceof Set ||\n    target === WeakMap ||\n    target instanceof WeakMap ||\n    target === WeakSet ||\n    target instanceof WeakSet\n  );\n}\n\n/**\n *\n * @param target\n * @returns {boolean}\n */\nexport function isDate(target: any): boolean {\n  return target === Date || (target instanceof Date && !isNaN(+target));\n}\n\n/**\n *\n * @param target\n * @returns {boolean}\n */\nexport function isClassObject(target: any): boolean {\n  return target === Object;\n}\n\nexport function isObject(target: any): boolean {\n  return typeof target === \"object\";\n}\n\n/**\n *\n * @param target\n * @returns {boolean}\n */\nexport function isClass(target: any) {\n  if (!target) {\n    return false;\n  }\n\n  if (isArrowFn(target)) {\n    return false;\n  }\n\n  return !(isSymbol(target) || isPrimitiveOrPrimitiveClass(target) || isClassObject(target) || isDate(target) || isPromise(target));\n}\n\nexport function isFunction(target: any) {\n  return typeof target === \"function\";\n}\n\nexport function isArrowFn(target: any) {\n  return target && isFunction(target) && !target.prototype;\n}\n\n/**\n *\n * @param value\n */\nexport function isNil(value: any) {\n  return value === undefined || value === null;\n}\n\n/**\n * Return true if the value is an empty string, null or undefined.\n * @param value\n * @returns {boolean}\n */\nexport function isEmpty(value: any): boolean {\n  return value === \"\" || isNil(value);\n}\n\n/**\n * Tests to see if the object is an ES2015 (ES6) Promise\n * @see {@link https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects}\n * @param target\n * @returns {boolean}\n */\nexport function isPromise(target: any): boolean {\n  return (\n    target === Promise ||\n    target instanceof Promise ||\n    (!!target && typeof target.subscribe !== \"function\" && typeof target.then === \"function\")\n  );\n}\n\nexport function isStream(obj: any) {\n  return obj !== null && typeof obj === \"object\" && typeof obj.pipe === \"function\";\n}\n\n/**\n *\n * @param target\n * @returns {any}\n */\nexport function getInheritedClass(target: any): any {\n  return Object.getPrototypeOf(target);\n}\n\n/**\n *\n * @param target\n * @returns {Array}\n */\nexport function ancestorsOf(target: any) {\n  const classes = [];\n\n  let currentTarget = getClass(target);\n\n  while (nameOf(currentTarget) !== \"\") {\n    classes.unshift(currentTarget);\n    currentTarget = getInheritedClass(currentTarget);\n  }\n\n  return classes;\n}\n\n/**\n * Get object name\n */\nexport function nameOf(obj: any): string {\n  switch (typeof obj) {\n    default:\n      return \"\" + obj;\n    case \"symbol\":\n      return nameOfSymbol(obj);\n    case \"function\":\n      return nameOfClass(obj);\n  }\n}\n\n/**\n * Get the provide name.\n * @param targetClass\n */\nexport function nameOfClass(targetClass: any): string {\n  return typeof targetClass === \"function\" ? targetClass.name : targetClass.constructor.name;\n}\n\n/**\n * Get symbol name.\n * @param sym\n */\nexport const nameOfSymbol = (sym: symbol): string =>\n  sym\n    .toString()\n    .replace(\"Symbol(\", \"\")\n    .replace(\")\", \"\");\n\n/**\n * Return the descriptor for a given class and propertyKey\n * @param target\n * @param {string} propertyKey\n * @returns {PropertyDescriptor}\n */\nexport function descriptorOf(target: any, propertyKey: string): PropertyDescriptor {\n  return Object.getOwnPropertyDescriptor((target && target.prototype) || target, propertyKey)!;\n}\n\nexport function inheritedDescriptorOf(target: any, propertyKey: string): PropertyDescriptor | undefined {\n  for (const klass of ancestorsOf(target)) {\n    const descriptor = Object.getOwnPropertyDescriptor((klass && klass.prototype) || klass, propertyKey)!;\n\n    if (descriptor) {\n      return descriptor;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Return the prototype of the given class.\n * @param target\n * @returns {any}\n */\nexport function prototypeOf(target: any) {\n  return classOf(target) === target ? target.prototype : target;\n}\n\n/**\n *\n * @param obj\n * @param key\n */\nexport function isEnumerable(obj: any, key: string) {\n  const klass = getClass(obj);\n\n  if (klass) {\n    const descriptor = inheritedDescriptorOf(klass, key);\n\n    if (descriptor) {\n      return descriptor.enumerable;\n    }\n  }\n\n  return obj.propertyIsEnumerable(key);\n}\n\n/**\n * Return all enumerable keys of the given object\n * @param obj\n */\nexport function getKeys(obj: any) {\n  const keys: string[] = [];\n\n  for (const key in obj) {\n    if (isEnumerable(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n}\n\n/**\n * Return all methods for a given class.\n * @param target\n */\nexport function methodsOf(target: any) {\n  const methods = new Map();\n  target = classOf(target);\n\n  ancestorsOf(target).forEach(target => {\n    const keys = Reflect.ownKeys(prototypeOf(target));\n\n    keys.forEach((propertyKey: string) => {\n      if (propertyKey !== \"constructor\") {\n        methods.set(propertyKey, {target, propertyKey});\n      }\n    });\n  });\n\n  return Array.from(methods.values());\n}\n"],"sourceRoot":"../../src"}