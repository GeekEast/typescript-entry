{"version":3,"sources":["utils/deepClone.ts"],"names":[],"mappings":"AAIA;;;GAGG;AACH,wBAAgB,SAAS,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,CAgC1C","file":"deepClone.d.ts","sourcesContent":["import {isArrayOrArrayClass, isDate, isFunction, isNil, isPrimitive, isSymbol} from \"./ObjectUtils\";\n\nconst isBasicType = (source: any) => isNil(source) || isPrimitive(source) || isSymbol(source) || isFunction(source);\n\n/**\n * Return a cloned value\n * @param source\n */\nexport function deepClone(source: any): any {\n  let dest: any;\n\n  if (isBasicType(source)) {\n    return source;\n  }\n\n  if (isDate(source)) {\n    return new Date(source);\n  }\n\n  dest = isArrayOrArrayClass(source) ? [] : {};\n\n  for (const key in source) {\n    // Use getOwnPropertyDescriptor instead of source[key] to prevent from trigering setter/getter.\n    const descriptor = Object.getOwnPropertyDescriptor(source, key)!;\n\n    if (descriptor) {\n      if (!isFunction(descriptor.value)) {\n        dest[key] = deepClone(descriptor.value);\n      } else {\n        Object.defineProperty(dest, key, descriptor);\n      }\n    }\n  }\n\n  if (!isArrayOrArrayClass(source)) {\n    const prototype = Reflect.getPrototypeOf(source);\n    Reflect.setPrototypeOf(dest, prototype);\n  }\n\n  return dest;\n}\n"],"sourceRoot":"../../src"}