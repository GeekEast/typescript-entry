{"version":3,"sources":["utils/DecoratorUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,mBAAmB,EAAC,MAAM,eAAe,CAAC;AAGlD;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,IAAI,EAAE,GAAG,EAAE,EACX,QAAQ,UAAQ,GACf,WAAW,GAAG,uBAAuB,GAAG,kBAAkB,GAAG,UAAU,GAAG,iBAAiB,GAAG,QAAQ,GAAG,eAAe,GAAG,OAAO,CAoBpI;AAED;;GAEG;AACH,qBAAa,wBAAyB,SAAQ,KAAK;IACjD,IAAI,EAAE,4BAA4B,CAAC;gBAEvB,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;IAIvC,OAAO,CAAC,MAAM,CAAC,YAAY;CAa5B;AAED;;;;;GAKG;AACH,wBAAgB,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,GAAG,mBAAmB,CAEnF;AAED,wBAAgB,iBAAiB,CAAC,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,QAY3D;AAED,wBAAgB,eAAe,CAAC,GAAG,UAAU,EAAE,QAAQ,EAAE,GAAG,QAAQ,CAMnE","file":"DecoratorUtils.d.ts","sourcesContent":["import {DecoratorParameters} from \"../interfaces\";\nimport {classOf, descriptorOf, getClass, methodsOf, nameOf, prototypeOf} from \"./ObjectUtils\";\n\n/**\n *\n * @param {any[]} args\n * @param longType\n * @returns {\"parameter\" | \"property\" | \"property.static\" | \"method\" | \"method.static\" | \"class\"}\n */\nexport function getDecoratorType(\n  args: any[],\n  longType = false\n): \"parameter\" | \"parameter.constructor\" | \"parameter.static\" | \"property\" | \"property.static\" | \"method\" | \"method.static\" | \"class\" {\n  const [target, propertyKey, descriptor] = args;\n\n  const staticType = (type: string): any => {\n    if (!longType) {\n      return type;\n    }\n\n    return target !== getClass(target) ? type : ((type + \".static\") as any);\n  };\n\n  if (typeof descriptor === \"number\") {\n    return propertyKey ? staticType(\"parameter\") : longType ? \"parameter.constructor\" : \"parameter\";\n  }\n\n  if ((propertyKey && descriptor === undefined) || (descriptor && (descriptor.get || descriptor.set))) {\n    return staticType(\"property\");\n  }\n\n  return descriptor && descriptor.value ? staticType(\"method\") : \"class\";\n}\n\n/**\n *\n */\nexport class UnsupportedDecoratorType extends Error {\n  name: \"UNSUPPORTED_DECORATOR_TYPE\";\n\n  constructor(decorator: any, args: any[]) {\n    super(UnsupportedDecoratorType.buildMessage(decorator, args));\n  }\n\n  private static buildMessage(decorator: any, args: any[]): string {\n    const [target, propertyKey, index] = args;\n\n    const bindingType = getDecoratorType(args, true);\n    const shortBinding = bindingType.split(\"/\")[0];\n    const param = shortBinding === \"parameter\" ? \".[\" + index + \"]\" : \"\";\n    const cstr = shortBinding === \"parameter\" ? \".constructor\" : \"\";\n    const method = propertyKey ? \".\" + propertyKey : cstr;\n\n    const path = nameOf(getClass(target)) + method + param;\n\n    return `${decorator.name} cannot used as ${bindingType} at ${path}`;\n  }\n}\n\n/**\n *\n * @param target\n * @param {string} propertyKey\n * @returns {DecoratorParameters}\n */\nexport function decoratorArgs(target: any, propertyKey: string): DecoratorParameters {\n  return [target, propertyKey, descriptorOf(target, propertyKey)!];\n}\n\nexport function decorateMethodsOf(klass: any, decorator: any) {\n  methodsOf(klass).forEach(({target, propertyKey}) => {\n    if (target !== classOf(klass)) {\n      Object.defineProperty(prototypeOf(klass), propertyKey, {\n        value(...args: any[]) {\n          return prototypeOf(target)[propertyKey].apply(this, args);\n        }\n      });\n    }\n\n    decorator(prototypeOf(klass), propertyKey, descriptorOf(klass, propertyKey));\n  });\n}\n\nexport function applyDecorators(...decorators: Function[]): Function {\n  return (...args: DecoratorParameters) => {\n    decorators.forEach(decorator => {\n      decorator(...args);\n    });\n  };\n}\n"],"sourceRoot":"../../src"}