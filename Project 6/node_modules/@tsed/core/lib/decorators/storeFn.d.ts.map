{"version":3,"sources":["decorators/storeFn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,EAAC,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAC,mBAAmB,EAAC,MAAM,mCAAmC,CAAC;AACtE;;;;;GAKG;AACH,wBAAgB,OAAO,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,mBAAmB,KAAK,IAAI,GAAG,QAAQ,CAU7F","file":"storeFn.d.ts","sourcesContent":["import {Store} from \"../class/Store\";\nimport {DecoratorParameters} from \"../interfaces/DecoratorParameters\";\n/**\n * Create a store correctly configured from the parameters given by the decorator.\n * The `fn` can return a decorator that will be initialized with the parameters (target, propertyKey, descriptor).\n * @param {(store: Store, parameters: DecoratorParameters) => void} fn\n * @returns {Function}\n */\nexport function StoreFn(fn: (store: Store, parameters: DecoratorParameters) => void): Function {\n  return (...parameters: any[]): any => {\n    const store = Store.from(...parameters);\n    const result: any = fn(store, parameters as DecoratorParameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n\n    return parameters[2];\n  };\n}\n"],"sourceRoot":"../../src"}