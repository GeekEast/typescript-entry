{"version":3,"sources":["decorators/storeFn.ts"],"names":[],"mappings":";;AAAA,0CAAqC;AAErC;;;;;GAKG;AACH,SAAgB,OAAO,CAAC,EAA2D;IACjF,OAAO,CAAC,GAAG,UAAiB,EAAO,EAAE;QACnC,MAAM,KAAK,GAAG,aAAK,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;QACxC,MAAM,MAAM,GAAQ,EAAE,CAAC,KAAK,EAAE,UAAiC,CAAC,CAAC;QACjE,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAChC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;SACvB;QAED,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;AACJ,CAAC;AAVD,0BAUC","file":"storeFn.js","sourcesContent":["import {Store} from \"../class/Store\";\nimport {DecoratorParameters} from \"../interfaces/DecoratorParameters\";\n/**\n * Create a store correctly configured from the parameters given by the decorator.\n * The `fn` can return a decorator that will be initialized with the parameters (target, propertyKey, descriptor).\n * @param {(store: Store, parameters: DecoratorParameters) => void} fn\n * @returns {Function}\n */\nexport function StoreFn(fn: (store: Store, parameters: DecoratorParameters) => void): Function {\n  return (...parameters: any[]): any => {\n    const store = Store.from(...parameters);\n    const result: any = fn(store, parameters as DecoratorParameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n\n    return parameters[2];\n  };\n}\n"],"sourceRoot":"../../src"}