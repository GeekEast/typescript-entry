{"version":3,"sources":["config/services/ServerSettingsService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,GAAG,EAA+B,MAAM,YAAY,CAAC;AAC7D,OAAO,EAAC,WAAW,EAAc,aAAa,EAAC,MAAM,UAAU,CAAC;AAChE,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,uBAAuB,EAAE,eAAe,EAAC,MAAM,+BAA+B,CAAC;AAI1I;;GAEG;AACH,qBAIa,qBAAsB,YAAW,eAAe,EAAE,WAAW;IACxE,SAAS,CAAC,GAAG,mBAA0B;;IA6BvC;;;OAGG;IACC,OAAO,EAII,MAAM;IAIrB;;;OAGG;;;;;IACC,OAAO,EAQQ,MAAM;IAIzB;;;OAGG;IACC,IAAI,EAAQ,MAAM,GAAG,MAAM;IAI/B;;;OAGG;;;;;IACC,YAAY,EAAI,KAAK,CAAC,aAAa;IAYvC;;;OAGG;;;;;IACC,QAAQ,EAAI,MAAM,GAAG,MAAM;IAY/B;;;OAGG;;;;;IACC,SAAS,EAAI,MAAM,GAAG,MAAM;IAYhC;;;OAGG;;;;;IACC,SAAS,EAAI,MAAM;IAYvB;;;OAGG;;;;;IACC,GAAG,EAAI,GAAG;IAYd;;;OAGG;;;;;IACC,KAAK,EAAI,uBAAuB;IAYpC;;;OAGG;;;;;IACC,cAAc,EAAI,MAAM,EAAE;IAY9B;;;OAGG;;;;;IACC,OAAO,EAAI,uBAAuB;IAYtC;;;OAGG;;IAGC,YAAY,EAKQ,uBAAuB;IAI/C;;;OAGG;;;;;IACC,WAAW,EAAI,MAAM,EAAE;IAY3B;;;OAGG;;;;;IACC,KAAK,EAAI,OAAO;IAYpB;;;OAGG;;;;;IACC,OAAO,EAAI,eAAe;IAY9B;;;OAGG;;;;;IACC,qBAAqB,EAAI,OAAO;IAchC,MAAM,EAAI,OAAO,CAAC,eAAe,CAAC;IAiClC,OAAO,EAIU,MAAM,EAAE;IAIzB,eAAe,EAAI,aAAa;IAQpC;;;OAGG;;;;;IACC,MAAM,EAAI,eAAe;IAY7B;;;;OAIG;IACH,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG;IAI9B;;;;OAIG;IACH,OAAO,CAAC,MAAM,CAAC,mBAAmB;IAYlC;;;;OAIG;IACH,OAAO,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG;IAI7F;;;;OAIG;IACH,GAAG,CAAC,WAAW,EAAE,MAAM,GAAG,eAAe,EAAE,KAAK,CAAC,EAAE,GAAG,GAAG,IAAI;IAwB7D;;;;OAIG;IACH,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,MAAM,GAAG,CAAC;IAI9B;;;;OAIG;IACH,OAAO,CAAC,KAAK,EAAE,GAAG;IAgBlB;;;OAGG;IACH,WAAW,IAAI;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;IAI9C;;;OAGG;IACH,WAAW,CAAC,QAAQ,EAAE;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;IAIrD;;;OAGG;IACH,YAAY,IAAI;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;IAI/C;;;OAGG;IACH,YAAY,CAAC,QAAQ,EAAE;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;CAGvD","file":"ServerSettingsService.d.ts","sourcesContent":["import {Env, getValue, Metadata, setValue} from \"@tsed/core\";\nimport {IDISettings, Injectable, ProviderScope} from \"@tsed/di\";\nimport * as Https from \"https\";\nimport {$log} from \"ts-log-debug\";\nimport {SERVER_SETTINGS} from \"../constants/index\";\nimport {IErrorsSettings, ILoggerSettings, IRouterSettings, IServerMountDirectories, IServerSettings} from \"../interfaces/IServerSettings\";\n\nconst rootDir = process.cwd();\n\n/**\n * `ServerSettingsService` contains all information about [ServerLoader](/api/common/server/components/ServerLoader.md) configuration.\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class ServerSettingsService implements IServerSettings, IDISettings {\n  protected map = new Map<string, any>();\n\n  constructor() {\n    this.rootDir = rootDir;\n    this.env = (process.env.NODE_ENV as Env) || Env.DEV;\n    this.port = 8080;\n    this.httpsPort = 8000;\n    this.version = \"1.0.0\";\n    this.uploadDir = \"${rootDir}/uploads\";\n    this.controllerScope = ProviderScope.SINGLETON;\n    this.logger = {\n      debug: false,\n      level: \"info\",\n      logRequest: true,\n      jsonIndentation: this.env === Env.PROD ? 0 : 2\n    };\n    this.errors = {\n      headerName: \"errors\"\n    };\n\n    this.mount = {\n      \"/rest\": \"${rootDir}/controllers/**/*.ts\"\n    };\n\n    this.exclude = [\"**/*.spec.ts\", \"**/*.spec.js\"];\n\n    this.componentsScan = [\"${rootDir}/mvc/**/*.ts\", \"${rootDir}/services/**/*.ts\", \"${rootDir}/converters/**/*.ts\"];\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get version() {\n    return this.map.get(\"version\");\n  }\n\n  set version(v: string) {\n    this.map.set(\"version\", v);\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get rootDir() {\n    return this.map.get(\"rootDir\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set rootDir(value: string) {\n    this.map.set(\"rootDir\", value);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set port(value: string | number) {\n    this.httpPort = value;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  get httpsOptions(): Https.ServerOptions {\n    return this.map.get(\"httpsOptions\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set httpsOptions(value: Https.ServerOptions) {\n    this.map.set(\"httpsOptions\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get httpPort(): string | number {\n    return this.map.get(\"httpPort\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set httpPort(value: string | number) {\n    this.map.set(\"httpPort\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get httpsPort(): string | number {\n    return this.map.get(\"httpsPort\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set httpsPort(value: string | number) {\n    this.map.set(\"httpsPort\", value);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get uploadDir(): string {\n    return this.map.get(\"uploadDir\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set uploadDir(value: string) {\n    this.map.set(\"uploadDir\", value);\n  }\n\n  /**\n   *\n   * @returns {Map<string, any>}\n   */\n  get env(): Env {\n    return this.map.get(\"env\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set env(value: Env) {\n    this.map.set(\"env\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get mount(): IServerMountDirectories {\n    return this.map.get(\"mount\") || {};\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set mount(value: IServerMountDirectories) {\n    this.map.set(\"mount\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get componentsScan(): string[] {\n    return this.map.get(\"componentsScan\") || [];\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set componentsScan(value: string[]) {\n    this.map.set(\"componentsScan\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get statics(): IServerMountDirectories {\n    return this.map.get(\"statics\") || this.map.get(\"serveStatic\") || {};\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set statics(value: IServerMountDirectories) {\n    this.map.set(\"statics\", value);\n  }\n\n  /**\n   *\n   * @param value\n   */\n\n  /* istanbul ignore next */\n  get serveStatics() {\n    return this.statics;\n  }\n\n  /* istanbul ignore next */\n  set serveStatics(value: IServerMountDirectories) {\n    this.statics = value;\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get acceptMimes(): string[] {\n    return this.map.get(\"acceptMimes\") || [\"application/json\"];\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set acceptMimes(value: string[]) {\n    this.map.set(\"acceptMimes\", value || []);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get debug(): boolean {\n    return this.logger.level === \"info\";\n  }\n\n  /**\n   *\n   * @param {boolean} debug\n   */\n  set debug(debug: boolean) {\n    this.logger = {...this.logger, level: debug ? \"debug\" : \"info\"};\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get routers(): IRouterSettings {\n    return this.map.get(\"routers\") || {};\n  }\n\n  /**\n   *\n   * @param {IRouterSettings} options\n   */\n  set routers(options: IRouterSettings) {\n    this.map.set(\"routers\", options);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get validationModelStrict(): boolean {\n    const value = this.map.get(\"validationModelStrict\");\n\n    return value === undefined ? true : value;\n  }\n\n  /**\n   *\n   * @param {boolean} value\n   */\n  set validationModelStrict(value: boolean) {\n    this.map.set(\"validationModelStrict\", value);\n  }\n\n  get logger(): Partial<ILoggerSettings> {\n    return this.map.get(\"logger\") || {};\n  }\n\n  set logger(value: Partial<ILoggerSettings>) {\n    const requestFields = this.get(\"logRequestFields\");\n    const logger = {requestFields, ...this.logger, ...value};\n    logger.debug = logger.level === \"debug\";\n\n    this.map.set(\"logger\", logger);\n    this.map.set(\"debug\", logger.debug);\n\n    if (logger.format) {\n      $log.appenders.set(\"stdout\", {\n        type: \"stdout\",\n        levels: [\"info\", \"debug\"],\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n\n      $log.appenders.set(\"stderr\", {\n        levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n        type: \"stderr\",\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n    }\n  }\n\n  get exclude() {\n    return this.map.get(\"exclude\") || [];\n  }\n\n  set exclude(exclude: string[]) {\n    this.map.set(\"exclude\", exclude);\n  }\n\n  get controllerScope(): ProviderScope {\n    return this.map.get(\"scope\");\n  }\n\n  set controllerScope(scope: ProviderScope) {\n    this.map.set(\"scope\", scope);\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get errors(): IErrorsSettings {\n    return this.map.get(\"errors\") || {};\n  }\n\n  /**\n   *\n   * @param {IRouterSettings} options\n   */\n  set errors(options: IErrorsSettings) {\n    this.map.set(\"errors\", options);\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {any}\n   */\n  static getMetadata(target: any) {\n    return Metadata.getOwn(SERVER_SETTINGS, target);\n  }\n\n  /**\n   *\n   * @param addressPort\n   * @returns {{address: string, port: number}}\n   */\n  private static buildAddressAndPort(addressPort: string | number): {address: string; port: number} {\n    let address = \"0.0.0.0\";\n    let port = addressPort;\n\n    if (typeof addressPort === \"string\" && addressPort.indexOf(\":\") > -1) {\n      [address, port] = addressPort.split(\":\");\n      port = +port;\n    }\n\n    return {address, port: port as number};\n  }\n\n  /**\n   *\n   * @param callbackfn\n   * @param thisArg\n   */\n  forEach(callbackfn: (value: any, index: string, map: Map<string, any>) => void, thisArg?: any) {\n    return this.map.forEach(callbackfn, thisArg);\n  }\n\n  /**\n   *\n   * @param propertyKey\n   * @param value\n   */\n  set(propertyKey: string | IServerSettings, value?: any): this {\n    if (typeof propertyKey === \"string\") {\n      setValue(propertyKey, value, this.map);\n    } else {\n      const self: any = this;\n\n      Object.keys(propertyKey).forEach(key => {\n        const descriptor = Object.getOwnPropertyDescriptor(ServerSettingsService.prototype, key);\n\n        if (descriptor && [\"set\", \"map\"].indexOf(key) === -1) {\n          self[key] = propertyKey[key];\n        } else {\n          this.set(key, propertyKey[key]);\n        }\n      });\n\n      this.forEach((value, key) => {\n        this.map.set(key, this.resolve(value));\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @param propertyKey\n   * @returns {undefined|any}\n   */\n  get<T>(propertyKey: string): T {\n    return this.resolve(getValue(propertyKey, this.map));\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {any}\n   */\n  resolve(value: any) {\n    if (typeof value === \"object\" && value !== null) {\n      Object.keys(value).forEach((k: string, i: number, m: any) => {\n        value[k] = this.resolve(value[k]);\n      });\n\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return value.replace(/\\${rootDir}/, this.rootDir);\n    }\n\n    return value;\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpPort(): {address: string; port: number} {\n    return ServerSettingsService.buildAddressAndPort(this.map.get(\"httpPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpPort(settings: {address: string; port: number}) {\n    this.map.set(\"httpPort\", `${settings.address}:${settings.port}`);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpsPort(): {address: string; port: number} {\n    return ServerSettingsService.buildAddressAndPort(this.map.get(\"httpsPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpsPort(settings: {address: string; port: number}) {\n    this.map.set(\"httpsPort\", `${settings.address}:${settings.port}`);\n  }\n}\n"],"sourceRoot":"../../../src"}