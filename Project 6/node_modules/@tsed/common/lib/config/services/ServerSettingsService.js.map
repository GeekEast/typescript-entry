{"version":3,"sources":["config/services/ServerSettingsService.ts"],"names":[],"mappings":"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","file":"ServerSettingsService.js","sourcesContent":["import {Env, getValue, Metadata, setValue} from \"@tsed/core\";\nimport {IDISettings, Injectable, ProviderScope} from \"@tsed/di\";\nimport * as Https from \"https\";\nimport {$log} from \"ts-log-debug\";\nimport {SERVER_SETTINGS} from \"../constants/index\";\nimport {IErrorsSettings, ILoggerSettings, IRouterSettings, IServerMountDirectories, IServerSettings} from \"../interfaces/IServerSettings\";\n\nconst rootDir = process.cwd();\n\n/**\n * `ServerSettingsService` contains all information about [ServerLoader](/api/common/server/components/ServerLoader.md) configuration.\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class ServerSettingsService implements IServerSettings, IDISettings {\n  protected map = new Map<string, any>();\n\n  constructor() {\n    this.rootDir = rootDir;\n    this.env = (process.env.NODE_ENV as Env) || Env.DEV;\n    this.port = 8080;\n    this.httpsPort = 8000;\n    this.version = \"1.0.0\";\n    this.uploadDir = \"${rootDir}/uploads\";\n    this.controllerScope = ProviderScope.SINGLETON;\n    this.logger = {\n      debug: false,\n      level: \"info\",\n      logRequest: true,\n      jsonIndentation: this.env === Env.PROD ? 0 : 2\n    };\n    this.errors = {\n      headerName: \"errors\"\n    };\n\n    this.mount = {\n      \"/rest\": \"${rootDir}/controllers/**/*.ts\"\n    };\n\n    this.exclude = [\"**/*.spec.ts\", \"**/*.spec.js\"];\n\n    this.componentsScan = [\"${rootDir}/mvc/**/*.ts\", \"${rootDir}/services/**/*.ts\", \"${rootDir}/converters/**/*.ts\"];\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get version() {\n    return this.map.get(\"version\");\n  }\n\n  set version(v: string) {\n    this.map.set(\"version\", v);\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get rootDir() {\n    return this.map.get(\"rootDir\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set rootDir(value: string) {\n    this.map.set(\"rootDir\", value);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set port(value: string | number) {\n    this.httpPort = value;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  get httpsOptions(): Https.ServerOptions {\n    return this.map.get(\"httpsOptions\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set httpsOptions(value: Https.ServerOptions) {\n    this.map.set(\"httpsOptions\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get httpPort(): string | number {\n    return this.map.get(\"httpPort\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set httpPort(value: string | number) {\n    this.map.set(\"httpPort\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get httpsPort(): string | number {\n    return this.map.get(\"httpsPort\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set httpsPort(value: string | number) {\n    this.map.set(\"httpsPort\", value);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get uploadDir(): string {\n    return this.map.get(\"uploadDir\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set uploadDir(value: string) {\n    this.map.set(\"uploadDir\", value);\n  }\n\n  /**\n   *\n   * @returns {Map<string, any>}\n   */\n  get env(): Env {\n    return this.map.get(\"env\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set env(value: Env) {\n    this.map.set(\"env\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get mount(): IServerMountDirectories {\n    return this.map.get(\"mount\") || {};\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set mount(value: IServerMountDirectories) {\n    this.map.set(\"mount\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get componentsScan(): string[] {\n    return this.map.get(\"componentsScan\") || [];\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set componentsScan(value: string[]) {\n    this.map.set(\"componentsScan\", value);\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get statics(): IServerMountDirectories {\n    return this.map.get(\"statics\") || this.map.get(\"serveStatic\") || {};\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set statics(value: IServerMountDirectories) {\n    this.map.set(\"statics\", value);\n  }\n\n  /**\n   *\n   * @param value\n   */\n\n  /* istanbul ignore next */\n  get serveStatics() {\n    return this.statics;\n  }\n\n  /* istanbul ignore next */\n  set serveStatics(value: IServerMountDirectories) {\n    this.statics = value;\n  }\n\n  /**\n   *\n   * @returns {undefined|any}\n   */\n  get acceptMimes(): string[] {\n    return this.map.get(\"acceptMimes\") || [\"application/json\"];\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set acceptMimes(value: string[]) {\n    this.map.set(\"acceptMimes\", value || []);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get debug(): boolean {\n    return this.logger.level === \"info\";\n  }\n\n  /**\n   *\n   * @param {boolean} debug\n   */\n  set debug(debug: boolean) {\n    this.logger = {...this.logger, level: debug ? \"debug\" : \"info\"};\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get routers(): IRouterSettings {\n    return this.map.get(\"routers\") || {};\n  }\n\n  /**\n   *\n   * @param {IRouterSettings} options\n   */\n  set routers(options: IRouterSettings) {\n    this.map.set(\"routers\", options);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get validationModelStrict(): boolean {\n    const value = this.map.get(\"validationModelStrict\");\n\n    return value === undefined ? true : value;\n  }\n\n  /**\n   *\n   * @param {boolean} value\n   */\n  set validationModelStrict(value: boolean) {\n    this.map.set(\"validationModelStrict\", value);\n  }\n\n  get logger(): Partial<ILoggerSettings> {\n    return this.map.get(\"logger\") || {};\n  }\n\n  set logger(value: Partial<ILoggerSettings>) {\n    const requestFields = this.get(\"logRequestFields\");\n    const logger = {requestFields, ...this.logger, ...value};\n    logger.debug = logger.level === \"debug\";\n\n    this.map.set(\"logger\", logger);\n    this.map.set(\"debug\", logger.debug);\n\n    if (logger.format) {\n      $log.appenders.set(\"stdout\", {\n        type: \"stdout\",\n        levels: [\"info\", \"debug\"],\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n\n      $log.appenders.set(\"stderr\", {\n        levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n        type: \"stderr\",\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n    }\n  }\n\n  get exclude() {\n    return this.map.get(\"exclude\") || [];\n  }\n\n  set exclude(exclude: string[]) {\n    this.map.set(\"exclude\", exclude);\n  }\n\n  get controllerScope(): ProviderScope {\n    return this.map.get(\"scope\");\n  }\n\n  set controllerScope(scope: ProviderScope) {\n    this.map.set(\"scope\", scope);\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get errors(): IErrorsSettings {\n    return this.map.get(\"errors\") || {};\n  }\n\n  /**\n   *\n   * @param {IRouterSettings} options\n   */\n  set errors(options: IErrorsSettings) {\n    this.map.set(\"errors\", options);\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {any}\n   */\n  static getMetadata(target: any) {\n    return Metadata.getOwn(SERVER_SETTINGS, target);\n  }\n\n  /**\n   *\n   * @param addressPort\n   * @returns {{address: string, port: number}}\n   */\n  private static buildAddressAndPort(addressPort: string | number): {address: string; port: number} {\n    let address = \"0.0.0.0\";\n    let port = addressPort;\n\n    if (typeof addressPort === \"string\" && addressPort.indexOf(\":\") > -1) {\n      [address, port] = addressPort.split(\":\");\n      port = +port;\n    }\n\n    return {address, port: port as number};\n  }\n\n  /**\n   *\n   * @param callbackfn\n   * @param thisArg\n   */\n  forEach(callbackfn: (value: any, index: string, map: Map<string, any>) => void, thisArg?: any) {\n    return this.map.forEach(callbackfn, thisArg);\n  }\n\n  /**\n   *\n   * @param propertyKey\n   * @param value\n   */\n  set(propertyKey: string | IServerSettings, value?: any): this {\n    if (typeof propertyKey === \"string\") {\n      setValue(propertyKey, value, this.map);\n    } else {\n      const self: any = this;\n\n      Object.keys(propertyKey).forEach(key => {\n        const descriptor = Object.getOwnPropertyDescriptor(ServerSettingsService.prototype, key);\n\n        if (descriptor && [\"set\", \"map\"].indexOf(key) === -1) {\n          self[key] = propertyKey[key];\n        } else {\n          this.set(key, propertyKey[key]);\n        }\n      });\n\n      this.forEach((value, key) => {\n        this.map.set(key, this.resolve(value));\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @param propertyKey\n   * @returns {undefined|any}\n   */\n  get<T>(propertyKey: string): T {\n    return this.resolve(getValue(propertyKey, this.map));\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {any}\n   */\n  resolve(value: any) {\n    if (typeof value === \"object\" && value !== null) {\n      Object.keys(value).forEach((k: string, i: number, m: any) => {\n        value[k] = this.resolve(value[k]);\n      });\n\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return value.replace(/\\${rootDir}/, this.rootDir);\n    }\n\n    return value;\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpPort(): {address: string; port: number} {\n    return ServerSettingsService.buildAddressAndPort(this.map.get(\"httpPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpPort(settings: {address: string; port: number}) {\n    this.map.set(\"httpPort\", `${settings.address}:${settings.port}`);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpsPort(): {address: string; port: number} {\n    return ServerSettingsService.buildAddressAndPort(this.map.get(\"httpsPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpsPort(settings: {address: string; port: number}) {\n    this.map.set(\"httpsPort\", `${settings.address}:${settings.port}`);\n  }\n}\n"],"sourceRoot":"../../../src"}