/// <reference types="node" />
import { Env } from "@tsed/core";
import { IDISettings, ProviderScope } from "@tsed/di";
import * as Https from "https";
import { IErrorsSettings, ILoggerSettings, IRouterSettings, IServerMountDirectories, IServerSettings } from "../interfaces/IServerSettings";
/**
 * `ServerSettingsService` contains all information about [ServerLoader](/api/common/server/components/ServerLoader.md) configuration.
 */
export declare class ServerSettingsService implements IServerSettings, IDISettings {
    protected map: Map<string, any>;
    constructor();
    /**
     *
     * @returns {any}
     */
    version: string;
    /**
     *
     * @returns {any}
     */
    /**
    *
    * @param value
    */
    rootDir: string;
    /**
     *
     * @param value
     */
    port: string | number;
    /**
     *
     * @param value
     */
    /**
    *
    * @param value
    */
    httpsOptions: Https.ServerOptions;
    /**
     *
     * @returns {undefined|any}
     */
    /**
    *
    * @param value
    */
    httpPort: string | number;
    /**
     *
     * @returns {undefined|any}
     */
    /**
    *
    * @param value
    */
    httpsPort: string | number;
    /**
     *
     * @returns {string}
     */
    /**
    *
    * @param value
    */
    uploadDir: string;
    /**
     *
     * @returns {Map<string, any>}
     */
    /**
    *
    * @param value
    */
    env: Env;
    /**
     *
     * @returns {undefined|any}
     */
    /**
    *
    * @param value
    */
    mount: IServerMountDirectories;
    /**
     *
     * @returns {undefined|any}
     */
    /**
    *
    * @param value
    */
    componentsScan: string[];
    /**
     *
     * @returns {undefined|any}
     */
    /**
    *
    * @param value
    */
    statics: IServerMountDirectories;
    /**
     *
     * @param value
     */
    /* istanbul ignore next */
    serveStatics: IServerMountDirectories;
    /**
     *
     * @returns {undefined|any}
     */
    /**
    *
    * @param value
    */
    acceptMimes: string[];
    /**
     *
     * @returns {boolean}
     */
    /**
    *
    * @param {boolean} debug
    */
    debug: boolean;
    /**
     *
     * @returns {IRouterSettings}
     */
    /**
    *
    * @param {IRouterSettings} options
    */
    routers: IRouterSettings;
    /**
     *
     * @returns {boolean}
     */
    /**
    *
    * @param {boolean} value
    */
    validationModelStrict: boolean;
    logger: Partial<ILoggerSettings>;
    exclude: string[];
    controllerScope: ProviderScope;
    /**
     *
     * @returns {IRouterSettings}
     */
    /**
    *
    * @param {IRouterSettings} options
    */
    errors: IErrorsSettings;
    /**
     *
     * @param target
     * @returns {any}
     */
    static getMetadata(target: any): any;
    /**
     *
     * @param addressPort
     * @returns {{address: string, port: number}}
     */
    private static buildAddressAndPort;
    /**
     *
     * @param callbackfn
     * @param thisArg
     */
    forEach(callbackfn: (value: any, index: string, map: Map<string, any>) => void, thisArg?: any): void;
    /**
     *
     * @param propertyKey
     * @param value
     */
    set(propertyKey: string | IServerSettings, value?: any): this;
    /**
     *
     * @param propertyKey
     * @returns {undefined|any}
     */
    get<T>(propertyKey: string): T;
    /**
     *
     * @param value
     * @returns {any}
     */
    resolve(value: any): any;
    /**
     *
     * @returns {string|number}
     */
    getHttpPort(): {
        address: string;
        port: number;
    };
    /**
     *
     * @param settings
     */
    setHttpPort(settings: {
        address: string;
        port: number;
    }): void;
    /**
     *
     * @returns {string|number}
     */
    getHttpsPort(): {
        address: string;
        port: number;
    };
    /**
     *
     * @param settings
     */
    setHttpsPort(settings: {
        address: string;
        port: number;
    }): void;
}
