{"version":3,"sources":["mvc/class/ControllerBuilder.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,UAAU,CAAC;AACzC,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,kBAAkB,EAAC,MAAM,6BAA6B,CAAC;AAO/D,qBAAa,iBAAiB;IAChB,OAAO,CAAC,QAAQ;gBAAR,QAAQ,EAAE,kBAAkB;IAEhD;;;OAGG;IACI,KAAK,CAAC,QAAQ,EAAE,eAAe,GAAG,OAAO,CAAC,MAAM;IAmBvD,OAAO,CAAC,cAAc;IA4BtB,OAAO,CAAC,aAAa;IAiCrB,OAAO,CAAC,kBAAkB;IAiB1B,OAAO,CAAC,gBAAgB;CAWzB","file":"ControllerBuilder.d.ts","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {bindEndpointMiddleware} from \"../components/bindEndpointMiddleware\";\nimport {SendResponseMiddleware} from \"../components/SendResponseMiddleware\";\nimport {IPathMethod} from \"../interfaces/IPathMethod\";\nimport {HandlerBuilder} from \"./HandlerBuilder\";\n\nexport class ControllerBuilder {\n  constructor(private provider: ControllerProvider) {}\n\n  /**\n   *\n   * @returns {any}\n   */\n  public build(injector: InjectorService): Express.Router {\n    const {\n      routerOptions,\n      middlewares: {useBefore, useAfter}\n    } = this.provider;\n\n    // TODO Use injector create new router instance\n    const defaultRoutersOptions = injector.settings.routers;\n    this.provider.router = Express.Router(Object.assign({}, defaultRoutersOptions, routerOptions));\n\n    // Controller lifecycle\n    this.buildMiddlewares(injector, useBefore) // Controller before-middleware\n      .buildEndpoints(injector) // All endpoints and his middlewares\n      .buildMiddlewares(injector, useAfter) // Controller after-middleware\n      .buildChildrenCtrls(injector); // Children controllers\n\n    return this.provider.router;\n  }\n\n  private buildEndpoints(injector: InjectorService) {\n    const {endpoints} = this.provider;\n    const pathsMethodsMap: Map<string, IPathMethod> = new Map();\n\n    endpoints.forEach(({pathsMethods}) => {\n      pathsMethods.forEach(pathMethod => {\n        pathMethod.method = pathMethod.method || \"use\";\n\n        if (pathMethod.method !== \"use\") {\n          const key = pathMethod.method + \"-\" + pathMethod.path;\n\n          if (pathsMethodsMap.has(key)) {\n            pathsMethodsMap.get(key)!.isFinal = false;\n          }\n\n          pathMethod.isFinal = true;\n          pathsMethodsMap.set(key, pathMethod);\n        }\n      });\n    });\n\n    endpoints.forEach(endpoint => {\n      this.buildEndpoint(injector, endpoint);\n    });\n\n    return this;\n  }\n\n  private buildEndpoint(injector: InjectorService, endpoint: EndpointMetadata) {\n    const {beforeMiddlewares, middlewares: mldwrs, afterMiddlewares, pathsMethods} = endpoint;\n    const {\n      router,\n      middlewares: {use}\n    } = this.provider;\n    // Endpoint lifecycle\n    let handlers: any[] = [];\n\n    handlers = handlers\n      .concat(bindEndpointMiddleware(endpoint))\n      .concat(use) // Controller use-middlewares\n      .concat(beforeMiddlewares) // Endpoint before-middlewares\n      .concat(mldwrs) // Endpoint middlewares\n      .concat(endpoint) // Endpoint handler\n      .concat(afterMiddlewares) // Endpoint after-middlewares\n      .filter((item: any) => !!item)\n      .map((middleware: any) => HandlerBuilder.from(middleware).build(injector));\n\n    const sendResponse = HandlerBuilder.from(SendResponseMiddleware).build(injector);\n\n    // Add handlers to the router\n    pathsMethods.forEach(({path, method, isFinal}) => {\n      const localHandlers = isFinal ? handlers.concat(sendResponse) : handlers;\n\n      router[method!](path, ...localHandlers);\n    });\n\n    if (!pathsMethods.length) {\n      router.use(...handlers);\n    }\n  }\n\n  private buildChildrenCtrls(injector: InjectorService) {\n    const {children, router} = this.provider;\n\n    children.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      new ControllerBuilder(provider).build(injector);\n\n      router.use(provider.path, provider.router);\n    });\n  }\n\n  private buildMiddlewares(injector: InjectorService, middlewares: any[]) {\n    const {router} = this.provider;\n\n    middlewares\n      .filter(o => typeof o === \"function\")\n      .forEach((middleware: any) => {\n        router.use(HandlerBuilder.from(middleware).build(injector));\n      });\n\n    return this;\n  }\n}\n"],"sourceRoot":"../../../src"}