{"version":3,"sources":["mvc/class/ControllerBuilder.ts"],"names":[],"mappings":"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","file":"ControllerBuilder.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {bindEndpointMiddleware} from \"../components/bindEndpointMiddleware\";\nimport {SendResponseMiddleware} from \"../components/SendResponseMiddleware\";\nimport {IPathMethod} from \"../interfaces/IPathMethod\";\nimport {HandlerBuilder} from \"./HandlerBuilder\";\n\nexport class ControllerBuilder {\n  constructor(private provider: ControllerProvider) {}\n\n  /**\n   *\n   * @returns {any}\n   */\n  public build(injector: InjectorService): Express.Router {\n    const {\n      routerOptions,\n      middlewares: {useBefore, useAfter}\n    } = this.provider;\n\n    // TODO Use injector create new router instance\n    const defaultRoutersOptions = injector.settings.routers;\n    this.provider.router = Express.Router(Object.assign({}, defaultRoutersOptions, routerOptions));\n\n    // Controller lifecycle\n    this.buildMiddlewares(injector, useBefore) // Controller before-middleware\n      .buildEndpoints(injector) // All endpoints and his middlewares\n      .buildMiddlewares(injector, useAfter) // Controller after-middleware\n      .buildChildrenCtrls(injector); // Children controllers\n\n    return this.provider.router;\n  }\n\n  private buildEndpoints(injector: InjectorService) {\n    const {endpoints} = this.provider;\n    const pathsMethodsMap: Map<string, IPathMethod> = new Map();\n\n    endpoints.forEach(({pathsMethods}) => {\n      pathsMethods.forEach(pathMethod => {\n        pathMethod.method = pathMethod.method || \"use\";\n\n        if (pathMethod.method !== \"use\") {\n          const key = pathMethod.method + \"-\" + pathMethod.path;\n\n          if (pathsMethodsMap.has(key)) {\n            pathsMethodsMap.get(key)!.isFinal = false;\n          }\n\n          pathMethod.isFinal = true;\n          pathsMethodsMap.set(key, pathMethod);\n        }\n      });\n    });\n\n    endpoints.forEach(endpoint => {\n      this.buildEndpoint(injector, endpoint);\n    });\n\n    return this;\n  }\n\n  private buildEndpoint(injector: InjectorService, endpoint: EndpointMetadata) {\n    const {beforeMiddlewares, middlewares: mldwrs, afterMiddlewares, pathsMethods} = endpoint;\n    const {\n      router,\n      middlewares: {use}\n    } = this.provider;\n    // Endpoint lifecycle\n    let handlers: any[] = [];\n\n    handlers = handlers\n      .concat(bindEndpointMiddleware(endpoint))\n      .concat(use) // Controller use-middlewares\n      .concat(beforeMiddlewares) // Endpoint before-middlewares\n      .concat(mldwrs) // Endpoint middlewares\n      .concat(endpoint) // Endpoint handler\n      .concat(afterMiddlewares) // Endpoint after-middlewares\n      .filter((item: any) => !!item)\n      .map((middleware: any) => HandlerBuilder.from(middleware).build(injector));\n\n    const sendResponse = HandlerBuilder.from(SendResponseMiddleware).build(injector);\n\n    // Add handlers to the router\n    pathsMethods.forEach(({path, method, isFinal}) => {\n      const localHandlers = isFinal ? handlers.concat(sendResponse) : handlers;\n\n      router[method!](path, ...localHandlers);\n    });\n\n    if (!pathsMethods.length) {\n      router.use(...handlers);\n    }\n  }\n\n  private buildChildrenCtrls(injector: InjectorService) {\n    const {children, router} = this.provider;\n\n    children.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      new ControllerBuilder(provider).build(injector);\n\n      router.use(provider.path, provider.router);\n    });\n  }\n\n  private buildMiddlewares(injector: InjectorService, middlewares: any[]) {\n    const {router} = this.provider;\n\n    middlewares\n      .filter(o => typeof o === \"function\")\n      .forEach((middleware: any) => {\n        router.use(HandlerBuilder.from(middleware).build(injector));\n      });\n\n    return this;\n  }\n}\n"],"sourceRoot":"../../../src"}