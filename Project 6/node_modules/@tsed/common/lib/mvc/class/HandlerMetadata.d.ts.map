{"version":3,"sources":["mvc/class/HandlerMetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,IAAI,EAAC,MAAM,YAAY,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,mCAAmC,CAAC;AAGhE,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AAEtD,MAAM,WAAW,eAAe;IAC9B,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;IAC7B,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,IAAI,CAAC,EAAE,WAAW,CAAC;CACpB;AAED,qBAAa,eAAe;IAC1B,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC;IACrB,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,QAAQ,CAAC,eAAe,EAAE,MAAM,CAAC;IACjC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;IACxB,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAS;IACrC,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAwB;IAClD,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAS;IACxC,QAAQ,CAAC,eAAe,EAAE,OAAO,CAAS;IAC1C,OAAO,EAAE,GAAG,CAAC;gBAED,OAAO,EAAE,eAAe;aAsBhC,QAAQ,EAAI,aAAa,EAAE;IAkBxB,SAAS;IAIT,YAAY,CAAC,SAAS,EAAE,GAAG,GAAG,OAAO;CAG7C","file":"HandlerMetadata.d.ts","sourcesContent":["import {Metadata, Type} from \"@tsed/core\";\nimport {ParamMetadata} from \"../../filters/class/ParamMetadata\";\nimport {ENDPOINT_INFO, EXPRESS_ERR, EXPRESS_NEXT_FN, EXPRESS_REQUEST, EXPRESS_RESPONSE, PARAM_METADATA} from \"../../filters/constants\";\nimport {ParamRegistry} from \"../../filters/registries/ParamRegistry\";\nimport {HandlerType} from \"../interfaces/HandlerType\";\n\nexport interface IHandlerOptions {\n  target: Type<any> | Function;\n  token?: Type<any>;\n  method?: string;\n  type?: HandlerType;\n}\n\nexport class HandlerMetadata {\n  readonly target: any;\n  readonly token: Type<any>;\n  readonly methodClassName: string;\n  readonly method: string;\n  readonly injectable: boolean = false;\n  readonly type: HandlerType = HandlerType.FUNCTION;\n  readonly hasErrorParam: boolean = false;\n  readonly hasNextFunction: boolean = false;\n  handler: any;\n\n  constructor(options: IHandlerOptions) {\n    const {target, token, method, type = HandlerType.FUNCTION} = options;\n\n    this.type = type;\n    this.handler = method ? target.prototype[method] : target;\n\n    if (method) {\n      this.target = target;\n      this.token = token!;\n      this.methodClassName = method;\n      this.method = method;\n      this.hasNextFunction = this.hasParamType(EXPRESS_NEXT_FN);\n      this.hasErrorParam = this.hasParamType(EXPRESS_ERR);\n      this.injectable = (Metadata.get(PARAM_METADATA, target, method) || []).length > 0;\n    }\n\n    if (!this.injectable) {\n      this.hasErrorParam = this.handler.length === 4;\n      this.hasNextFunction = this.handler.length >= 3;\n    }\n  }\n\n  get services(): ParamMetadata[] {\n    if (this.injectable) {\n      return this.getParams();\n    }\n\n    const parameters: any[] = [{service: EXPRESS_REQUEST}, {service: EXPRESS_RESPONSE}];\n\n    if (this.hasErrorParam) {\n      parameters.unshift({service: EXPRESS_ERR});\n    }\n\n    if (this.hasNextFunction) {\n      parameters.push({service: EXPRESS_NEXT_FN});\n    }\n\n    return parameters;\n  }\n\n  public getParams() {\n    return ParamRegistry.getParams(this.target, this.methodClassName) || [];\n  }\n\n  public hasParamType(paramType: any): boolean {\n    return this.getParams().findIndex(p => p.service === paramType) > -1;\n  }\n}\n"],"sourceRoot":"../../../src"}