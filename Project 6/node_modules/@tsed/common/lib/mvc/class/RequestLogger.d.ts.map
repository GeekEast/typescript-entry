{"version":3,"sources":["mvc/class/RequestLogger.ts"],"names":[],"mappings":"AAAA,qBAAa,aAAa;IASZ,OAAO,CAAC,MAAM;IAR1B,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IACpB,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC;IACrB,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC;IACzB,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAQ;IAC1C,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAW;IAChD,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAW;IACjD,OAAO,CAAC,KAAK,CAAW;gBAEJ,MAAM,EAAE,GAAG,EAAE,EAAC,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,qBAAqB,EAAC,EAAE,GAAG;IAY1H,IAAI,CAAC,GAAG,EAAE,GAAG;IAOb,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,GAAE,OAAc;IAQ3C,IAAI,CAAC,GAAG,EAAE,GAAG;IAOb,KAAK,CAAC,GAAG,EAAE,GAAG;IAOd,KAAK,CAAC,GAAG,EAAE,GAAG;IAOP,KAAK;IAQZ;;;OAGG;IACH,SAAS,CAAC,WAAW,IAAI,MAAM;IAI/B,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG;IAQ1B,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ;CAK3B","file":"RequestLogger.d.ts","sourcesContent":["export class RequestLogger {\n  readonly id: string;\n  readonly url: string;\n  readonly startDate: Date;\n  private readonly ignoreUrlPatterns: any[];\n  private readonly minimalRequestPicker: Function;\n  private readonly completeRequestPicker: Function;\n  private stack: any = [];\n\n  constructor(private logger: any, {id, startDate, url, ignoreUrlPatterns, minimalRequestPicker, completeRequestPicker}: any) {\n    this.id = id;\n    this.url = url;\n    this.startDate = startDate;\n    this.ignoreUrlPatterns = ignoreUrlPatterns.map((pattern: string | RegExp) =>\n      typeof pattern === \"string\" ? new RegExp(pattern, \"gi\") : pattern\n    );\n\n    this.minimalRequestPicker = minimalRequestPicker;\n    this.completeRequestPicker = completeRequestPicker;\n  }\n\n  info(obj: any) {\n    this.run(() => {\n      const data = this.minimalRequestPicker(this.getData(obj));\n      this.stack.push({level: \"info\", data});\n    });\n  }\n\n  debug(obj: any, withRequest: boolean = true) {\n    this.run(() => {\n      obj = this.getData(obj);\n      const data = withRequest ? this.completeRequestPicker(obj) : obj;\n      this.stack.push({level: \"debug\", data});\n    });\n  }\n\n  warn(obj: any) {\n    this.run(() => {\n      const data = this.completeRequestPicker(this.getData(obj));\n      this.stack.push({level: \"warn\", data});\n    });\n  }\n\n  error(obj: any) {\n    this.run(() => {\n      const data = this.completeRequestPicker(this.getData(obj));\n      this.stack.push({level: \"error\", data});\n    });\n  }\n\n  trace(obj: any) {\n    this.run(() => {\n      const data = this.completeRequestPicker(this.getData(obj));\n      this.stack.push({level: \"trace\", data});\n    });\n  }\n\n  public flush() {\n    if (this.stack) {\n      this.stack.forEach(({level, data}: any) => {\n        this.logger[level](data);\n      });\n    }\n  }\n\n  /**\n   * Return the duration between the time when LogIncomingRequest has handle the request and now.\n   * @returns {number}\n   */\n  protected getDuration(): number {\n    return new Date().getTime() - this.startDate.getTime();\n  }\n\n  protected getData(obj: any) {\n    if (typeof obj === \"string\") {\n      obj = {message: obj};\n    }\n\n    return {reqId: this.id, time: new Date(), duration: this.getDuration(), ...obj};\n  }\n\n  protected run(cb: Function) {\n    const match = this.ignoreUrlPatterns.find(reg => !!this.url.match(reg));\n\n    return !match && cb();\n  }\n}\n"],"sourceRoot":"../../../src"}