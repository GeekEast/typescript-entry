{"version":3,"sources":["mvc/class/ControllerProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAA4B,IAAI,EAAC,MAAM,YAAY,CAAC;AAC3D,OAAO,EAAC,QAAQ,EAAe,MAAM,UAAU,CAAC;AAChD,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,eAAe,EAAC,MAAM,yCAAyC,CAAC;AAExE,OAAO,EAAC,sBAAsB,EAAE,mBAAmB,EAAC,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAC,gBAAgB,EAAC,MAAM,oBAAoB,CAAC;AAEpD,MAAM,WAAW,mBAAoB,SAAQ,IAAI,CAAC,GAAG,CAAC;IACpD,WAAW,CAAC,EAAE,kBAAkB,CAAC;CAClC;AAED,qBAAa,kBAAmB,SAAQ,QAAQ,CAAC,GAAG,CAAE,YAAW,mBAAmB;IAE3E,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG;QAAC,CAAC,KAAK,EAAE,MAAM,GAAG,GAAG,CAAA;KAAC,CAAC;IACvD;;OAEG;IAEI,IAAI,EAAE,MAAM,CAAC;IACpB;;;;OAIG;IAEH,OAAO,CAAC,SAAS,CAA6B;gBAElC,OAAO,EAAE,GAAG;IAKxB;;;OAGG;aACC,SAAS,EAAI,gBAAgB,EAAE;IAInC;;;OAGG;;;;;IACC,QAAQ,EAAI,mBAAmB,EAAE;IAcrC;;;OAGG;;;;;IACC,aAAa,EAAI,eAAe;IAYpC;;;OAGG;aACC,MAAM;IAIV;;;OAGG;;;;;IACC,WAAW,EAAI,sBAAsB;IAyBzC;;OAEG;IACI,cAAc,CAAC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM;IAIlD;;OAEG;IACI,cAAc;IAIrB;;;OAGG;IACI,WAAW,IAAI,OAAO;IAI7B;;;OAGG;IACI,SAAS,IAAI,OAAO;CAG5B","file":"ControllerProvider.d.ts","sourcesContent":["import {Enumerable, NotEnumerable, Type} from \"@tsed/core\";\nimport {Provider, ProviderType} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {IRouterSettings} from \"../../config/interfaces/IServerSettings\";\n\nimport {IControllerMiddlewares, IControllerProvider} from \"../interfaces\";\nimport {EndpointRegistry} from \"../registries/EndpointRegistry\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\n\nexport interface IChildrenController extends Type<any> {\n  $parentCtrl?: ControllerProvider;\n}\n\nexport class ControllerProvider extends Provider<any> implements IControllerProvider {\n  @NotEnumerable()\n  public router: Express.Router & {[index: string]: any};\n  /**\n   * The path for the controller\n   */\n  @Enumerable()\n  public path: string;\n  /**\n   * Controllers that depend to this controller.\n   * @type {Array}\n   * @private\n   */\n  @NotEnumerable()\n  private _children: IChildrenController[] = [];\n\n  constructor(provide: any) {\n    super(provide);\n    this.type = ProviderType.CONTROLLER;\n  }\n\n  /**\n   *\n   * @returns {Endpoint[]}\n   */\n  get endpoints(): EndpointMetadata[] {\n    return EndpointRegistry.getEndpoints(this.provide);\n  }\n\n  /**\n   *\n   * @returns {Type<any>[]}\n   */\n  get children(): IChildrenController[] {\n    return this._children;\n  }\n\n  /**\n   *\n   * @param children\n   */\n  @Enumerable()\n  set children(children: IChildrenController[]) {\n    this._children = children;\n    this._children.forEach(d => (d.$parentCtrl = this));\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get routerOptions(): IRouterSettings {\n    return this.store.get(\"routerOptions\");\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set routerOptions(value: IRouterSettings) {\n    this.store.set(\"routerOptions\", value);\n  }\n\n  /**\n   *\n   * @returns {ControllerProvider}\n   */\n  get parent() {\n    return this.provide.$parentCtrl;\n  }\n\n  /**\n   *\n   * @returns {any[]}\n   */\n  get middlewares(): IControllerMiddlewares {\n    return Object.assign(\n      {\n        use: [],\n        useAfter: [],\n        useBefore: []\n      },\n      this.store.get(\"middlewares\") || {}\n    );\n  }\n\n  /**\n   *\n   * @param middlewares\n   */\n  set middlewares(middlewares: IControllerMiddlewares) {\n    const mdlwrs = this.middlewares;\n    const concat = (key: string, a: any, b: any) => (a[key] = a[key].concat(b[key]));\n\n    Object.keys(middlewares).forEach((key: string) => {\n      concat(key, mdlwrs, middlewares);\n    });\n    this.store.set(\"middlewares\", mdlwrs);\n  }\n\n  /**\n   * Resolve final endpoint url.\n   */\n  public getEndpointUrl(routerPath?: string): string {\n    return (routerPath === this.path ? this.path : (routerPath || \"\") + this.path).replace(/\\/\\//gi, \"/\");\n  }\n\n  /**\n   *\n   */\n  public hasEndpointUrl() {\n    return !!this.path;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasChildren(): boolean {\n    return !!this.children.length;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasParent(): boolean {\n    return !!this.provide.$parentCtrl;\n  }\n}\n"],"sourceRoot":"../../../src"}