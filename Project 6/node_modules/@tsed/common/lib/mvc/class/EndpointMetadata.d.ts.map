{"version":3,"sources":["mvc/class/EndpointMetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AAGvH,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAC,cAAc,EAAC,MAAM,8BAA8B,CAAC;AAE5D;;;;;;;;;;;;;;;GAeG;AACH,qBAAa,gBAAiB,SAAQ,QAAQ;IAeX,OAAO,CAAC,gBAAgB;IAblD,iBAAiB,EAAE,GAAG,EAAE,CAAM;IAC9B,WAAW,EAAE,GAAG,EAAE,CAAM;IACxB,gBAAgB,EAAE,GAAG,EAAE,CAAM;IACpC;;OAEG;IACI,YAAY,EAAE,WAAW,EAAE,CAAM;IACxC;;OAEG;IAEH,OAAO,CAAC,iBAAiB,CAAmB;gBAEhC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,EAAU,gBAAgB,EAAE,MAAM,GAAG,MAAM;IAM1E;;;;OAIG;;;;;;IACC,UAAU,EAAI,MAAM;IAiBxB;;;;OAIG;;;;;;IACC,IAAI,EAAI,cAAc;IAgBtB,IAAI,EAAI,IAAI,CAAC,GAAG,CAAC;IAQrB;;OAEG;aACC,eAAe,EAAI,MAAM;IAI7B;;;OAGG;aACC,KAAK,EAAI,KAAK;aAId,UAAU;aAIV,MAAM;IAIV;;;;;OAKG;IACH,GAAG,CAAC,GAAG,EAAE,GAAG;IAWZ;;;OAGG;IACI,cAAc,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,GAAG;QAAC,WAAW,EAAE,MAAM,CAAC;QAAC,OAAO,EAAE,GAAG,CAAC;QAAC,QAAQ,EAAE,GAAG,CAAA;KAAC;IAuChG;;;;OAIG;IACI,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI;IAMhC;;;;OAIG;IACI,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI;IAM/B;;;OAGG;IACI,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI;IA4B/B;;;OAGG;IACI,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,gBAAgB;CAapD","file":"EndpointMetadata.d.ts","sourcesContent":["import {deepExtends, isArrayOrArrayClass, isPromise, Metadata, NotEnumerable, Storable, Store, Type} from \"@tsed/core\";\nimport {ParamRegistry} from \"../../filters/registries/ParamRegistry\";\nimport {EXPRESS_METHODS} from \"../constants\";\nimport {IPathMethod} from \"../interfaces/IPathMethod\";\nimport {PathParamsType} from \"../interfaces/PathParamsType\";\n\n/**\n * EndpointMetadata contains metadata about a controller and his method.\n * Each annotation (@Get, @Body...) attached to a method are stored in a endpoint.\n * EndpointMetadata convert this metadata to an array which contain arguments to call an Express method.\n *\n * Example :\n *\n *    @Controller(\"/my-path\")\n *    provide MyClass {\n *\n *        @Get(\"/\")\n *        @Authenticated()\n *        public myMethod(){}\n *    }\n *\n */\nexport class EndpointMetadata extends Storable {\n  // LIFECYCLE\n  public beforeMiddlewares: any[] = [];\n  public middlewares: any[] = [];\n  public afterMiddlewares: any[] = [];\n  /**\n   * Route strategy.\n   */\n  public pathsMethods: IPathMethod[] = [];\n  /**\n   * Endpoint inherited from parent class.\n   */\n  @NotEnumerable()\n  private inheritedEndpoint: EndpointMetadata;\n\n  constructor(_provide: Type<any>, private _methodClassName: string | symbol) {\n    super(_provide, _methodClassName, Object.getOwnPropertyDescriptor(_provide, _methodClassName));\n\n    this._type = Metadata.getReturnType(this._target, this.methodClassName);\n  }\n\n  /**\n   *\n   * @deprecated pathsMethods\n   * @returns {string}\n   */\n  get httpMethod(): string {\n    return this.pathsMethods[0] && this.pathsMethods[0].method!;\n  }\n\n  /**\n   *\n   * @deprecated\n   * @param value\n   */\n  set httpMethod(value: string) {\n    if (!this.pathsMethods[0]) {\n      this.pathsMethods[0] = {} as any;\n    }\n\n    this.pathsMethods[0].method = value;\n  }\n\n  /**\n   *\n   * @deprecated use pathsMethods instead of.\n   * @returns {PathParamsType}\n   */\n  get path(): PathParamsType {\n    return this.pathsMethods[0] && this.pathsMethods[0].path!;\n  }\n\n  /**\n   *\n   * @deprecated\n   * @param value\n   */\n  set path(value: PathParamsType) {\n    if (!this.pathsMethods[0]) {\n      this.pathsMethods[0] = {} as any;\n    }\n    this.pathsMethods[0].path = value;\n  }\n\n  get type(): Type<any> {\n    return isPromise(this._type) || isArrayOrArrayClass(this._type) || this._type === Object ? undefined! : this._type;\n  }\n\n  set type(type: Type<any>) {\n    this._type = type;\n  }\n\n  /**\n   *\n   */\n  get methodClassName(): string {\n    return String(this._methodClassName);\n  }\n\n  /**\n   *\n   * @returns {Store}\n   */\n  get store(): Store {\n    return this.inheritedEndpoint ? this.inheritedEndpoint.store : this._store;\n  }\n\n  get statusCode() {\n    return this.store.get(\"statusCode\") || 200;\n  }\n\n  get params() {\n    return ParamRegistry.getParams(this.target, this.methodClassName);\n  }\n\n  /**\n   * Find the a value at the controller level. Let this value be extended or overridden by the endpoint itself.\n   *\n   * @param key\n   * @returns {any}\n   */\n  get(key: any) {\n    const ctrlValue = Store.from(this.target).get(key);\n    let meta = deepExtends(undefined, ctrlValue);\n    const endpointValue = this.store.get(key);\n    if (endpointValue !== undefined) {\n      meta = deepExtends(meta, endpointValue);\n    }\n\n    return meta;\n  }\n\n  /**\n   * Change the type and the collection type from the status code.\n   * @param {string | number} code\n   */\n  public statusResponse(code: string | number): {description: string; headers: any; examples: any} {\n    const get = (code: number | string) => (this.get(\"responses\") || {})[code] || {};\n    let {description, headers, examples} = get(code);\n\n    if (code) {\n      const {type, collectionType} = get(code);\n      this.type = type;\n      this.collectionType = collectionType;\n    }\n\n    const expectedStatus = this.statusCode;\n\n    if (+code === +expectedStatus) {\n      const response = this.store.get(\"response\");\n\n      if (response) {\n        headers = response.headers || headers;\n        examples = response.examples || examples;\n        description = response.description || description;\n\n        this.type = response.type || this.type;\n        this.collectionType = response.collectionType || this.collectionType;\n      }\n    }\n\n    if (headers) {\n      headers = deepExtends({}, headers);\n      Object.keys(headers).forEach(key => {\n        delete headers[key].value;\n      });\n    }\n\n    return {\n      headers,\n      examples,\n      description\n    };\n  }\n\n  /**\n   *\n   * @param args\n   * @returns {EndpointMetadata}\n   */\n  public before(args: any[]): this {\n    this.beforeMiddlewares = this.beforeMiddlewares.concat(args);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param args\n   * @returns {EndpointMetadata}\n   */\n  public after(args: any[]): this {\n    this.afterMiddlewares = this.afterMiddlewares.concat(args);\n\n    return this;\n  }\n\n  /**\n   * Store all arguments collected via Annotation.\n   * @param args\n   */\n  public merge(args: any[]): this {\n    const expressMethods: any = {};\n\n    const filteredArg = args.filter((arg: any) => {\n      if (typeof arg === \"string\" && EXPRESS_METHODS.indexOf(arg) > -1) {\n        expressMethods.method = arg;\n\n        return false;\n      }\n\n      if (typeof arg === \"string\" || arg instanceof RegExp) {\n        expressMethods.path = arg;\n\n        return false;\n      }\n\n      return !!arg;\n    });\n\n    if (expressMethods.method || expressMethods.path) {\n      this.pathsMethods.push(expressMethods);\n    }\n\n    this.middlewares = this.middlewares.concat(filteredArg);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   */\n  public inherit(target: Type<any>): EndpointMetadata {\n    const metadata = new EndpointMetadata(target, this.methodClassName);\n    metadata.inheritedEndpoint = this;\n    metadata.middlewares = this.middlewares;\n    metadata.afterMiddlewares = this.afterMiddlewares;\n    metadata.beforeMiddlewares = this.beforeMiddlewares;\n    metadata.pathsMethods = metadata.pathsMethods;\n    metadata.httpMethod = this.httpMethod;\n    metadata.path = this.path;\n    metadata.type = this._type;\n\n    return metadata;\n  }\n}\n"],"sourceRoot":"../../../src"}