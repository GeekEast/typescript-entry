{"version":3,"sources":["mvc/utils/mapHeaders.ts"],"names":[],"mappings":";;AAGA,SAAgB,UAAU,CAAC,OAAwB;IACjD,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAmB,CAAC,UAA4B,EAAE,GAAW,EAAE,KAAa,EAAE,KAAe,EAAE,EAAE;QACjI,MAAM,KAAK,GAAQ,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;QACxB,IAAI,OAAO,GAAoB,EAAC,KAAK,EAAC,CAAC;QAEvC,IAAI,IAAI,KAAK,QAAQ,EAAE;YACrB,OAAO,GAAG,KAAK,CAAC;YAChB,IAAI,GAAG,OAAO,OAAO,CAAC,KAAK,CAAC;SAC7B;QAED,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;QAEpC,UAAU,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;QAE1B,OAAO,UAAU,CAAC;IACpB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAjBD,gCAiBC","file":"mapHeaders.js","sourcesContent":["import {IResponseHeader} from \"../interfaces/IResponseHeader\";\nimport {IHeadersOptions, IResponseHeaders} from \"../interfaces/IResponseHeaders\";\n\nexport function mapHeaders(headers: IHeadersOptions): IResponseHeaders {\n  return Object.keys(headers).reduce<IResponseHeaders>((newHeaders: IResponseHeaders, key: string, index: number, array: string[]) => {\n    const value: any = headers[key];\n    let type = typeof value;\n    let options: IResponseHeader = {value};\n\n    if (type === \"object\") {\n      options = value;\n      type = typeof options.value;\n    }\n\n    options.type = options.type || type;\n\n    newHeaders[key] = options;\n\n    return newHeaders;\n  }, {});\n}\n"],"sourceRoot":"../../../src"}