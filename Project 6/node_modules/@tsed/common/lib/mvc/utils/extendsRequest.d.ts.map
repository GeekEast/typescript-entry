{"version":3,"sources":["mvc/utils/extendsRequest.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,wBAAgB,cAAc,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,EAAE,KAAK,CAAC,EAAE,QAAQ,GAAG,GAAG,QAQvE","file":"extendsRequest.d.ts","sourcesContent":["const express = require(\"express\");\n\n/**\n * @deprecated Will be removed\n * @param {string | any} obj\n * @param {Function} value\n */\nexport function extendsRequest(obj: string | any, value?: Function | any) {\n  if (typeof obj === \"object\") {\n    Object.keys(obj).forEach(key => {\n      extendsRequest(key, obj[key]);\n    });\n  } else {\n    Object.defineProperty(express.request, obj, typeof value === \"function\" ? {value} : value);\n  }\n}\n\nif (!express.request.setEndpoint) {\n  extendsRequest({\n    /**\n     * @deprecated Now context is initialised when request is received\n     */\n    // istanbul ignore next\n    createContainer() {},\n    /**\n     * @deprecated  Use request.ctx.container\n     */\n    // istanbul ignore next\n    getContainer() {\n      return this.ctx.container;\n    },\n    /**\n     * @deprecated Use request.ctx.enpoint\n     * @returns {any}\n     */\n    // istanbul ignore next\n    getEndpoint() {\n      return this.ctx.endpoint;\n    },\n    /**\n     * @deprecated Use request.ctx.data\n     * @param data\n     * @returns {storeData}\n     */\n    // istanbul ignore next\n    storeData(data: any) {\n      this.ctx.data = data;\n\n      return this;\n    },\n    /**\n     * @deprecated Use request.ctx.data\n     * @returns {any}\n     */\n    // istanbul ignore next\n    getStoredData() {\n      return this.ctx.data;\n    }\n  });\n}\n"],"sourceRoot":"../../../src"}