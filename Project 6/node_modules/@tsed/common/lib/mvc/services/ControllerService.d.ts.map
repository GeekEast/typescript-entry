{"version":3,"sources":["mvc/services/ControllerService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACtD,OAAO,EAAa,eAAe,EAA8B,MAAM,UAAU,CAAC;AAClF,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,qBAAqB,EAAC,MAAM,6CAA6C,CAAC;AAIlF,OAAO,EAAC,kBAAkB,EAAC,MAAM,6BAA6B,CAAC;AAE/D,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAE5C;;GAEG;AACH,qBAIa,iBAAkB,SAAQ,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,kBAAkB,CAAC;IAShF,OAAO,CAAC,eAAe;IACH,OAAO,CAAC,kBAAkB;IAC9C,OAAO,CAAC,QAAQ;IAChB,OAAO,CAAC,YAAY;IAXtB;;;;;;OAMG;gBAEO,eAAe,EAAE,eAAe,EACZ,kBAAkB,EAAE,OAAO,CAAC,WAAW,EAC3D,QAAQ,EAAE,qBAAqB,EAC/B,YAAY,EAAE,YAAY;aAOhC,MAAM,EAAI;QAAC,KAAK,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,GAAG,CAAA;KAAC,EAAE;IAI9C;;;;;OAKG;IAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,kBAAkB,GAAG,SAAS;IAI7D;;;;OAIG;IAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;IAI5B;;;;;OAKG;IAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB;IAM1D;;;OAGG;IACI,aAAa,CAAC,UAAU,EAAE;QAAC,IAAI,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAC;QAAC,OAAO,EAAE,GAAG,EAAE,CAAA;KAAC,EAAE;IAKnF;;;;;;;OAOG;IAEI,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,GAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAA6B,EAAE,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IAIzH;;OAEG;IACH,OAAO,CAAC,YAAY;IAQpB;;;OAGG;IACH,OAAO,CAAC,aAAa;IAcrB;;;;OAIG;IACH,OAAO,CAAC,WAAW;CAKpB","file":"ControllerService.d.ts","sourcesContent":["import {Deprecated, ProxyMap, Type} from \"@tsed/core\";\nimport {Injectable, InjectorService, ProviderScope, ProviderType} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {ServerSettingsService} from \"../../config/services/ServerSettingsService\";\nimport {ExpressApplication} from \"../../server/decorators/expressApplication\"; // TODO should be located on server package\nimport {IComponentScanned} from \"../../server/interfaces\"; // TODO should be located on server package\nimport {ControllerBuilder} from \"../class/ControllerBuilder\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {ControllerRegistry} from \"../registries/ControllerRegistry\";\nimport {RouteService} from \"./RouteService\";\n\n/**\n * @private\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class ControllerService extends ProxyMap<Type<any> | any, ControllerProvider> {\n  /**\n   *\n   * @param expressApplication\n   * @param injectorService\n   * @param settings\n   * @param routeService\n   */\n  constructor(\n    private injectorService: InjectorService,\n    @ExpressApplication private expressApplication: Express.Application,\n    private settings: ServerSettingsService,\n    private routeService: RouteService\n  ) {\n    super(injectorService as any, {filter: {type: ProviderType.CONTROLLER}});\n\n    this.buildRouters();\n  }\n\n  get routes(): {route: string; provider: any}[] {\n    return this.routeService.routes || [];\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {ControllerProvider}\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.get(). Removed feature.\")\n  static get(target: Type<any>): ControllerProvider | undefined {\n    return ControllerRegistry.get(target) as ControllerProvider;\n  }\n\n  /**\n   *\n   * @param target\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.has(). Removed feature.\")\n  static has(target: Type<any>) {\n    return ControllerRegistry.has(target);\n  }\n\n  /**\n   *\n   * @param target\n   * @param provider\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.set(). Removed feature.\")\n  static set(target: Type<any>, provider: ControllerProvider) {\n    ControllerRegistry.set(target, provider);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param components\n   */\n  public $onRoutesInit(components: {file: string; endpoint: string; classes: any[]}[]) {\n    this.injectorService.logger.info(\"Map controllers\");\n    this.mapComponents(components);\n  }\n\n  /**\n   * Invoke a controller from his Class.\n   * @param target\n   * @param locals\n   * @param designParamTypes\n   * @returns {T}\n   * @deprecated\n   */\n  @Deprecated(\"ControllerService.invoke(). Removed feature. Use injectorService.invoke instead of.\")\n  public invoke<T>(target: any, locals: Map<Type<any> | any, any> = new Map<Type<any>, any>(), designParamTypes?: any[]): T {\n    return this.injectorService.invoke<T>(target.provide || target, locals);\n  }\n\n  /**\n   * Build routers and con\n   */\n  private buildRouters() {\n    this.forEach((provider: ControllerProvider) => {\n      if (!provider.hasParent()) {\n        new ControllerBuilder(provider).build(this.injectorService);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param components\n   */\n  private mapComponents(components: IComponentScanned[]) {\n    components.forEach(component => {\n      Object.keys(component.classes)\n        .map(clazzName => component.classes[clazzName])\n        .filter(clazz => component.endpoint && this.has(clazz))\n        .map(clazz => this.get(clazz))\n        .forEach((provider: ControllerProvider) => {\n          if (!provider.hasParent()) {\n            this.mountRouter(component.endpoint!, provider);\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @param {string} endpoint\n   * @param {ControllerProvider} provider\n   */\n  private mountRouter(endpoint: string, provider: ControllerProvider) {\n    const route = provider.getEndpointUrl(endpoint!);\n    this.routeService.addRoute({provider, route});\n    this.expressApplication.use(route, provider.router);\n  }\n}\n"],"sourceRoot":"../../../src"}