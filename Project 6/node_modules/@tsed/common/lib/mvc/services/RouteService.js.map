{"version":3,"sources":["mvc/services/RouteService.ts"],"names":[],"mappings":"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","file":"RouteService.js","sourcesContent":["import {Constant, InjectorService, Service} from \"@tsed/di\";\nimport {$log} from \"ts-log-debug\";\nimport {colorize} from \"ts-log-debug/lib/layouts/utils/colorizeUtils\";\nimport {AfterRoutesInit} from \"../../server/interfaces/AfterRoutesInit\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {IControllerRoute} from \"../interfaces\";\n\n/**\n * `RouteService` is used to provide all routes collected by annotation `@Controller`.\n */\n@Service()\nexport class RouteService implements AfterRoutesInit {\n  /**\n   *\n   */\n  @Constant(\"logger.disableRoutesSummary\", false)\n  disableRoutesSummary: boolean;\n\n  private readonly _routes: {route: string; provider: any}[] = [];\n\n  constructor(private injector: InjectorService) {}\n\n  /**\n   *\n   * @returns {{route: string; provider: any}[]}\n   */\n  get routes(): {route: string; provider: any}[] {\n    return this._routes || [];\n  }\n\n  /**\n   *\n   */\n  $afterRoutesInit() {\n    if (!this.disableRoutesSummary) {\n      this.injector.logger.info(\"Routes mounted :\");\n      this.printRoutes();\n    }\n  }\n\n  /**\n   *\n   * @returns {number}\n   * @param route\n   */\n  addRoute(route: {route: string; provider: any}) {\n    return this._routes.push(route);\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {IControllerRoute[]}\n   */\n  getRoutes(): IControllerRoute[] {\n    const routes: IControllerRoute[] = [];\n\n    this.routes.forEach((config: {route: string; provider: ControllerProvider}) => {\n      this.buildRoutes(routes, config.provider, config.route);\n    });\n\n    return routes;\n  }\n\n  /**\n   * Print all route mounted in express via Annotation.\n   */\n  public printRoutes(): void {\n    const mapColor: {[key: string]: string} = {\n      GET: \"green\",\n      POST: \"yellow\",\n      PUT: \"blue\",\n      DELETE: \"red\",\n      PATCH: \"magenta\",\n      ALL: \"cyan\"\n    };\n\n    const routes = this.getRoutes().map(route => {\n      const method = route.method.toUpperCase();\n\n      route.method = {\n        length: method.length,\n        toString: () => {\n          return colorize(method, mapColor[method]);\n        }\n      } as any;\n\n      return route;\n    });\n\n    const str = $log.drawTable(routes, {\n      padding: 1,\n      header: {\n        method: \"Method\",\n        url: \"Endpoint\",\n        name: \"Class method\"\n      }\n    });\n\n    this.injector.logger.info(\"\\n\" + str.trim());\n  }\n\n  /**\n   * Return all Routes stored in ControllerProvider manager.\n   * @returns {IControllerRoute[]}\n   */\n  getAll(): IControllerRoute[] {\n    return this.getRoutes();\n  }\n\n  /**\n   *\n   * @param routes\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(routes: any[], ctrl: ControllerProvider, endpointUrl: string) {\n    ctrl.children\n      .map(ctrl => this.injector.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => this.buildRoutes(routes, provider, `${endpointUrl}${provider.path}`));\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      const {pathsMethods, params, targetName, methodClassName} = endpoint;\n\n      pathsMethods.forEach(({path, method}) => {\n        if (!!method) {\n          routes.push({\n            method,\n            name: `${targetName}.${String(methodClassName)}()`,\n            url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\"),\n            className: targetName,\n            methodClassName,\n            parameters: params\n          });\n        }\n      });\n    });\n  }\n}\n"],"sourceRoot":"../../../src"}