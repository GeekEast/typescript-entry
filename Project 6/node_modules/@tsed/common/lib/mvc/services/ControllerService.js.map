{"version":3,"sources":["mvc/services/ControllerService.ts"],"names":[],"mappings":"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","file":"ControllerService.js","sourcesContent":["import {Deprecated, ProxyMap, Type} from \"@tsed/core\";\nimport {Injectable, InjectorService, ProviderScope, ProviderType} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {ServerSettingsService} from \"../../config/services/ServerSettingsService\";\nimport {ExpressApplication} from \"../../server/decorators/expressApplication\"; // TODO should be located on server package\nimport {IComponentScanned} from \"../../server/interfaces\"; // TODO should be located on server package\nimport {ControllerBuilder} from \"../class/ControllerBuilder\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {ControllerRegistry} from \"../registries/ControllerRegistry\";\nimport {RouteService} from \"./RouteService\";\n\n/**\n * @private\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class ControllerService extends ProxyMap<Type<any> | any, ControllerProvider> {\n  /**\n   *\n   * @param expressApplication\n   * @param injectorService\n   * @param settings\n   * @param routeService\n   */\n  constructor(\n    private injectorService: InjectorService,\n    @ExpressApplication private expressApplication: Express.Application,\n    private settings: ServerSettingsService,\n    private routeService: RouteService\n  ) {\n    super(injectorService as any, {filter: {type: ProviderType.CONTROLLER}});\n\n    this.buildRouters();\n  }\n\n  get routes(): {route: string; provider: any}[] {\n    return this.routeService.routes || [];\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {ControllerProvider}\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.get(). Removed feature.\")\n  static get(target: Type<any>): ControllerProvider | undefined {\n    return ControllerRegistry.get(target) as ControllerProvider;\n  }\n\n  /**\n   *\n   * @param target\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.has(). Removed feature.\")\n  static has(target: Type<any>) {\n    return ControllerRegistry.has(target);\n  }\n\n  /**\n   *\n   * @param target\n   * @param provider\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.set(). Removed feature.\")\n  static set(target: Type<any>, provider: ControllerProvider) {\n    ControllerRegistry.set(target, provider);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param components\n   */\n  public $onRoutesInit(components: {file: string; endpoint: string; classes: any[]}[]) {\n    this.injectorService.logger.info(\"Map controllers\");\n    this.mapComponents(components);\n  }\n\n  /**\n   * Invoke a controller from his Class.\n   * @param target\n   * @param locals\n   * @param designParamTypes\n   * @returns {T}\n   * @deprecated\n   */\n  @Deprecated(\"ControllerService.invoke(). Removed feature. Use injectorService.invoke instead of.\")\n  public invoke<T>(target: any, locals: Map<Type<any> | any, any> = new Map<Type<any>, any>(), designParamTypes?: any[]): T {\n    return this.injectorService.invoke<T>(target.provide || target, locals);\n  }\n\n  /**\n   * Build routers and con\n   */\n  private buildRouters() {\n    this.forEach((provider: ControllerProvider) => {\n      if (!provider.hasParent()) {\n        new ControllerBuilder(provider).build(this.injectorService);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param components\n   */\n  private mapComponents(components: IComponentScanned[]) {\n    components.forEach(component => {\n      Object.keys(component.classes)\n        .map(clazzName => component.classes[clazzName])\n        .filter(clazz => component.endpoint && this.has(clazz))\n        .map(clazz => this.get(clazz))\n        .forEach((provider: ControllerProvider) => {\n          if (!provider.hasParent()) {\n            this.mountRouter(component.endpoint!, provider);\n          }\n        });\n    });\n  }\n\n  /**\n   *\n   * @param {string} endpoint\n   * @param {ControllerProvider} provider\n   */\n  private mountRouter(endpoint: string, provider: ControllerProvider) {\n    const route = provider.getEndpointUrl(endpoint!);\n    this.routeService.addRoute({provider, route});\n    this.expressApplication.use(route, provider.router);\n  }\n}\n"],"sourceRoot":"../../../src"}