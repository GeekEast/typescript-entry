import { ProxyMap, Type } from "@tsed/core";
import { InjectorService } from "@tsed/di";
import * as Express from "express";
import { ServerSettingsService } from "../../config/services/ServerSettingsService";
import { ControllerProvider } from "../class/ControllerProvider";
import { RouteService } from "./RouteService";
/**
 * @private
 */
export declare class ControllerService extends ProxyMap<Type<any> | any, ControllerProvider> {
    private injectorService;
    private expressApplication;
    private settings;
    private routeService;
    /**
     *
     * @param expressApplication
     * @param injectorService
     * @param settings
     * @param routeService
     */
    constructor(injectorService: InjectorService, expressApplication: Express.Application, settings: ServerSettingsService, routeService: RouteService);
    readonly routes: {
        route: string;
        provider: any;
    }[];
    /**
     *
     * @param target
     * @returns {ControllerProvider}
     * @deprecated
     */
    static get(target: Type<any>): ControllerProvider | undefined;
    /**
     *
     * @param target
     * @deprecated
     */
    static has(target: Type<any>): boolean;
    /**
     *
     * @param target
     * @param provider
     * @deprecated
     */
    static set(target: Type<any>, provider: ControllerProvider): typeof ControllerService;
    /**
     *
     * @param components
     */
    $onRoutesInit(components: {
        file: string;
        endpoint: string;
        classes: any[];
    }[]): void;
    /**
     * Invoke a controller from his Class.
     * @param target
     * @param locals
     * @param designParamTypes
     * @returns {T}
     * @deprecated
     */
    invoke<T>(target: any, locals?: Map<Type<any> | any, any>, designParamTypes?: any[]): T;
    /**
     * Build routers and con
     */
    private buildRouters;
    /**
     *
     * @param components
     */
    private mapComponents;
    /**
     *
     * @param {string} endpoint
     * @param {ControllerProvider} provider
     */
    private mountRouter;
}
