{"version":3,"sources":["mvc/services/RouteService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,eAAe,EAAU,MAAM,UAAU,CAAC;AAG5D,OAAO,EAAC,eAAe,EAAC,MAAM,yCAAyC,CAAC;AAGxE,OAAO,EAAC,gBAAgB,EAAC,MAAM,eAAe,CAAC;AAE/C;;GAEG;AACH,qBACa,YAAa,YAAW,eAAe;IAStC,OAAO,CAAC,QAAQ;IAR5B;;OAEG;IAEH,oBAAoB,EAAE,OAAO,CAAC;IAE9B,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAwC;gBAE5C,QAAQ,EAAE,eAAe;IAE7C;;;OAGG;aACC,MAAM,EAAI;QAAC,KAAK,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,GAAG,CAAA;KAAC,EAAE;IAI9C;;OAEG;IACH,gBAAgB;IAOhB;;;;OAIG;IACH,QAAQ,CAAC,KAAK,EAAE;QAAC,KAAK,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,GAAG,CAAA;KAAC;IAI9C;;;OAGG;IACH,SAAS,IAAI,gBAAgB,EAAE;IAU/B;;OAEG;IACI,WAAW,IAAI,IAAI;IAmC1B;;;OAGG;IACH,MAAM,IAAI,gBAAgB,EAAE;IAI5B;;;;;OAKG;IACH,OAAO,CAAC,WAAW;CAsBpB","file":"RouteService.d.ts","sourcesContent":["import {Constant, InjectorService, Service} from \"@tsed/di\";\nimport {$log} from \"ts-log-debug\";\nimport {colorize} from \"ts-log-debug/lib/layouts/utils/colorizeUtils\";\nimport {AfterRoutesInit} from \"../../server/interfaces/AfterRoutesInit\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {IControllerRoute} from \"../interfaces\";\n\n/**\n * `RouteService` is used to provide all routes collected by annotation `@Controller`.\n */\n@Service()\nexport class RouteService implements AfterRoutesInit {\n  /**\n   *\n   */\n  @Constant(\"logger.disableRoutesSummary\", false)\n  disableRoutesSummary: boolean;\n\n  private readonly _routes: {route: string; provider: any}[] = [];\n\n  constructor(private injector: InjectorService) {}\n\n  /**\n   *\n   * @returns {{route: string; provider: any}[]}\n   */\n  get routes(): {route: string; provider: any}[] {\n    return this._routes || [];\n  }\n\n  /**\n   *\n   */\n  $afterRoutesInit() {\n    if (!this.disableRoutesSummary) {\n      this.injector.logger.info(\"Routes mounted :\");\n      this.printRoutes();\n    }\n  }\n\n  /**\n   *\n   * @returns {number}\n   * @param route\n   */\n  addRoute(route: {route: string; provider: any}) {\n    return this._routes.push(route);\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {IControllerRoute[]}\n   */\n  getRoutes(): IControllerRoute[] {\n    const routes: IControllerRoute[] = [];\n\n    this.routes.forEach((config: {route: string; provider: ControllerProvider}) => {\n      this.buildRoutes(routes, config.provider, config.route);\n    });\n\n    return routes;\n  }\n\n  /**\n   * Print all route mounted in express via Annotation.\n   */\n  public printRoutes(): void {\n    const mapColor: {[key: string]: string} = {\n      GET: \"green\",\n      POST: \"yellow\",\n      PUT: \"blue\",\n      DELETE: \"red\",\n      PATCH: \"magenta\",\n      ALL: \"cyan\"\n    };\n\n    const routes = this.getRoutes().map(route => {\n      const method = route.method.toUpperCase();\n\n      route.method = {\n        length: method.length,\n        toString: () => {\n          return colorize(method, mapColor[method]);\n        }\n      } as any;\n\n      return route;\n    });\n\n    const str = $log.drawTable(routes, {\n      padding: 1,\n      header: {\n        method: \"Method\",\n        url: \"Endpoint\",\n        name: \"Class method\"\n      }\n    });\n\n    this.injector.logger.info(\"\\n\" + str.trim());\n  }\n\n  /**\n   * Return all Routes stored in ControllerProvider manager.\n   * @returns {IControllerRoute[]}\n   */\n  getAll(): IControllerRoute[] {\n    return this.getRoutes();\n  }\n\n  /**\n   *\n   * @param routes\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(routes: any[], ctrl: ControllerProvider, endpointUrl: string) {\n    ctrl.children\n      .map(ctrl => this.injector.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => this.buildRoutes(routes, provider, `${endpointUrl}${provider.path}`));\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      const {pathsMethods, params, targetName, methodClassName} = endpoint;\n\n      pathsMethods.forEach(({path, method}) => {\n        if (!!method) {\n          routes.push({\n            method,\n            name: `${targetName}.${String(methodClassName)}()`,\n            url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\"),\n            className: targetName,\n            methodClassName,\n            parameters: params\n          });\n        }\n      });\n    });\n  }\n}\n"],"sourceRoot":"../../../src"}