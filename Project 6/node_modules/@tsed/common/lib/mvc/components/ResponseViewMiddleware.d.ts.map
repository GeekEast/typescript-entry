{"version":3,"sources":["mvc/components/ResponseViewMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAE,GAAG,EAAe,MAAM,eAAe,CAAC;AAG9D,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAE1C;;;GAGG;AACH,qBACa,sBAAuB,YAAW,WAAW;IACjD,GAAG,CAAiB,IAAI,EAAE,GAAG,EAAkB,QAAQ,EAAE,YAAY,EAAS,QAAQ,EAAE,GAAG;CAsBnG","file":"ResponseViewMiddleware.d.ts","sourcesContent":["import {EndpointInfo, Res, ResponseData} from \"../../filters\";\nimport {Middleware} from \"../decorators/class/middleware\";\nimport {TemplateRenderingError} from \"../errors/TemplateRenderingError\";\nimport {IMiddleware} from \"../interfaces\";\n\n/**\n * See example to override ResponseViewMiddleware [here](/docs/middlewares/override/response-view.md).\n * @middleware\n */\n@Middleware()\nexport class ResponseViewMiddleware implements IMiddleware {\n  public use(@ResponseData() data: any, @EndpointInfo() endpoint: EndpointInfo, @Res() response: Res) {\n    return new Promise((resolve, reject) => {\n      const {viewPath, viewOptions} = endpoint.store.get(ResponseViewMiddleware);\n\n      if (viewPath !== undefined) {\n        if (viewOptions !== undefined) {\n          data = Object.assign({}, data, viewOptions);\n        }\n\n        response.render(viewPath, data, (err: any, html) => {\n          /* istanbul ignore next */\n          if (err) {\n            reject(new TemplateRenderingError(endpoint.target, endpoint.methodClassName, err));\n          } else {\n            resolve(html);\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n"],"sourceRoot":"../../../src"}