import { Store, Type } from "@tsed/core";
import { EndpointMetadata } from "../class/EndpointMetadata";
/**
 * Registry for all Endpoint collected on a provide.
 */
export declare class EndpointRegistry {
    /**
     * Return all endpoints from the given class. This method doesn't return the endpoints from the parent of the given class.
     * @param {Type<any>} target
     * @returns {any}
     */
    static getOwnEndpoints(target: Type<any>): any;
    /**
     * Get all endpoints from a given class and his parents.
     * @param {Type<any>} target
     * @returns {EndpointMetadata[]}
     */
    static getEndpoints(target: Type<any>): EndpointMetadata[];
    /**
     * Gets a value indicating whether the target object or its prototype chain has endpoints.
     * @param {Type<any>} target
     * @returns {boolean}
     */
    static hasEndpoints(target: Type<any>): boolean;
    /**
     * Get an endpoint.
     * @param target
     * @param method
     */
    static get(target: Type<any>, method: string | symbol): EndpointMetadata;
    /**
     * Gets a value indicating whether the target object or its prototype chain has already method registered.
     * @param target
     * @param method
     */
    static has(target: Type<any>, method: string | symbol): boolean;
    /**
     * Append mvc in the pool (before).
     * @param target
     * @param targetKey
     * @param args
     */
    static useBefore(target: Type<any>, targetKey: string | symbol, args: any[]): typeof EndpointRegistry;
    /**
     * Add middleware and configuration for the endpoint.
     * @param target
     * @param targetKey
     * @param args
     * @returns {Endpoint}
     */
    static use(target: Type<any>, targetKey: string | symbol, args: any[]): typeof EndpointRegistry;
    /**
     * Append mvc in the pool (after).
     * @param target
     * @param targetKey
     * @param args
     */
    static useAfter(target: Type<any>, targetKey: string | symbol, args: any[]): typeof EndpointRegistry;
    /**
     * Store a data on store manager.
     * @param target
     * @param propertyKey
     * @returns {any}
     */
    static store(target: any, propertyKey: string): Store;
    /**
     * Retrieve all endpoints from inherited class and store it in the registry.
     * @param {Type<any>} ctrlClass
     */
    private static inherit;
}
