{"version":3,"sources":["mvc/registries/MiddlewareRegistry.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0C,sBAAsB,EAAC,MAAM,UAAU,CAAC;AAEzF;;;GAGG;AAEH,eAAO,MAAM,kBAAkB,EAAE,sBAE/B,CAAC;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,eAAO,MAAM,kBAAkB,yCAA4D,CAAC","file":"MiddlewareRegistry.d.ts","sourcesContent":["import {GlobalProviders, Provider, ProviderType, TypedProvidersRegistry} from \"@tsed/di\";\n\n/**\n *\n * @type {Registry<Provider<any>, Provider>}\n */\n// tslint:disable-next-line: variable-name\nexport const MiddlewareRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.MIDDLEWARE, Provider, {\n  injectable: true\n});\n/**\n * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerMiddleware, InjectorService} from \"@tsed/common\";\n *\n * export default class FooMiddleware {\n *     constructor(){}\n *     use() {\n *         return \"test\";\n *     }\n * }\n *\n * registerMiddleware({provide: FooMiddleware});\n * // or\n * registerMiddleware(FooMiddleware);\n *\n * const injector = new InjectorService()\n * injector.load();\n *\n * const myFooService = injector.get<FooMiddleware>(FooMiddleware);\n * fooMiddleware.use(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerMiddleware = GlobalProviders.createRegisterFn(ProviderType.MIDDLEWARE);\n"],"sourceRoot":"../../../src"}