{"version":3,"sources":["mvc/decorators/allow.ts"],"names":[],"mappings":"AAMA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,wBAAgB,KAAK,CAAC,GAAG,qBAAqB,EAAE,GAAG,EAAE,GAAG,GAAG,CA6B1D","file":"allow.d.ts","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {ParamRegistry} from \"../../filters/registries/ParamRegistry\";\nimport {JsonSchema} from \"../../jsonschema/class/JsonSchema\";\nimport {PropertyRegistry} from \"../../jsonschema/registries/PropertyRegistry\";\nimport {decoratorSchemaFactory} from \"../../jsonschema/utils/decoratorSchemaFactory\";\n\n/**\n * Add allowed values when the property or parameters is required.\n *\n * #### Example on parameter:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @Allow(\"\") @BodyParams(\"field\") field: string) {}\n * ```\n * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.\n *\n * #### Example on model:\n *\n * ```typescript\n * class Model {\n *   @JsonProperty()\n *   @Required()\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n */\nexport function Allow(...allowedRequiredValues: any[]): any {\n  const allowNullInSchema = decoratorSchemaFactory((schema: JsonSchema) => {\n    if (schema && schema.mapper) {\n      if (schema.mapper.$ref) {\n        schema.mapper.oneOf = [{type: \"null\"}, {$ref: schema.mapper.$ref}];\n        delete schema.mapper.$ref;\n      } else {\n        schema.mapper.type = [].concat(schema.type, [\"null\"] as any);\n      }\n    }\n  });\n\n  return (target: Type<any>, propertyKey: string, parameterIndex?: number): void => {\n    if (typeof parameterIndex === \"number\") {\n      const paramMetadata = ParamRegistry.get(target, propertyKey, parameterIndex);\n      paramMetadata.allowedRequiredValues = allowedRequiredValues;\n\n      ParamRegistry.set(target, propertyKey, parameterIndex, paramMetadata);\n    } else {\n      const propertyMetadata = PropertyRegistry.get(target, propertyKey);\n      propertyMetadata.allowedRequiredValues = allowedRequiredValues;\n\n      PropertyRegistry.set(target, propertyKey, propertyMetadata);\n\n      if (allowedRequiredValues.some(e => e == null)) {\n        allowNullInSchema(target, propertyKey);\n      }\n    }\n  };\n}\n"],"sourceRoot":"../../../src"}