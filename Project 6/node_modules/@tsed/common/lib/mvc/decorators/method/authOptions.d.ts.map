{"version":3,"sources":["mvc/decorators/method/authOptions.ts"],"names":[],"mappings":"AAAA,OAAO,EAA2E,IAAI,EAA2B,MAAM,YAAY,CAAC;AAEpI,MAAM,WAAW,YAAY;IAC3B,SAAS,CAAC,EAAE;QACV,CAAC,UAAU,EAAE,MAAM,GAAG;YACpB,WAAW,EAAE,MAAM,CAAC;SACrB,CAAC;KACH,CAAC;IACF,QAAQ,CAAC,EAAE;QACT,CAAC,YAAY,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;KAClC,EAAE,CAAC;IAEJ,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,CAAC;CACpB;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH,wBAAgB,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,GAAE,YAAiB,GAAG,QAAQ,CA4BtF","file":"authOptions.d.ts","sourcesContent":["import {decorateMethodsOf, DecoratorParameters, getDecoratorType, Store, StoreFn, Type, UnsupportedDecoratorType} from \"@tsed/core\";\n\nexport interface IAuthOptions {\n  responses?: {\n    [statusCode: string]: {\n      description: string;\n    };\n  };\n  security?: {\n    [securityName: string]: string[];\n  }[];\n\n  [key: string]: any;\n}\n\n/**\n * Change authentication options.\n *\n * ```typescript\n * @Controller('/mypath')\n * @UseAuth(MyAuthStrategy, {role: ''})\n * class MyCtrl {\n *\n *   @Get('/')\n *   @AuthOptions(MyAuthStrategy, {role: 'admin'})\n *   public getResource(){}\n * }\n * ```\n *\n * @param guardAuth\n * @param options {Object} Object passed to the customer auth strategy\n * @returns {Function}\n * @decorator\n * @endpoint\n */\nexport function AuthOptions(guardAuth: Type<any>, options: IAuthOptions = {}): Function {\n  return <T>(...args: DecoratorParameters): TypedPropertyDescriptor<T> | void => {\n    switch (getDecoratorType(args, true)) {\n      case \"method\":\n        return StoreFn((store: Store) => {\n          if (options.responses) {\n            const {responses} = options;\n            store.merge(\"responses\", responses, true);\n            delete options.responses;\n          }\n\n          if (options.security) {\n            const {security} = options;\n            store.merge(\"operation\", {security}, true);\n            delete options.security;\n          }\n\n          store.merge(guardAuth, options, true);\n        })(...args);\n\n      case \"class\":\n        decorateMethodsOf(args[0], AuthOptions(guardAuth, options));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(AuthOptions, args);\n    }\n  };\n}\n"],"sourceRoot":"../../../../src"}