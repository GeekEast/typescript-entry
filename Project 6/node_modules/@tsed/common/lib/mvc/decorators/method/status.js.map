{"version":3,"sources":["mvc/decorators/method/status.ts"],"names":[],"mappings":";;AAAA,qCAAiE;AAEjE,yEAAoE;AACpE,yCAAoC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,SAAgB,MAAM,CAAC,IAAY,EAAE,UAA4B,EAAE;IACjE,MAAM,QAAQ,GAAG,yCAAmB,CAAC,OAAO,CAAC,CAAC;IAE9C,OAAO,sBAAe,CACpB,eAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,EAC5B,iBAAU,CAAC,UAAU,EAAE,QAAQ,CAAC,EAChC,iBAAU,CAAC,WAAW,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAC,CAAC,EAC3C,mBAAQ,CAAC,CAAC,OAAY,EAAE,QAAa,EAAE,IAAS,EAAE,EAAE;QAClD,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;YAC/B,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACvB;QACD,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAdD,wBAcC","file":"status.js","sourcesContent":["import {applyDecorators, StoreSet, StoreMerge} from \"@tsed/core\";\nimport {IResponseOptions} from \"../../interfaces/IResponseOptions\";\nimport {mapReturnedResponse} from \"../../utils/mapReturnedResponse\";\nimport {UseAfter} from \"./useAfter\";\n\n/**\n * Set the HTTP status for the response. It is a chainable alias of Nodeâ€™s `response.statusCode`.\n *\n * ```typescript\n * @Status(204)\n * async myMethod() {}\n * ```\n *\n * With swagger description:\n *\n * ```typescript\n * @Status(204, {\n *   type: Model\n *   description: \"Description\"\n * })\n * @Header('Content-Type', 'application-json')\n * async myMethod() {\n * }\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param code\n * @param options\n * @returns {Function}\n * @decorator\n * @endpoint\n */\nexport function Status(code: number, options: IResponseOptions = {}) {\n  const response = mapReturnedResponse(options);\n\n  return applyDecorators(\n    StoreSet(\"statusCode\", code),\n    StoreMerge(\"response\", response),\n    StoreMerge(\"responses\", {[code]: response}),\n    UseAfter((request: any, response: any, next: any) => {\n      if (response.statusCode === 200) {\n        response.status(code);\n      }\n      next();\n    })\n  );\n}\n"],"sourceRoot":"../../../../src"}