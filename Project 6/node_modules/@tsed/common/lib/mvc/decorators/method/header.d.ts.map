{"version":3,"sources":["mvc/decorators/method/header.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAC,eAAe,EAAmB,MAAM,mCAAmC,CAAC;AAIpF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AACH,wBAAgB,MAAM,CAAC,UAAU,EAAE,MAAM,GAAG,MAAM,GAAG,eAAe,EAAE,WAAW,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,eAAe,GAAG,QAAQ,CAe/H","file":"header.d.ts","sourcesContent":["import {applyDecorators, StoreMerge} from \"@tsed/core\";\nimport {IResponseHeader} from \"../../interfaces/IResponseHeader\";\nimport {IHeadersOptions, IResponseHeaders} from \"../../interfaces/IResponseHeaders\";\nimport {mapHeaders} from \"../../utils/mapHeaders\";\nimport {UseAfter} from \"./useAfter\";\n\n/**\n * Sets the responseâ€™s HTTP header field to value. To set multiple fields at once, pass an object as the parameter.\n *\n * ```typescript\n * @Header('Content-Type', 'text/plain');\n * private myMethod() {}\n *\n * @Status(204)\n * @Header({\n *   \"Content-Type\": \"text/plain\",\n *   \"Content-Length\": 123,\n *   \"ETag\": {\n *     \"value\": \"12345\",\n *     \"description\": \"header description\"\n *   }\n * })\n * private myMethod() {}\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"204\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          },\n *          \"Content-Length\": {\n *             \"type\": \"number\"\n *          },\n *          \"ETag\": {\n *             \"type\": \"string\",\n *             \"description\": \"header description\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param headerName\n * @param headerValue\n * @returns {Function}\n * @decorator\n * @endpoint\n */\nexport function Header(headerName: string | number | IHeadersOptions, headerValue?: string | number | IResponseHeader): Function {\n  if (headerValue !== undefined) {\n    headerName = {[headerName as string]: headerValue};\n  }\n  const headers: IResponseHeaders = mapHeaders(headerName as IHeadersOptions);\n\n  return applyDecorators(\n    StoreMerge(\"response\", {headers}),\n    UseAfter((request: any, response: any, next: any) => {\n      Object.keys(headers).forEach(key => {\n        response.set(key, headers[key].value);\n      });\n      next();\n    })\n  );\n}\n"],"sourceRoot":"../../../../src"}