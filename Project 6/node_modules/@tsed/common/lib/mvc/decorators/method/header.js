"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const mapHeaders_1 = require("../../utils/mapHeaders");
const useAfter_1 = require("./useAfter");
/**
 * Sets the responseâ€™s HTTP header field to value. To set multiple fields at once, pass an object as the parameter.
 *
 * ```typescript
 * @Header('Content-Type', 'text/plain');
 * private myMethod() {}
 *
 * @Status(204)
 * @Header({
 *   "Content-Type": "text/plain",
 *   "Content-Length": 123,
 *   "ETag": {
 *     "value": "12345",
 *     "description": "header description"
 *   }
 * })
 * private myMethod() {}
 * ```
 *
 * This example will produce the swagger responses object:
 *
 * ```json
 * {
 *   "responses": {
 *     "204": {
 *       "description": "Description",
 *       "headers": {
 *          "Content-Type": {
 *             "type": "string"
 *          },
 *          "Content-Length": {
 *             "type": "number"
 *          },
 *          "ETag": {
 *             "type": "string",
 *             "description": "header description"
 *          }
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * @param headerName
 * @param headerValue
 * @returns {Function}
 * @decorator
 * @endpoint
 */
function Header(headerName, headerValue) {
    if (headerValue !== undefined) {
        headerName = { [headerName]: headerValue };
    }
    const headers = mapHeaders_1.mapHeaders(headerName);
    return core_1.applyDecorators(core_1.StoreMerge("response", { headers }), useAfter_1.UseAfter((request, response, next) => {
        Object.keys(headers).forEach(key => {
            response.set(key, headers[key].value);
        });
        next();
    }));
}
exports.Header = Header;

//# sourceMappingURL=header.js.map
