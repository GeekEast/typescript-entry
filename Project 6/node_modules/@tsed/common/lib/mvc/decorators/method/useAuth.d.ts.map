{"version":3,"sources":["mvc/decorators/method/useAuth.ts"],"names":[],"mappings":"AAAA,OAAO,EAOL,IAAI,EAEL,MAAM,YAAY,CAAC;AACpB,OAAO,EAAc,YAAY,EAAC,MAAM,eAAe,CAAC;AAGxD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,wBAAgB,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,GAAE,YAAiB,GAAG,QAAQ,CAqBlF","file":"useAuth.d.ts","sourcesContent":["import {\n  applyDecorators,\n  decorateMethodsOf,\n  DecoratorParameters,\n  getDecoratorType,\n  Store,\n  StoreFn,\n  Type,\n  UnsupportedDecoratorType\n} from \"@tsed/core\";\nimport {AuthOptions, IAuthOptions} from \"./authOptions\";\nimport {UseBefore} from \"./useBefore\";\n\n/**\n * Use custom authentication strategy on your endpoint.\n *\n * ```typescript\n * @Controller('/mypath')\n * @UseAuth(MyAuthStrategy)\n * class MyCtrl {\n *\n *   @Get('/')\n *   @UseAuth(MyAuthStrategy, {role: 'admin'})\n *   public getResource(){}\n * }\n * ```\n *\n * @param guardAuth {Type<any>} A middleware which implement a custom auth strategy\n * @param options {Object} Object passed to the customer auth strategy\n * @returns {Function}\n * @decorator\n * @endpoint\n */\nexport function UseAuth(guardAuth: Type<any>, options: IAuthOptions = {}): Function {\n  return <T>(...args: DecoratorParameters): TypedPropertyDescriptor<T> | void => {\n    switch (getDecoratorType(args, true)) {\n      case \"method\":\n        return applyDecorators(\n          StoreFn((store: Store) => {\n            if (!store.has(guardAuth)) {\n              return UseBefore(guardAuth);\n            }\n          }),\n          AuthOptions(guardAuth, options)\n        )(...args);\n\n      case \"class\":\n        decorateMethodsOf(args[0], UseAuth(guardAuth, options));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(UseAuth, args);\n    }\n  };\n}\n"],"sourceRoot":"../../../../src"}