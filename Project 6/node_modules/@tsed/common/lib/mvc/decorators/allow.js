"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ParamRegistry_1 = require("../../filters/registries/ParamRegistry");
const PropertyRegistry_1 = require("../../jsonschema/registries/PropertyRegistry");
const decoratorSchemaFactory_1 = require("../../jsonschema/utils/decoratorSchemaFactory");
/**
 * Add allowed values when the property or parameters is required.
 *
 * #### Example on parameter:
 *
 * ```typescript
 * @Post("/")
 * async method(@Required() @Allow("") @BodyParams("field") field: string) {}
 * ```
 * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.
 *
 * #### Example on model:
 *
 * ```typescript
 * class Model {
 *   @JsonProperty()
 *   @Required()
 *   @Allow("")
 *   field: string;
 * }
 * ```
 *
 * @returns {Function}
 * @decorator
 */
function Allow(...allowedRequiredValues) {
    const allowNullInSchema = decoratorSchemaFactory_1.decoratorSchemaFactory((schema) => {
        if (schema && schema.mapper) {
            if (schema.mapper.$ref) {
                schema.mapper.oneOf = [{ type: "null" }, { $ref: schema.mapper.$ref }];
                delete schema.mapper.$ref;
            }
            else {
                schema.mapper.type = [].concat(schema.type, ["null"]);
            }
        }
    });
    return (target, propertyKey, parameterIndex) => {
        if (typeof parameterIndex === "number") {
            const paramMetadata = ParamRegistry_1.ParamRegistry.get(target, propertyKey, parameterIndex);
            paramMetadata.allowedRequiredValues = allowedRequiredValues;
            ParamRegistry_1.ParamRegistry.set(target, propertyKey, parameterIndex, paramMetadata);
        }
        else {
            const propertyMetadata = PropertyRegistry_1.PropertyRegistry.get(target, propertyKey);
            propertyMetadata.allowedRequiredValues = allowedRequiredValues;
            PropertyRegistry_1.PropertyRegistry.set(target, propertyKey, propertyMetadata);
            if (allowedRequiredValues.some(e => e == null)) {
                allowNullInSchema(target, propertyKey);
            }
        }
    };
}
exports.Allow = Allow;

//# sourceMappingURL=allow.js.map
