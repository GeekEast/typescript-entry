{"version":3,"sources":["mvc/decorators/class/controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsB,IAAI,EAAC,MAAM,YAAY,CAAC;AAErD,OAAO,EAAC,mBAAmB,EAAE,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAErE;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,wBAAgB,UAAU,CAAC,OAAO,EAAE,cAAc,GAAG,mBAAmB,EAAE,GAAG,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,QAAQ,CAgB5G","file":"controller.d.ts","sourcesContent":["import {isArrayOrArrayClass, Type} from \"@tsed/core\";\nimport {registerController} from \"@tsed/di\";\nimport {IControllerProvider, PathParamsType} from \"../../interfaces\";\n\n/**\n * Declare a new controller with his Rest path. His methods annotated will be collected to build the routing list.\n * This routing listing will be built with the `express.Router` object.\n *\n * ::: tip\n * See [Controllers](/docs/controllers.md) section for more details\n * :::\n *\n * ```typescript\n *  @Controller(\"/calendars\")\n *  export provide CalendarCtrl {\n *\n *    @Get(\"/:id\")\n *    public get(\n *      @Request() request: Express.Request,\n *      @Response() response: Express.Response,\n *      @Next() next: Express.NextFunction\n *    ): void {\n *\n *    }\n *  }\n * ```\n *\n * @param options\n * @param children\n * @returns {Function}\n * @decorator\n */\nexport function Controller(options: PathParamsType | IControllerProvider, ...children: Type<any>[]): Function {\n  return (target: any): void => {\n    if (typeof options === \"string\" || options instanceof RegExp || isArrayOrArrayClass(options)) {\n      registerController({\n        provide: target,\n        path: options,\n        children\n      });\n    } else {\n      registerController({\n        provide: target,\n        children: (options as IControllerProvider).dependencies || (options as IControllerProvider).children,\n        ...options\n      });\n    }\n  };\n}\n"],"sourceRoot":"../../../../src"}