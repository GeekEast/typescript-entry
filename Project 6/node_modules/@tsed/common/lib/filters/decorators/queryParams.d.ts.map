{"version":3,"sources":["filters/decorators/queryParams.ts"],"names":[],"mappings":"AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,wBAAgB,WAAW,CAAC,UAAU,CAAC,EAAE,MAAM,GAAG,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG,GAAG,QAAQ,CAQ9E","file":"queryParams.d.ts","sourcesContent":["import {QueryParamsFilter} from \"../components/QueryParamsFilter\";\nimport {ParamTypes} from \"../interfaces/ParamTypes\";\nimport {ParamRegistry} from \"../registries/ParamRegistry\";\n\n/**\n * QueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@QueryParams() query: any) {\n *       console.log('Entire query', query);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @returns {Function}\n */\nexport function QueryParams(expression?: string | any, useType?: any): Function {\n  return ParamRegistry.decorate(QueryParamsFilter, {\n    expression,\n    useType,\n    useConverter: true,\n    useValidation: true,\n    paramType: ParamTypes.QUERY\n  });\n}\n"],"sourceRoot":"../../../src"}