{"version":3,"sources":["filters/services/ParseService.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,qBACa,YAAY;;IAGvB;;;OAGG;IACH,MAAM,CAAC,KAAK,oBAAsD;IAElE;;;;;;OAMG;IACH,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,GAAE,OAAc,GAAG,GAAG;CASjE","file":"ParseService.d.ts","sourcesContent":["import {getValue, isEmpty} from \"@tsed/core\";\nimport {Service} from \"@tsed/di\";\n\n/**\n *\n */\n@Service()\nexport class ParseService {\n  constructor() {}\n\n  /**\n   * Clone an object.\n   * @param src\n   */\n  static clone = (src: any): any => JSON.parse(JSON.stringify(src));\n\n  /**\n   * Eval an expression with a scope context and return value.\n   * @param expression\n   * @param scope\n   * @param clone\n   * @returns {any}\n   */\n  eval(expression: string, scope: any, clone: boolean = true): any {\n    if (isEmpty(expression)) {\n      return typeof scope === \"object\" && clone ? ParseService.clone(scope) : scope;\n    }\n\n    const value = getValue(expression, scope);\n\n    return typeof value === \"object\" && clone ? ParseService.clone(value) : value;\n  }\n}\n"],"sourceRoot":"../../../src"}