{"version":3,"sources":["filters/services/ParseService.ts"],"names":[],"mappings":";;;;AAAA,qCAA6C;AAC7C,iCAAiC;AAEjC;;GAEG;AAEH,IAAa,YAAY,oBAAzB,MAAa,YAAY;IACvB,gBAAe,CAAC;IAQhB;;;;;;OAMG;IACH,IAAI,CAAC,UAAkB,EAAE,KAAU,EAAE,QAAiB,IAAI;QACxD,IAAI,cAAO,CAAC,UAAU,CAAC,EAAE;YACvB,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,cAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;SAC/E;QAED,MAAM,KAAK,GAAG,eAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAE1C,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,cAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAChF,CAAC;CACF,CAAA;AAtBC;;;GAGG;AACI,kBAAK,GAAG,CAAC,GAAQ,EAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAPvD,YAAY;IADxB,YAAO,EAAE;;GACG,YAAY,CAyBxB;AAzBY,oCAAY","file":"ParseService.js","sourcesContent":["import {getValue, isEmpty} from \"@tsed/core\";\nimport {Service} from \"@tsed/di\";\n\n/**\n *\n */\n@Service()\nexport class ParseService {\n  constructor() {}\n\n  /**\n   * Clone an object.\n   * @param src\n   */\n  static clone = (src: any): any => JSON.parse(JSON.stringify(src));\n\n  /**\n   * Eval an expression with a scope context and return value.\n   * @param expression\n   * @param scope\n   * @param clone\n   * @returns {any}\n   */\n  eval(expression: string, scope: any, clone: boolean = true): any {\n    if (isEmpty(expression)) {\n      return typeof scope === \"object\" && clone ? ParseService.clone(scope) : scope;\n    }\n\n    const value = getValue(expression, scope);\n\n    return typeof value === \"object\" && clone ? ParseService.clone(value) : value;\n  }\n}\n"],"sourceRoot":"../../../src"}