import { Storable, Type } from "@tsed/core";
import { IParamOptions } from "../interfaces";
import { ParamTypes } from "../interfaces/ParamTypes";
export declare class ParamMetadata extends Storable implements IParamOptions<any> {
    /**
     *
     */
    protected _expression: string | RegExp;
    /**
     *
     * @type {boolean}
     */
    protected _useConverter: boolean;
    /**
     *
     * @type {boolean}
     */
    private _useValidation;
    /**
     *
     */
    protected _service: string | Type<any> | symbol;
    /**
     * Allowed value when the entity is required.
     * @type {Array}
     */
    private _allowedRequiredValues;
    /**
     * Required entity.
     */
    protected _required: boolean;
    /**
     *
     */
    private _paramType;
    /**
     *
     * @returns {string|RegExp}
     */
    /**
    *
    * @param value
    */
    expression: string | RegExp;
    /**
     *
     * @returns {symbol}
     */
    /**
    *
    * @param value
    */
    service: Type<any> | symbol;
    /**
     *
     * @param value
     */
    /**
    *
    * @returns {boolean}
    */
    useConverter: boolean;
    /**
     *
     * @returns {boolean}
     */
    /**
    *
    * @param {boolean} value
    */
    useValidation: boolean;
    /**
     * Return the required state.
     * @returns {boolean}
     */
    /**
    * Change the state of the required data.
    * @param value
    */
    required: boolean;
    /**
     * Return the allowed values.
     * @returns {any[]}
     */
    /**
    * Set the allowed values when the value is required.
    * @param {any[]} value
    */
    allowedRequiredValues: any[];
    /**
     *
     * @returns {ParamTypes}
     */
    /**
    *
    * @param {ParamTypes} value
    */
    paramType: ParamTypes;
    /**
     * This method use `EntityDescription.required` and `allowedRequiredValues` to validate the value.
     * @param value
     * @returns {boolean}
     * @deprecated
     */
    isValidRequiredValue(value: any): boolean;
    /**
     *
     * @param value
     * @returns {boolean}
     */
    isRequired(value: any): boolean;
    /**
     *
     * @returns {{service: (string|symbol), name: string, expression: string, required: boolean, use: undefined, baseType: undefined}}
     */
    toJSON(): {
        service: string;
        name: string;
        expression: string | RegExp;
        required: boolean;
        use: string;
        baseType: string;
    };
}
