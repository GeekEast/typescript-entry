{"version":3,"sources":["filters/class/ParamMetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACjE,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAC;AAEpD,qBAAa,aAAc,SAAQ,QAAS,YAAW,aAAa,CAAC,GAAG,CAAC;IACvE;;OAEG;IAEH,SAAS,CAAC,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC;IACvC;;;OAGG;IAEH,SAAS,CAAC,aAAa,EAAE,OAAO,CAAQ;IACxC;;;OAGG;IAEH,OAAO,CAAC,cAAc,CAAkB;IAExC;;OAEG;IAEH,SAAS,CAAC,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAEhD;;;OAGG;IAEH,OAAO,CAAC,sBAAsB,CAAa;IAE3C;;OAEG;IAEH,SAAS,CAAC,SAAS,EAAE,OAAO,CAAS;IACrC;;OAEG;IAEH,OAAO,CAAC,UAAU,CAAa;IAE/B;;;OAGG;;;;;IACC,UAAU,EAAI,MAAM,GAAG,MAAM;IAYjC;;;OAGG;;;;;IACC,OAAO,EAAI,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM;IAajC;;;OAGG;;;;;IACC,YAAY,EAAQ,OAAO;IAY/B;;;OAGG;;;;;IACC,aAAa,EAAI,OAAO;IAY5B;;;OAGG;;;;;IACC,QAAQ,EAAI,OAAO;IAYvB;;;OAGG;;;;;IACC,qBAAqB,EAAI,GAAG,EAAE;IAYlC;;;OAGG;;;;;IACC,SAAS,EAAI,UAAU;IAY3B;;;;;OAKG;IACH,oBAAoB,CAAC,KAAK,EAAE,GAAG,GAAG,OAAO;IAYzC;;;;OAIG;IACH,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,OAAO;IAI/B;;;OAGG;IACH,MAAM;;;;;;;;CAUP","file":"ParamMetadata.d.ts","sourcesContent":["import {nameOf, NotEnumerable, Storable, Type} from \"@tsed/core\";\nimport {IParamOptions} from \"../interfaces\";\nimport {ParamTypes} from \"../interfaces/ParamTypes\";\n\nexport class ParamMetadata extends Storable implements IParamOptions<any> {\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _expression: string | RegExp;\n  /**\n   *\n   * @type {boolean}\n   */\n  @NotEnumerable()\n  protected _useConverter: boolean = true;\n  /**\n   *\n   * @type {boolean}\n   */\n  @NotEnumerable()\n  private _useValidation: boolean = false;\n\n  /**\n   *\n   */\n  @NotEnumerable()\n  protected _service: string | Type<any> | symbol;\n\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @NotEnumerable()\n  private _allowedRequiredValues: any[] = [];\n\n  /**\n   * Required entity.\n   */\n  @NotEnumerable()\n  protected _required: boolean = false;\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _paramType: ParamTypes;\n\n  /**\n   *\n   * @returns {string|RegExp}\n   */\n  get expression(): string | RegExp {\n    return this._expression;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set expression(value: string | RegExp) {\n    this._expression = value;\n  }\n\n  /**\n   *\n   * @returns {symbol}\n   */\n  get service(): Type<any> | symbol {\n    return this._service as any;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set service(value: Type<any> | symbol) {\n    this._service = value;\n    this.name = nameOf(value);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set useConverter(value: boolean) {\n    this._useConverter = value;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get useConverter(): boolean {\n    return this._useConverter;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get useValidation(): boolean {\n    return this._useValidation;\n  }\n\n  /**\n   *\n   * @param {boolean} value\n   */\n  set useValidation(value: boolean) {\n    this._useValidation = value;\n  }\n\n  /**\n   * Return the required state.\n   * @returns {boolean}\n   */\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * Change the state of the required data.\n   * @param value\n   */\n  set required(value: boolean) {\n    this._required = value;\n  }\n\n  /**\n   * Return the allowed values.\n   * @returns {any[]}\n   */\n  get allowedRequiredValues(): any[] {\n    return this._allowedRequiredValues;\n  }\n\n  /**\n   * Set the allowed values when the value is required.\n   * @param {any[]} value\n   */\n  set allowedRequiredValues(value: any[]) {\n    this._allowedRequiredValues = value;\n  }\n\n  /**\n   *\n   * @returns {ParamTypes}\n   */\n  get paramType(): ParamTypes {\n    return this._paramType;\n  }\n\n  /**\n   *\n   * @param {ParamTypes} value\n   */\n  set paramType(value: ParamTypes) {\n    this._paramType = value;\n  }\n\n  /**\n   * This method use `EntityDescription.required` and `allowedRequiredValues` to validate the value.\n   * @param value\n   * @returns {boolean}\n   * @deprecated\n   */\n  isValidRequiredValue(value: any): boolean {\n    if (this.required) {\n      if (value === undefined || value === null || value === \"\") {\n        if (this.allowedRequiredValues.indexOf(value) === -1) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].indexOf(value) > -1 && this.allowedRequiredValues.indexOf(value) === -1;\n  }\n\n  /**\n   *\n   * @returns {{service: (string|symbol), name: string, expression: string, required: boolean, use: undefined, baseType: undefined}}\n   */\n  toJSON() {\n    return {\n      service: nameOf(this._service),\n      name: this.name,\n      expression: this._expression,\n      required: this._required,\n      use: this.typeName,\n      baseType: this.collectionName\n    };\n  }\n}\n"],"sourceRoot":"../../../src"}