{"version":3,"sources":["filters/class/FilterBuilder.ts"],"names":[],"mappings":"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","file":"FilterBuilder.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {ConverterService} from \"../../converters\";\nimport {ParseExpressionError} from \"../errors/ParseExpressionError\";\nimport {RequiredParamError} from \"../errors/RequiredParamError\";\nimport {UnknowFilterError} from \"../errors/UnknowFilterError\";\nimport {IFilter, IFilterPreHandler, IFilterScope} from \"../interfaces\";\nimport {FilterPreHandlers} from \"../registries/FilterRegistry\";\nimport {ValidationService} from \"../services/ValidationService\";\nimport {ParamMetadata} from \"./ParamMetadata\";\n\nexport class FilterBuilder {\n  constructor(private injector: InjectorService) {}\n\n  /**\n   *\n   * @param {Function} filter\n   * @param {Function} newFilter\n   * @param args\n   * @returns {(value: any) => any}\n   */\n  private static pipe(filter: Function, newFilter: Function, ...args: any[]): Function {\n    return (value: any) => newFilter(filter(value), ...args);\n  }\n\n  /**\n   *\n   */\n  public build(param: ParamMetadata): Function {\n    let filter: any = this.initFilter(param);\n    filter = this.appendRequiredFilter(filter, param);\n    filter = this.appendValidationFilter(filter, param);\n    filter = this.appendConverterFilter(filter, param);\n\n    return filter;\n  }\n\n  /**\n   *\n   * @param {Type<IFilter>} target\n   * @param args\n   * @returns {any}\n   */\n  private invoke(target: Type<IFilter>, ...args: any[]): any {\n    const instance = this.injector.get<IFilter>(target);\n\n    if (!instance || !instance.transform) {\n      throw new UnknowFilterError(target);\n    }\n\n    const [expression, request, response] = args;\n\n    return instance.transform(expression, request, response);\n  }\n\n  /**\n   *\n   * @param {ParamMetadata} param\n   * @returns {any}\n   */\n  private initFilter(param: ParamMetadata): IFilterPreHandler {\n    if (typeof param.service === \"symbol\") {\n      const sym = param.service as symbol;\n\n      if (FilterPreHandlers.has(sym)) {\n        return FilterPreHandlers.get(sym)!;\n      }\n    }\n\n    // wrap Custom Filter to FilterPreHandler\n    return (locals: IFilterScope) => {\n      return this.invoke(param.service as Type<any>, param.expression, locals.request, locals.response);\n    };\n  }\n\n  /**\n   *\n   * @param filter\n   * @param {ParamMetadata} param\n   * @returns {(value: any) => any}\n   */\n  private appendRequiredFilter(filter: any, param: ParamMetadata): Function {\n    if (!param.required) {\n      return filter;\n    }\n\n    return FilterBuilder.pipe(\n      filter,\n      (value: any) => {\n        if (param.isRequired(value)) {\n          throw new RequiredParamError(param.name, param.expression);\n        }\n\n        return value;\n      }\n    );\n  }\n\n  /**\n   *\n   * @param filter\n   * @param param\n   * @returns {(value: any) => any}\n   */\n  private appendConverterFilter(filter: any, param: ParamMetadata): Function {\n    if (!param.useConverter) {\n      return filter;\n    }\n\n    const converterService = this.injector.get<ConverterService>(ConverterService)!;\n\n    return FilterBuilder.pipe(\n      filter,\n      converterService.deserialize.bind(converterService),\n      param.collectionType || param.type,\n      param.type\n    );\n  }\n\n  /**\n   *\n   * @param filter\n   * @param param\n   * @returns {(value: any) => any}\n   */\n  private appendValidationFilter(filter: any, param: ParamMetadata): Function {\n    const type = param.type || param.collectionType;\n    const {collectionType} = param;\n\n    if (!param.useValidation || (param.useValidation && !type)) {\n      return filter;\n    }\n\n    const validationService = this.injector.get<ValidationService>(ValidationService)!;\n\n    return FilterBuilder.pipe(\n      filter,\n      (value: any) => {\n        try {\n          validationService.validate(value, type, collectionType);\n        } catch (err) {\n          throw new ParseExpressionError(param.name, param.expression, err);\n        }\n\n        return value;\n      }\n    );\n  }\n}\n"],"sourceRoot":"../../../src"}