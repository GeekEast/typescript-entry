"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const ParamTypes_1 = require("../interfaces/ParamTypes");
class ParamMetadata extends core_1.Storable {
    constructor() {
        super(...arguments);
        /**
         *
         * @type {boolean}
         */
        this._useConverter = true;
        /**
         *
         * @type {boolean}
         */
        this._useValidation = false;
        /**
         * Allowed value when the entity is required.
         * @type {Array}
         */
        this._allowedRequiredValues = [];
        /**
         * Required entity.
         */
        this._required = false;
    }
    /**
     *
     * @returns {string|RegExp}
     */
    get expression() {
        return this._expression;
    }
    /**
     *
     * @param value
     */
    set expression(value) {
        this._expression = value;
    }
    /**
     *
     * @returns {symbol}
     */
    get service() {
        return this._service;
    }
    /**
     *
     * @param value
     */
    set service(value) {
        this._service = value;
        this.name = core_1.nameOf(value);
    }
    /**
     *
     * @param value
     */
    set useConverter(value) {
        this._useConverter = value;
    }
    /**
     *
     * @returns {boolean}
     */
    get useConverter() {
        return this._useConverter;
    }
    /**
     *
     * @returns {boolean}
     */
    get useValidation() {
        return this._useValidation;
    }
    /**
     *
     * @param {boolean} value
     */
    set useValidation(value) {
        this._useValidation = value;
    }
    /**
     * Return the required state.
     * @returns {boolean}
     */
    get required() {
        return this._required;
    }
    /**
     * Change the state of the required data.
     * @param value
     */
    set required(value) {
        this._required = value;
    }
    /**
     * Return the allowed values.
     * @returns {any[]}
     */
    get allowedRequiredValues() {
        return this._allowedRequiredValues;
    }
    /**
     * Set the allowed values when the value is required.
     * @param {any[]} value
     */
    set allowedRequiredValues(value) {
        this._allowedRequiredValues = value;
    }
    /**
     *
     * @returns {ParamTypes}
     */
    get paramType() {
        return this._paramType;
    }
    /**
     *
     * @param {ParamTypes} value
     */
    set paramType(value) {
        this._paramType = value;
    }
    /**
     * This method use `EntityDescription.required` and `allowedRequiredValues` to validate the value.
     * @param value
     * @returns {boolean}
     * @deprecated
     */
    isValidRequiredValue(value) {
        if (this.required) {
            if (value === undefined || value === null || value === "") {
                if (this.allowedRequiredValues.indexOf(value) === -1) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     *
     * @param value
     * @returns {boolean}
     */
    isRequired(value) {
        return this.required && [undefined, null, ""].indexOf(value) > -1 && this.allowedRequiredValues.indexOf(value) === -1;
    }
    /**
     *
     * @returns {{service: (string|symbol), name: string, expression: string, required: boolean, use: undefined, baseType: undefined}}
     */
    toJSON() {
        return {
            service: core_1.nameOf(this._service),
            name: this.name,
            expression: this._expression,
            required: this._required,
            use: this.typeName,
            baseType: this.collectionName
        };
    }
}
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Object)
], ParamMetadata.prototype, "_expression", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Boolean)
], ParamMetadata.prototype, "_useConverter", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Boolean)
], ParamMetadata.prototype, "_useValidation", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Object)
], ParamMetadata.prototype, "_service", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Array)
], ParamMetadata.prototype, "_allowedRequiredValues", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", Boolean)
], ParamMetadata.prototype, "_required", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", String)
], ParamMetadata.prototype, "_paramType", void 0);
exports.ParamMetadata = ParamMetadata;

//# sourceMappingURL=ParamMetadata.js.map
