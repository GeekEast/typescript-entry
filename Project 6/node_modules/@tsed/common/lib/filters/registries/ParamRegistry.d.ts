import { Type } from "@tsed/core";
import { ParamMetadata } from "../class/ParamMetadata";
import { IInjectableParamSettings } from "../interfaces";
import { IParamArgs } from "../interfaces/Arguments";
export declare class ParamRegistry {
    /**
     *
     * @param target
     * @param targetKey
     * @param index
     * @returns {any}
     */
    static get(target: Type<any>, targetKey: string | symbol, index: number): ParamMetadata;
    /**
     *
     * @param target
     * @param targetKey
     * @returns {Array}
     */
    static getParams: (target: Type<any>, targetKey?: string | symbol | undefined) => ParamMetadata[];
    /**
     *
     * @param target
     * @param targetKey
     * @param index
     * @param injectParams
     */
    static set(target: Type<any>, targetKey: string | symbol, index: number, injectParams: ParamMetadata): void;
    /**
     *
     * @param service
     * @param settings
     */
    static usePreHandler(service: symbol, settings: IParamArgs<any>): typeof ParamRegistry;
    /**
     *
     * @param target
     * @param propertyKey
     * @param parameterIndex
     * @param allowedRequiredValues
     */
    static required(target: Type<any>, propertyKey: string | symbol, parameterIndex: number, allowedRequiredValues?: any[]): typeof ParamRegistry;
    /**
     * Create a parameters decorators
     * @param token
     * @param {Partial<IInjectableParamSettings<any>>} options
     * @returns {Function}
     */
    static decorate(token: Type<any> | symbol, options?: Partial<IInjectableParamSettings<any>>): ParameterDecorator;
    /**
     *
     * @param service
     * @param options
     */
    static useFilter(service: Type<any>, options: IInjectableParamSettings<any>): ParamMetadata;
}
