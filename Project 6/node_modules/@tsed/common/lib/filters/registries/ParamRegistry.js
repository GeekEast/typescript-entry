"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const ParamMetadata_1 = require("../class/ParamMetadata");
const constants_1 = require("../constants");
class ParamRegistry {
    /**
     *
     * @param target
     * @param targetKey
     * @param index
     * @returns {any}
     */
    static get(target, targetKey, index) {
        const params = this.getParams(target, targetKey);
        params[index] = params[index] || new ParamMetadata_1.ParamMetadata(target, targetKey, index);
        return params[index];
    }
    /**
     *
     * @param target
     * @param targetKey
     * @param index
     * @param injectParams
     */
    static set(target, targetKey, index, injectParams) {
        const params = core_1.Metadata.has(constants_1.PARAM_METADATA, target, targetKey) ? core_1.Metadata.get(constants_1.PARAM_METADATA, target, targetKey) : [];
        params[index] = injectParams;
        core_1.Metadata.set(constants_1.PARAM_METADATA, params, target, targetKey);
    }
    /**
     *
     * @param service
     * @param settings
     */
    static usePreHandler(service, settings) {
        const param = ParamRegistry.get(settings.target, settings.propertyKey, settings.parameterIndex);
        param.service = service;
        param.useConverter = false;
        ParamRegistry.set(settings.target, settings.propertyKey, settings.parameterIndex, param);
        return this;
    }
    /**
     *
     * @param target
     * @param propertyKey
     * @param parameterIndex
     * @param allowedRequiredValues
     */
    static required(target, propertyKey, parameterIndex, allowedRequiredValues = []) {
        const param = ParamRegistry.get(target, propertyKey, parameterIndex);
        param.required = true;
        param.allowedRequiredValues = allowedRequiredValues;
        ParamRegistry.set(target, propertyKey, parameterIndex, param);
        ParamRegistry.get(target, propertyKey, parameterIndex).store.merge("responses", {
            "400": {
                description: "BadRequest"
            }
        });
        return this;
    }
    /**
     * Create a parameters decorators
     * @param token
     * @param {Partial<IInjectableParamSettings<any>>} options
     * @returns {Function}
     */
    static decorate(token, options = {}) {
        return (target, propertyKey, parameterIndex) => {
            if (typeof parameterIndex === "number") {
                const settings = Object.assign({
                    target,
                    propertyKey,
                    parameterIndex
                }, options);
                if (typeof token === "symbol") {
                    ParamRegistry.usePreHandler(token, settings);
                }
                else {
                    ParamRegistry.useFilter(token, settings);
                }
            }
        };
    }
    /**
     *
     * @param service
     * @param options
     */
    static useFilter(service, options) {
        const { propertyKey, parameterIndex, target, useConverter, useValidation, paramType } = options;
        let { expression, useType } = options;
        const param = ParamRegistry.get(target, propertyKey, parameterIndex);
        if (typeof expression !== "string") {
            useType = expression;
            expression = undefined;
        }
        param.service = service;
        param.expression = expression;
        param.useValidation = !!useValidation;
        if (paramType) {
            param.paramType = paramType;
        }
        if (useType) {
            param.type = useType;
        }
        if (useConverter !== undefined) {
            param.useConverter = useConverter;
        }
        ParamRegistry.set(target, propertyKey, parameterIndex, param);
        return param;
    }
}
/**
 *
 * @param target
 * @param targetKey
 * @returns {Array}
 */
ParamRegistry.getParams = (target, targetKey) => core_1.Metadata.has(constants_1.PARAM_METADATA, target, targetKey) ? core_1.Metadata.get(constants_1.PARAM_METADATA, target, targetKey) : [];
exports.ParamRegistry = ParamRegistry;

//# sourceMappingURL=ParamRegistry.js.map
