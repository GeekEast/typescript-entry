{"version":3,"sources":["filters/registries/FilterRegistry.ts"],"names":[],"mappings":";;AAAA,iCAAyF;AAGzF;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,cAAc,GAA2B,oBAAe,CAAC,cAAc,CAAC,iBAAY,CAAC,MAAM,EAAE,aAAQ,EAAE;IAClH,UAAU,EAAE,IAAI;CACjB,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACU,QAAA,cAAc,GAAG,oBAAe,CAAC,gBAAgB,CAAC,iBAAY,CAAC,MAAM,CAAC,CAAC;AACpF;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,iBAAiB,GAAmC,IAAI,GAAG,EAAE,CAAC","file":"FilterRegistry.js","sourcesContent":["import {Provider, ProviderType, TypedProvidersRegistry, GlobalProviders} from \"@tsed/di\";\nimport {IFilterPreHandler} from \"../interfaces/IFilterPreHandler\";\n\n/**\n *\n * @type {Registry<Provider, IProvider<any>>}\n */\n// tslint:disable-next-line: variable-name\nexport const FilterRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.FILTER, Provider, {\n  injectable: true\n});\n\n/**\n * Add a new filter in the `ProviderRegistry`. This filter will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerFilter, InjectorService} from \"@tsed/common\";\n *\n * export default class MyFooFilter {\n *     constructor(){}\n *     transform() {\n *         return \"test\";\n *     }\n * }\n *\n * registerFilter({provide: MyFooService});\n * // or\n * registerFilter(MyFooService);\n *\n * const injector = new InjectorService();\n *\n * const myFooService = injector.get<MyFooFilter>(MyFooFilter);\n * myFooFilter.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerFilter = GlobalProviders.createRegisterFn(ProviderType.FILTER);\n/**\n *\n * @type {Map<any, any>}\n */\n// tslint:disable-next-line: variable-name\nexport const FilterPreHandlers: Map<symbol, IFilterPreHandler> = new Map();\n"],"sourceRoot":"../../../src"}