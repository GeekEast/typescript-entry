{"version":3,"sources":["filters/errors/ParseExpressionError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,mBAAmB,CAAC;AAE7C;;GAEG;AACH,qBAAa,oBAAqB,SAAQ,UAAU;IAClD,QAAQ,EAAE,MAAM,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,YAAY,EAAE,MAAM,CAAC;IACrB,MAAM,EAAE,KAAK,CAAC;gBAEF,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS,EAAE,GAAG,GAAE,GAAQ;IAQhF;;;;;;OAMG;IACH,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS,EAAE,OAAO,CAAC,EAAE,MAAM;CAK5F","file":"ParseExpressionError.d.ts","sourcesContent":["import {BadRequest} from \"ts-httpexceptions\";\n\n/**\n * @private\n */\nexport class ParseExpressionError extends BadRequest {\n  dataPath: string;\n  requestType: string;\n  errorMessage: string;\n  origin: Error;\n\n  constructor(name: string, expression: string | RegExp | undefined, err: any = {}) {\n    super(ParseExpressionError.buildMessage(name, expression, err.message));\n    this.errorMessage = this.message;\n    this.dataPath = String(expression) || \"\";\n    this.requestType = name;\n    this.origin! = err.origin || err;\n  }\n\n  /**\n   *\n   * @param name\n   * @param expression\n   * @param message\n   * @returns {string}\n   */\n  static buildMessage(name: string, expression: string | RegExp | undefined, message?: string) {\n    name = name.toLowerCase().replace(/parse|params|filter/gi, \"\");\n\n    return `Bad request on parameter \"request.${name}${expression ? \".\" + expression : \"\"}\".\\n${message}`.trim();\n  }\n}\n"],"sourceRoot":"../../../src"}