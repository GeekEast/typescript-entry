{"version":3,"sources":["filters/errors/RequiredParamError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,mBAAmB,CAAC;AAE7C,qBAAa,kBAAmB,SAAQ,UAAU;IAChD,MAAM,EAAE,GAAG,EAAE,CAAC;gBAEF,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,GAAG,MAAM;IAkBrD;;;;;OAKG;IACH,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM;CAKrD","file":"RequiredParamError.d.ts","sourcesContent":["import {BadRequest} from \"ts-httpexceptions\";\n\nexport class RequiredParamError extends BadRequest {\n  errors: any[];\n\n  constructor(name: string, expression: string | RegExp) {\n    super(RequiredParamError.buildMessage(name, \"\" + expression));\n    const type = name.toLowerCase().replace(/parse|params|filter/gi, \"\");\n\n    this.errors = [\n      {\n        dataPath: \"\",\n        keyword: \"required\",\n        message: `should have required param '${expression}'`,\n        modelName: type,\n        params: {\n          missingProperty: expression\n        },\n        schemaPath: \"#/required\"\n      }\n    ];\n  }\n\n  /**\n   *\n   * @param name\n   * @param expression\n   * @returns {string}\n   */\n  static buildMessage(name: string, expression: string) {\n    name = name.toLowerCase().replace(/parse|params|filter/gi, \"\");\n\n    return `Bad request, parameter \"request.${name}.${expression}\" is required.`;\n  }\n}\n"],"sourceRoot":"../../../src"}