import { InjectorService } from "@tsed/di";
import { Req, Res } from "../../filters";
import { IMiddleware } from "../../mvc";
/**
 * @middleware
 */
export declare class LogIncomingRequestMiddleware implements IMiddleware {
    protected injector: InjectorService;
    protected static DEFAULT_FIELDS: string[];
    constructor(injector: InjectorService);
    /**
     * Handle the request.
     * @param {e.Request} request
     */
    use(request: Req): void;
    $onResponse(request: Req, response: Res): void;
    /**
     * The separate onLogStart() function will allow developer to overwrite the initial request log.
     * @param {e.Request} request
     */
    protected onLogStart(request: Req): void;
    /**
     * Called when the `$onResponse` is called by Ts.ED (through Express.end).
     * @param request
     * @param response
     */
    protected onLogEnd(request: Req, response: Res): void;
    /**
     * Attach all information that will be necessary to log the request. Attach a new `request.log` object.
     * @param request
     */
    protected configureRequest(request: Req): void;
    /**
     * Return complete request info.
     * @param request
     * @returns {Object}
     */
    protected requestToObject(request: Req): any;
    /**
     * Return a filtered request from global configuration.
     * @param request
     * @returns {Object}
     */
    protected minimalRequestPicker(request: Req): any;
}
