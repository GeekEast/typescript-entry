"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const core_1 = require("@tsed/core");
const globby = require("globby");
const Path = require("path");
const config_1 = require("../../config");
const GlobalErrorHandlerMiddleware_1 = require("../components/GlobalErrorHandlerMiddleware");
const LogIncomingRequestMiddleware_1 = require("../components/LogIncomingRequestMiddleware");
const expressApplication_1 = require("../decorators/expressApplication");
const httpServer_1 = require("../decorators/httpServer");
const httpsServer_1 = require("../decorators/httpsServer");
const contextMiddleware_1 = require("../utils/contextMiddleware");
/**
 * ServerLoader provider all method to instantiate an ExpressServer.
 *
 * It provide some features :
 *
 * * [Lifecycle hooks](/docs/server-loader.md#lifecycle-hooks),
 * * Middleware importation,
 * * Scan directory. You can specify controllers and services directory in your project,
 *
 * ```typescript
 * // In server.ts
 * import {ServerLoader, ServerSettings} from "@tsed/common";
 * import Path = require("path");
 * @ServerSettings({
 *    rootDir: Path.resolve(__dirname),
 *    port: 8000,
 *    httpsPort: 8080,
 *    mount: {
 *      "/rest": "${rootDir}/controllers/**\/*.js"
 *    }
 * })
 * export class Server extends ServerLoader {
 *
 *     $onReady(){
 *         console.log('Server started...');
 *     }
 *
 *     $onServerInitError(err){
 *         console.error(err);
 *     }
 * }
 *
 * // In app.ts
 * import Server from "./server";
 * new Server()
 *     .start()
 *     .then(() => console.log('started'))
 *     .catch(er => console.error(er));
 *
 * ```
 *
 */
class ServerLoader {
    /**
     *
     */
    constructor() {
        this.version = "5.20.1";
        this._components = [];
        this._scannedPromises = [];
        this.callHook = (key, elseFn = new Function(), ...args) => {
            const self = this;
            if (key in this) {
                this.injector.logger.debug(`\x1B[1mCall hook ${key}\x1B[22m`);
                return self[key](...args);
            }
            return elseFn();
        };
        this.init();
    }
    /**
     * Return the injectorService initialized by the server.
     * @returns {InjectorService}
     */
    get injector() {
        return this._injector;
    }
    /**
     * Return the settings configured by the decorator @@ServerSettings@@.
     *
     * ```typescript
     * @ServerSettings({
     *    rootDir: Path.resolve(__dirname),
     *    port: 8000,
     *    httpsPort: 8080,
     *    mount: {
     *      "/rest": "${rootDir}/controllers/**\/*.js"
     *    }
     * })
     * export class Server extends ServerLoader {
     *     $onInit(){
     *         console.log(this.settings); // {rootDir, port, httpsPort,...}
     *     }
     * }
     * ```
     *
     * @returns {ServerSettingsService}
     */
    get settings() {
        return this.injector.settings;
    }
    /**
     * Return Express Application instance.
     * @returns {core.Express}
     */
    get expressApp() {
        return this.injector.get(expressApplication_1.ExpressApplication);
    }
    /**
     * Return the InjectorService initialized by the server.
     * @returns {InjectorService}
     * @deprecated
     */
    get injectorService() {
        return this._injector;
    }
    /**
     * Return Http.Server instance.
     * @returns {Http.Server}
     */
    get httpServer() {
        return this.injector.get(httpServer_1.HttpServer);
    }
    /**
     * Return Https.Server instance.
     * @returns {Https.Server}
     */
    get httpsServer() {
        return this.injector.get(httpsServer_1.HttpsServer);
    }
    /**
     *
     * @returns {any}
     * @param files
     * @param excludes
     */
    static cleanGlobPatterns(files, excludes) {
        excludes = excludes.map((s) => "!" + s.replace(/!/gi, ""));
        return []
            .concat(files)
            .map((file) => {
            if (!require.extensions[".ts"]) {
                file = file.replace(/\.ts$/i, ".js");
            }
            return Path.resolve(file);
        })
            .concat(excludes);
    }
    /**
     * Create a new HTTP server with the provided `port`.
     * @returns {ServerLoader}
     * @deprecated
     */
    // istanbul ignore next
    createHttpServer(port) {
        this.settings.httpPort = port;
        return this;
    }
    /**
     * Create a new HTTPs server.
     *
     * `options` {IHTTPSServerOptions}:
     *
     * - `port` &lt;number&gt;: Port number,
     * - `key` &lt;string&gt; | &lt;string[]&gt; | [&lt;Buffer&gt;](https://nodejs.org/api/buffer.html#buffer_class_buffer) | &lt;Object[]&gt;: The private key of the server in PEM format. To support multiple keys using different algorithms an array can be provided either as a plain array of key strings or an array of objects in the format `{pem: key, passphrase: passphrase}`. This option is required for ciphers that make use of private keys.
     * - `passphrase` &lt;string&gt; A string containing the passphrase for the private key or pfx.
     * - `cert` &lt;string&gt; | &lt;string[]&gt; | [&lt;Buffer&gt;](https://nodejs.org/api/buffer.html#buffer_class_buffer) | [&lt;Buffer[]&gt;](https://nodejs.org/api/buffer.html#buffer_class_buffer): A string, Buffer, array of strings, or array of Buffers containing the certificate key of the server in PEM format. (Required)
     * - `ca` &lt;string&gt; | &lt;string[]&gt; | [&lt;Buffer&gt;](https://nodejs.org/api/buffer.html#buffer_class_buffer) | [&lt;Buffer[]&gt;](https://nodejs.org/api/buffer.html#buffer_class_buffer): A string, Buffer, array of strings, or array of Buffers of trusted certificates in PEM format. If this is omitted several well known "root" CAs (like VeriSign) will be used. These are used to authorize connections.
     *
     * See more info on [httpsOptions](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener).
     *
     * @param options Options to create new HTTPS server.
     * @returns {ServerLoader}
     * @deprecated
     */
    // istanbul ignore next
    createHttpsServer(options) {
        this.settings.httpsPort = options.port;
        return this;
    }
    /**
     * Init injector with minimal configuration
     */
    init() {
        const settings = config_1.ServerSettingsService.getMetadata(this);
        this._injector = /* await */ common_1.createInjector(settings);
        if (settings) {
            this.setSettings(settings);
        }
        /* await */
        common_1.createExpressApplication(this.injector);
        /* await */
        common_1.createHttpsServer(this.injector);
        /* await */
        common_1.createHttpServer(this.injector);
    }
    /**
     * This method let you to add a express middleware or a Ts.ED middleware like GlobalAcceptMimes.
     *
     * ```typescript
     * @ServerSettings({
     *    rootDir,
     *    acceptMimes: ['application/json'] // optional
     * })
     * export class Server extends ServerLoader {
     *     $onMountingMiddlewares(): void|Promise<any> {
     *         const methodOverride = require('method-override');
     *
     *         this.use(GlobalAcceptMimesMiddleware)
     *             .use(methodOverride());
     *
     *         // similar to
     *         this.expressApp.use(methodOverride());
     *
     *         // but not similar to
     *         this.expressApp.use(GlobalAcceptMimesMiddleware); // in this case, this middleware will not be added correctly to express.
     *
     *         return null;
     *     }
     * }
     * ```
     * @param args
     * @returns {ServerLoader}
     */
    use(...args) {
        this.expressApp.use(...args);
        return this;
    }
    /**
     * Proxy to express set
     * @param setting
     * @param val
     * @returns {ServerLoader}
     */
    set(setting, val) {
        this.expressApp.set(setting, val);
        return this;
    }
    /**
     * Proxy to express engine
     * @param ext
     * @param fn
     * @returns {ServerLoader}
     */
    engine(ext, fn) {
        this.expressApp.engine(ext, fn);
        return this;
    }
    /**
     * Start the express server.
     * @returns {Promise<any>|Promise}
     */
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const start = new Date();
                yield this.loadSettingsAndInjector();
                yield this.loadMiddlewares();
                yield this.startServers();
                yield this.callHook("$onReady");
                yield this.injector.emit("$onServerReady");
                this.injector.logger.info(`Started in ${new Date().getTime() - start.getTime()} ms`);
            }
            catch (err) {
                this.callHook("$onServerInitError", undefined, err);
                return Promise.reject(err);
            }
        });
    }
    /**
     * Scan and imports all files matching the pattern. See the document on the [Glob](https://www.npmjs.com/package/glob)
     * pattern for more information.
     *
     * #### Example
     *
     * ```typescript
     * import {ServerLoader} from "@tsed/common";
     * import Path = require("path");
     *
     * export class Server extends ServerLoader {
     *
     *    constructor() {
     *        super();
     *
     *        let appPath = Path.resolve(__dirname);
     *
     *        this.scan(appPath + "/controllers/**\/**.js")
     *   }
     * }
     * ```
     *
     * Theses pattern scan all files in the directories controllers, services recursively.
     *
     * !> On windows on can have an issue with the Glob pattern and the /. To solve it, build your path pattern with the module Path.
     *
     * ```typescript
     * const controllerPattern = Path.join(rootDir, 'controllers','**','*.js');
     * ```
     *
     * @param patterns
     * @param endpoint
     * @returns {ServerLoader}
     */
    scan(patterns, endpoint) {
        const promises = globby.sync(ServerLoader.cleanGlobPatterns(patterns, this.settings.exclude)).map((file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.injector.logger.debug(`Import file ${endpoint}:`, file);
            try {
                const classes = yield Promise.resolve().then(() => require(file));
                this.addComponents(classes, { endpoint });
            }
            catch (er) {
                /* istanbul ignore next */
                this.injector.logger.error(er);
                /* istanbul ignore next */
                process.exit(-1);
            }
        }));
        this._scannedPromises = this._scannedPromises.concat(promises);
        return this;
    }
    /**
     * Add classes to the components list
     * @param classes
     * @param options
     */
    addComponents(classes, options = {}) {
        classes = Object.keys(classes)
            .map(key => classes[key])
            .filter(clazz => core_1.isClass(clazz));
        const components = Object.assign(options, {
            classes
        });
        this._components = (this._components || []).concat([components]).filter(o => !!o);
        return this;
    }
    /**
     * Add classes decorated by `@Controller()` to components container.
     *
     * ### Example
     *
     * ```typescript
     * @Controller('/ctrl')
     * class MyController{
     * }
     *
     * new ServerLoader().addControllers('/rest', [MyController])
     * ```
     *
     * ::: tip
     * If the MyController class isn't decorated, the class will be ignored.
     * :::
     *
     * @param {string} endpoint
     * @param {any[]} controllers
     * @returns {ServerLoader}
     */
    addControllers(endpoint, controllers) {
        return this.addComponents(controllers, { endpoint });
    }
    /**
     * Mount all controllers files that match with `globPattern` ([Glob Pattern](https://www.npmjs.com/package/glob))
     * under the endpoint. See [Versioning Rest API](/docs/server-loader.md#versioning) for more information.
     * @param endpoint
     * @param list
     * @returns {ServerLoader}
     */
    mount(endpoint, list) {
        const patterns = [].concat(list).filter((item) => {
            if (core_1.isClass(item)) {
                this.addControllers(endpoint, [item]);
                return false;
            }
            return true;
        });
        this.scan(patterns, endpoint);
        return this;
    }
    /**
     *
     * @returns {Promise<void>}
     */
    loadSettingsAndInjector() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const level = this.settings.logger.level;
            /* istanbul ignore next */
            if (level && this.settings.env !== "test") {
                this.injector.logger.level = level;
            }
            yield Promise.all(this._scannedPromises);
            yield this.callHook("$onInit");
            this.injector.logger.debug("Initialize settings");
            this.settings.forEach((value, key) => {
                this.injector.logger.info(`settings.${key} =>`, value);
            });
            this.injector.logger.info("Build services");
            yield this.injector.load();
            this.injector.logger.debug("Settings and injector loaded");
        });
    }
    /**
     * Create a new server from settings parameters.
     * @param http
     * @param settings
     * @returns {Promise<TResult2|TResult1>}
     */
    startServer(http, settings) {
        const { address, port, https } = settings;
        this.injector.logger.debug(`Start server on ${https ? "https" : "http"}://${settings.address}:${settings.port}`);
        const promise = new Promise((resolve, reject) => {
            http.on("listening", resolve).on("error", reject);
        }).then(() => {
            const port = http.address().port;
            this.injector.logger.info(`HTTP Server listen on ${https ? "https" : "http"}://${settings.address}:${port}`);
            return { address: settings.address, port };
        });
        http.listen(port, address);
        return promise;
    }
    /**
     * Initialize configuration of the express app.
     */
    loadMiddlewares() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.injector.logger.debug("Mount middlewares");
            this.use(contextMiddleware_1.contextMiddleware(this.injector));
            this.use(LogIncomingRequestMiddleware_1.LogIncomingRequestMiddleware);
            yield this.callHook("$onMountingMiddlewares", undefined, this.expressApp);
            yield this.injector.emit("$beforeRoutesInit");
            yield this.injector.emit("$onRoutesInit", this._components);
            delete this._components; // free memory
            yield this.injector.emit("$afterRoutesInit");
            yield this.callHook("$afterRoutesInit", undefined, this.expressApp);
            // Import the globalErrorHandler
            this.use(GlobalErrorHandlerMiddleware_1.GlobalErrorHandlerMiddleware);
        });
    }
    /**
     *
     */
    setSettings(settings) {
        this.settings.set(settings);
        /* istanbul ignore next */
        if (this.settings.env === "test") {
            this.injector.logger.stop();
        }
        const bind = (property, value, map) => {
            switch (property) {
                case "mount":
                    Object.keys(this.settings.mount).forEach(key => this.mount(key, value[key]));
                    break;
                case "componentsScan":
                    this.settings.componentsScan.forEach(componentDir => this.scan(componentDir));
                    break;
            }
        };
        this.settings.forEach((value, key, map) => {
            /* istanbul ignore else */
            if (value !== undefined) {
                bind(key, value, map);
            }
        });
    }
    /**
     * Initiliaze all servers.
     * @returns {Promise<any>}
     */
    startServers() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const promises = [];
            /* istanbul ignore else */
            if (this.settings.httpPort !== false) {
                const settings = this.settings.getHttpPort();
                promises.push(this.startServer(this.httpServer, Object.assign({ https: false }, settings)).then(settings => {
                    this.settings.setHttpPort(settings);
                }));
            }
            /* istanbul ignore else */
            if (this.settings.httpsPort !== false) {
                const settings = this.settings.getHttpsPort();
                promises.push(this.startServer(this.httpsServer, Object.assign({ https: true }, settings)).then(settings => {
                    this.settings.setHttpsPort(settings);
                }));
            }
            return Promise.all(promises);
        });
    }
}
exports.ServerLoader = ServerLoader;

//# sourceMappingURL=ServerLoader.js.map
