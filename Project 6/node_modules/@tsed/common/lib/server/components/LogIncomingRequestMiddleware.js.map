{"version":3,"sources":["server/components/LogIncomingRequestMiddleware.ts"],"names":[],"mappings":"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","file":"LogIncomingRequestMiddleware.js","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport {Req, Res} from \"../../filters\";\nimport {IMiddleware, Middleware, RequestLogger} from \"../../mvc\";\n\n/**\n * @middleware\n */\n@Middleware()\nexport class LogIncomingRequestMiddleware implements IMiddleware {\n  protected static DEFAULT_FIELDS = [\"reqId\", \"method\", \"url\", \"duration\"];\n\n  // tslint:disable-next-line: no-unused-variable\n  constructor(protected injector: InjectorService) {}\n\n  /**\n   * Handle the request.\n   * @param {e.Request} request\n   */\n  public use(@Req() request: Req): void {\n    this.configureRequest(request);\n    this.onLogStart(request);\n  }\n\n  $onResponse(request: Req, response: Res) {\n    this.onLogEnd(request, response);\n  }\n\n  /**\n   * The separate onLogStart() function will allow developer to overwrite the initial request log.\n   * @param {e.Request} request\n   */\n  protected onLogStart(request: Req) {\n    const {debug, logRequest} = this.injector.settings.logger;\n\n    if (request.log) {\n      if (debug) {\n        request.log.debug({\n          event: \"request.start\"\n        });\n      } else if (logRequest) {\n        request.log.info({\n          event: \"request.start\"\n        });\n      }\n    }\n  }\n\n  /**\n   * Called when the `$onResponse` is called by Ts.ED (through Express.end).\n   * @param request\n   * @param response\n   */\n  protected onLogEnd(request: Req, response: Res) {\n    const {debug, logRequest} = this.injector.settings.logger;\n\n    if (request.log) {\n      if (debug) {\n        request.log.debug({\n          event: \"request.end\",\n          status: response.statusCode,\n          data: request.ctx.data\n        });\n      } else if (logRequest) {\n        request.log.info({\n          event: \"request.end\",\n          status: response.statusCode\n        });\n      }\n\n      request.log.flush();\n    }\n  }\n\n  /**\n   * Attach all information that will be necessary to log the request. Attach a new `request.log` object.\n   * @param request\n   */\n  protected configureRequest(request: Req) {\n    const {ignoreUrlPatterns = []} = this.injector.settings.logger;\n\n    const minimalInfo = this.minimalRequestPicker(request);\n    const requestObj = this.requestToObject(request);\n\n    request.log = new RequestLogger(this.injector.logger, {\n      id: request.ctx.id,\n      startDate: request.ctx.dateStart,\n      url: request.originalUrl || request.url,\n      ignoreUrlPatterns,\n      minimalRequestPicker: (obj: any) => ({...minimalInfo, ...obj}),\n      completeRequestPicker: (obj: any) => ({...requestObj, ...obj})\n    });\n  }\n\n  /**\n   * Return complete request info.\n   * @param request\n   * @returns {Object}\n   */\n  protected requestToObject(request: Req): any {\n    return {\n      method: request.method,\n      url: request.originalUrl || request.url,\n      headers: request.headers,\n      body: request.body,\n      query: request.query,\n      params: request.params\n    };\n  }\n\n  /**\n   * Return a filtered request from global configuration.\n   * @param request\n   * @returns {Object}\n   */\n  protected minimalRequestPicker(request: Req): any {\n    const {fields = LogIncomingRequestMiddleware.DEFAULT_FIELDS} = this.injector.settings.logger;\n    const info = this.requestToObject(request);\n\n    return fields.reduce((acc: any, key: string) => {\n      acc[key] = info[key];\n\n      return acc;\n    }, {});\n  }\n}\n"],"sourceRoot":"../../../src"}