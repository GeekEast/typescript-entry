{"version":3,"sources":["server/components/GlobalErrorHandlerMiddleware.ts"],"names":[],"mappings":";;;AAAA,iCAAkC;AAElC,yDAA4C;AAC5C,2CAA4C;AAC5C,mCAAuE;AAEvE;;GAEG;AAEH,IAAa,4BAA4B,GAAzC,MAAa,4BAA4B;IAIvC,GAAG,CAAQ,KAAU,EAAS,OAAY,EAAS,QAAa;QAC9D,MAAM,MAAM,GAAG,CAAC,OAAO,GAAG,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEnE,IAAI,KAAK,YAAY,6BAAS,IAAI,KAAK,CAAC,MAAM,EAAE;YAC9C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;gBAChB,KAAK,EAAE;oBACL,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,KAAK,EAAE,KAAK,CAAC,KAAK;oBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;oBACpB,MAAM,EAAE,KAAK,CAAC,MAAM;iBACrB;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;YAE/C,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAE1D,OAAO;SACR;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAEzC,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;YAChB,KAAK,EAAE;gBACL,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;aACrB;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAE/C,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAE5D,OAAO;IACT,CAAC;IAED,UAAU,CAAC,QAA0B,EAAE,GAAG,IAAsB;QAC9D,IAAI,OAAO,GAAQ,EAAE,CAAC;QAEtB,IAAI;aACD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;aAChB,OAAO,CAAC,CAAC,EAAC,OAAO,EAAE,MAAM,EAAiB,EAAE,EAAE;YAC7C,IAAI,OAAO,EAAE;gBACX,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACvB;YAED,IAAI,MAAM,EAAE;gBACV,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;QAEL,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;CACF,CAAA;AA/DC;IADC,aAAQ,CAAC,mBAAmB,EAAE,QAAQ,CAAC;;gEACX;AAE7B;IAAK,mBAAA,aAAG,EAAE,CAAA,EAAc,mBAAA,aAAG,EAAE,CAAA,EAAgB,mBAAA,aAAG,EAAE,CAAA;;;;uDAwCjD;AA5CU,4BAA4B;IADxC,gBAAU,EAAE;GACA,4BAA4B,CAiExC;AAjEY,oEAA4B","file":"GlobalErrorHandlerMiddleware.js","sourcesContent":["import {Constant} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {Exception} from \"ts-httpexceptions\";\nimport {Err, Req, Res} from \"../../filters\";\nimport {IMiddlewareError, IResponseError, Middleware} from \"../../mvc\";\n\n/**\n * @middleware\n */\n@Middleware()\nexport class GlobalErrorHandlerMiddleware implements IMiddlewareError {\n  @Constant(\"errors.headerName\", \"errors\")\n  protected headerName: string;\n\n  use(@Err() error: any, @Req() request: Req, @Res() response: Res): any {\n    const toHTML = (message = \"\") => message.replace(/\\n/gi, \"<br />\");\n\n    if (error instanceof Exception || error.status) {\n      request.log.error({\n        error: {\n          message: error.message,\n          stack: error.stack,\n          status: error.status,\n          origin: error.origin\n        }\n      });\n\n      this.setHeaders(response, error, error.origin);\n\n      response.status(error.status).send(toHTML(error.message));\n\n      return;\n    }\n\n    if (typeof error === \"string\") {\n      response.status(404).send(toHTML(error));\n\n      return;\n    }\n\n    request.log.error({\n      error: {\n        status: 500,\n        message: error.message,\n        stack: error.stack,\n        origin: error.origin\n      }\n    });\n\n    this.setHeaders(response, error, error.origin);\n\n    response.status(error.status || 500).send(\"Internal Error\");\n\n    return;\n  }\n\n  setHeaders(response: Express.Response, ...args: IResponseError[]) {\n    let hErrors: any = [];\n\n    args\n      .filter(o => !!o)\n      .forEach(({headers, errors}: IResponseError) => {\n        if (headers) {\n          response.set(headers);\n        }\n\n        if (errors) {\n          hErrors = hErrors.concat(errors);\n        }\n      });\n\n    if (hErrors.length) {\n      response.set(this.headerName, JSON.stringify(hErrors));\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}