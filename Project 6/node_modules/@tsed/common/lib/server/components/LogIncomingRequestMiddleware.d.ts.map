{"version":3,"sources":["server/components/LogIncomingRequestMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAC,MAAM,UAAU,CAAC;AACzC,OAAO,EAAC,GAAG,EAAE,GAAG,EAAC,MAAM,eAAe,CAAC;AACvC,OAAO,EAAC,WAAW,EAA4B,MAAM,WAAW,CAAC;AAEjE;;GAEG;AACH,qBACa,4BAA6B,YAAW,WAAW;IAIlD,SAAS,CAAC,QAAQ,EAAE,eAAe;IAH/C,SAAS,CAAC,MAAM,CAAC,cAAc,WAA0C;gBAGnD,QAAQ,EAAE,eAAe;IAE/C;;;OAGG;IACI,GAAG,CAAQ,OAAO,EAAE,GAAG,GAAG,IAAI;IAKrC,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAIvC;;;OAGG;IACH,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG;IAgBjC;;;;OAIG;IACH,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAqB9C;;;OAGG;IACH,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG;IAgBvC;;;;OAIG;IACH,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,GAAG,GAAG,GAAG;IAW5C;;;;OAIG;IACH,SAAS,CAAC,oBAAoB,CAAC,OAAO,EAAE,GAAG,GAAG,GAAG;CAUlD","file":"LogIncomingRequestMiddleware.d.ts","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport {Req, Res} from \"../../filters\";\nimport {IMiddleware, Middleware, RequestLogger} from \"../../mvc\";\n\n/**\n * @middleware\n */\n@Middleware()\nexport class LogIncomingRequestMiddleware implements IMiddleware {\n  protected static DEFAULT_FIELDS = [\"reqId\", \"method\", \"url\", \"duration\"];\n\n  // tslint:disable-next-line: no-unused-variable\n  constructor(protected injector: InjectorService) {}\n\n  /**\n   * Handle the request.\n   * @param {e.Request} request\n   */\n  public use(@Req() request: Req): void {\n    this.configureRequest(request);\n    this.onLogStart(request);\n  }\n\n  $onResponse(request: Req, response: Res) {\n    this.onLogEnd(request, response);\n  }\n\n  /**\n   * The separate onLogStart() function will allow developer to overwrite the initial request log.\n   * @param {e.Request} request\n   */\n  protected onLogStart(request: Req) {\n    const {debug, logRequest} = this.injector.settings.logger;\n\n    if (request.log) {\n      if (debug) {\n        request.log.debug({\n          event: \"request.start\"\n        });\n      } else if (logRequest) {\n        request.log.info({\n          event: \"request.start\"\n        });\n      }\n    }\n  }\n\n  /**\n   * Called when the `$onResponse` is called by Ts.ED (through Express.end).\n   * @param request\n   * @param response\n   */\n  protected onLogEnd(request: Req, response: Res) {\n    const {debug, logRequest} = this.injector.settings.logger;\n\n    if (request.log) {\n      if (debug) {\n        request.log.debug({\n          event: \"request.end\",\n          status: response.statusCode,\n          data: request.ctx.data\n        });\n      } else if (logRequest) {\n        request.log.info({\n          event: \"request.end\",\n          status: response.statusCode\n        });\n      }\n\n      request.log.flush();\n    }\n  }\n\n  /**\n   * Attach all information that will be necessary to log the request. Attach a new `request.log` object.\n   * @param request\n   */\n  protected configureRequest(request: Req) {\n    const {ignoreUrlPatterns = []} = this.injector.settings.logger;\n\n    const minimalInfo = this.minimalRequestPicker(request);\n    const requestObj = this.requestToObject(request);\n\n    request.log = new RequestLogger(this.injector.logger, {\n      id: request.ctx.id,\n      startDate: request.ctx.dateStart,\n      url: request.originalUrl || request.url,\n      ignoreUrlPatterns,\n      minimalRequestPicker: (obj: any) => ({...minimalInfo, ...obj}),\n      completeRequestPicker: (obj: any) => ({...requestObj, ...obj})\n    });\n  }\n\n  /**\n   * Return complete request info.\n   * @param request\n   * @returns {Object}\n   */\n  protected requestToObject(request: Req): any {\n    return {\n      method: request.method,\n      url: request.originalUrl || request.url,\n      headers: request.headers,\n      body: request.body,\n      query: request.query,\n      params: request.params\n    };\n  }\n\n  /**\n   * Return a filtered request from global configuration.\n   * @param request\n   * @returns {Object}\n   */\n  protected minimalRequestPicker(request: Req): any {\n    const {fields = LogIncomingRequestMiddleware.DEFAULT_FIELDS} = this.injector.settings.logger;\n    const info = this.requestToObject(request);\n\n    return fields.reduce((acc: any, key: string) => {\n      acc[key] = info[key];\n\n      return acc;\n    }, {});\n  }\n}\n"],"sourceRoot":"../../../src"}