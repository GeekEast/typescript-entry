"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
var LogIncomingRequestMiddleware_1;
const di_1 = require("@tsed/di");
const filters_1 = require("../../filters");
const mvc_1 = require("../../mvc");
/**
 * @middleware
 */
let LogIncomingRequestMiddleware = LogIncomingRequestMiddleware_1 = class LogIncomingRequestMiddleware {
    // tslint:disable-next-line: no-unused-variable
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * Handle the request.
     * @param {e.Request} request
     */
    use(request) {
        this.configureRequest(request);
        this.onLogStart(request);
    }
    $onResponse(request, response) {
        this.onLogEnd(request, response);
    }
    /**
     * The separate onLogStart() function will allow developer to overwrite the initial request log.
     * @param {e.Request} request
     */
    onLogStart(request) {
        const { debug, logRequest } = this.injector.settings.logger;
        if (request.log) {
            if (debug) {
                request.log.debug({
                    event: "request.start"
                });
            }
            else if (logRequest) {
                request.log.info({
                    event: "request.start"
                });
            }
        }
    }
    /**
     * Called when the `$onResponse` is called by Ts.ED (through Express.end).
     * @param request
     * @param response
     */
    onLogEnd(request, response) {
        const { debug, logRequest } = this.injector.settings.logger;
        if (request.log) {
            if (debug) {
                request.log.debug({
                    event: "request.end",
                    status: response.statusCode,
                    data: request.ctx.data
                });
            }
            else if (logRequest) {
                request.log.info({
                    event: "request.end",
                    status: response.statusCode
                });
            }
            request.log.flush();
        }
    }
    /**
     * Attach all information that will be necessary to log the request. Attach a new `request.log` object.
     * @param request
     */
    configureRequest(request) {
        const { ignoreUrlPatterns = [] } = this.injector.settings.logger;
        const minimalInfo = this.minimalRequestPicker(request);
        const requestObj = this.requestToObject(request);
        request.log = new mvc_1.RequestLogger(this.injector.logger, {
            id: request.ctx.id,
            startDate: request.ctx.dateStart,
            url: request.originalUrl || request.url,
            ignoreUrlPatterns,
            minimalRequestPicker: (obj) => (Object.assign({}, minimalInfo, obj)),
            completeRequestPicker: (obj) => (Object.assign({}, requestObj, obj))
        });
    }
    /**
     * Return complete request info.
     * @param request
     * @returns {Object}
     */
    requestToObject(request) {
        return {
            method: request.method,
            url: request.originalUrl || request.url,
            headers: request.headers,
            body: request.body,
            query: request.query,
            params: request.params
        };
    }
    /**
     * Return a filtered request from global configuration.
     * @param request
     * @returns {Object}
     */
    minimalRequestPicker(request) {
        const { fields = LogIncomingRequestMiddleware_1.DEFAULT_FIELDS } = this.injector.settings.logger;
        const info = this.requestToObject(request);
        return fields.reduce((acc, key) => {
            acc[key] = info[key];
            return acc;
        }, {});
    }
};
LogIncomingRequestMiddleware.DEFAULT_FIELDS = ["reqId", "method", "url", "duration"];
tslib_1.__decorate([
    tslib_1.__param(0, filters_1.Req()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], LogIncomingRequestMiddleware.prototype, "use", null);
LogIncomingRequestMiddleware = LogIncomingRequestMiddleware_1 = tslib_1.__decorate([
    mvc_1.Middleware(),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService])
], LogIncomingRequestMiddleware);
exports.LogIncomingRequestMiddleware = LogIncomingRequestMiddleware;

//# sourceMappingURL=LogIncomingRequestMiddleware.js.map
