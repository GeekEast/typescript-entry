{"version":3,"sources":["server/utils/createExpressApplication.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAkC,MAAM,cAAc,CAAC;AAK9E,wBAA4B,wBAAwB,CAAC,QAAQ,EAAE,eAAe,GAAG,IAAI,CAGpF","file":"createExpressApplication.d.ts","sourcesContent":["import {InjectorService, ProviderScope, registerProvider} from \"@tsed/common\";\nimport * as Express from \"express\";\nimport {HandlerBuilder} from \"../../mvc\";\nimport {ExpressApplication} from \"../decorators/expressApplication\";\n\nexport /* async */ function createExpressApplication(injector: InjectorService): void {\n  /* await */\n  injector.forkProvider(ExpressApplication);\n}\n\nregisterProvider({\n  provide: ExpressApplication,\n  deps: [InjectorService],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(injector: InjectorService) {\n    const expressApp = Express();\n    const originalUse = expressApp.use;\n\n    expressApp.use = function(...args: any[]) {\n      args = args.map(arg => {\n        if (injector.has(arg)) {\n          arg = HandlerBuilder.from(arg).build(injector);\n        }\n\n        return arg;\n      });\n\n      return originalUse.call(this, ...args);\n    };\n\n    return expressApp;\n  }\n});\n"],"sourceRoot":"../../../src"}