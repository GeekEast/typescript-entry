{"version":3,"sources":["server/utils/contextMiddleware.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,UAAU,CAAC;AACzC,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAKnC;;;GAGG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,eAAe,uGAgB1D","file":"contextMiddleware.d.ts","sourcesContent":["import {applyBefore} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {Context} from \"../../mvc\";\n\nlet AUTO_INCREMENT_ID = 1;\n\n/**\n * Bind request and create a new context to store information during the request lifecycle\n * @param injector\n */\nexport function contextMiddleware(injector: InjectorService) {\n  const getId = injector.settings.logger.reqIdBuilder || (() => String(AUTO_INCREMENT_ID++));\n\n  return async (request: Express.Request, response: Express.Response, next: Express.NextFunction) => {\n    request.ctx = new Context({id: getId()});\n    request.id = request.ctx.id;\n\n    await injector.emit(\"$onRequest\", request, response);\n\n    applyBefore(response, \"end\", async () => {\n      await injector.emit(\"$onResponse\", request, response);\n      await request.ctx.destroy();\n    });\n\n    next();\n  };\n}\n"],"sourceRoot":"../../../src"}