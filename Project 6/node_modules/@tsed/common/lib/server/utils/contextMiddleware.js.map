{"version":3,"sources":["server/utils/contextMiddleware.ts"],"names":[],"mappings":";;;AAAA,qCAAuC;AAGvC,mCAAkC;AAElC,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAE1B;;;GAGG;AACH,SAAgB,iBAAiB,CAAC,QAAyB;IACzD,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;IAE3F,OAAO,CAAO,OAAwB,EAAE,QAA0B,EAAE,IAA0B,EAAE,EAAE;QAChG,OAAO,CAAC,GAAG,GAAG,IAAI,aAAO,CAAC,EAAC,EAAE,EAAE,KAAK,EAAE,EAAC,CAAC,CAAC;QACzC,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QAE5B,MAAM,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAErD,kBAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAS,EAAE;YACtC,MAAM,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACtD,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAC9B,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,EAAE,CAAC;IACT,CAAC,CAAA,CAAC;AACJ,CAAC;AAhBD,8CAgBC","file":"contextMiddleware.js","sourcesContent":["import {applyBefore} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {Context} from \"../../mvc\";\n\nlet AUTO_INCREMENT_ID = 1;\n\n/**\n * Bind request and create a new context to store information during the request lifecycle\n * @param injector\n */\nexport function contextMiddleware(injector: InjectorService) {\n  const getId = injector.settings.logger.reqIdBuilder || (() => String(AUTO_INCREMENT_ID++));\n\n  return async (request: Express.Request, response: Express.Response, next: Express.NextFunction) => {\n    request.ctx = new Context({id: getId()});\n    request.id = request.ctx.id;\n\n    await injector.emit(\"$onRequest\", request, response);\n\n    applyBefore(response, \"end\", async () => {\n      await injector.emit(\"$onResponse\", request, response);\n      await request.ctx.destroy();\n    });\n\n    next();\n  };\n}\n"],"sourceRoot":"../../../src"}