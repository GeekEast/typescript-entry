{"version":3,"sources":["server/utils/createHttpServer.ts"],"names":[],"mappings":";;AAAA,iCAA0E;AAC1E,6BAA6B;AAC7B,yEAAoE;AACpE,yDAAoD;AAEpD,SAA4B,gBAAgB,CAAC,QAAyB;IACpE,WAAW;IACX,QAAQ,CAAC,YAAY,CAAC,uBAAU,CAAC,CAAC;AACpC,CAAC;AAHD,4CAGC;AAED,qBAAgB,CAAC;IACf,OAAO,EAAE,uBAAU;IACnB,IAAI,EAAE,CAAC,uCAAkB,CAAC;IAC1B,KAAK,EAAE,kBAAa,CAAC,SAAS;IAC9B,MAAM,EAAE,IAAI;IACZ,UAAU,CAAC,kBAAsC;QAC/C,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;IAC/C,CAAC;CACF,CAAC,CAAC","file":"createHttpServer.js","sourcesContent":["import {InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport * as Http from \"http\";\nimport {ExpressApplication} from \"../decorators/expressApplication\";\nimport {HttpServer} from \"../decorators/httpServer\";\n\nexport /* async */ function createHttpServer(injector: InjectorService): void {\n  /* await */\n  injector.forkProvider(HttpServer);\n}\n\nregisterProvider({\n  provide: HttpServer,\n  deps: [ExpressApplication],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(expressApplication: ExpressApplication) {\n    return Http.createServer(expressApplication);\n  }\n});\n"],"sourceRoot":"../../../src"}