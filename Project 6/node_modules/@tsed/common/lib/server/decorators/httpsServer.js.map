{"version":3,"sources":["server/decorators/httpsServer.ts"],"names":[],"mappings":";;AACA,iCAAgC;AAehC;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,SAAgB,WAAW,CAAC,MAAiB,EAAE,SAAiB,EAAE,UAAsD;IACtH,OAAO,WAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAC5D,CAAC;AAFD,kCAEC","file":"httpsServer.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {Inject} from \"@tsed/di\";\nimport * as Https from \"https\";\n\nexport interface IHttpsFactory {\n  (target: Type<any>, targetKey: string, descriptor: TypedPropertyDescriptor<Function> | number): any;\n\n  /**\n   * @deprecated\n   * @returns {\"https\".Server}\n   */\n  get(): Https.Server;\n}\n\nexport type HttpsServer = Https.Server & IHttpsFactory;\n\n/**\n * Inject the Https.Server instance.\n *\n * ### Example\n *\n * ```typescript\n * import {HttpsServer, Service} from \"@tsed/common\";\n *\n * @Service()\n * export default class OtherService {\n *    constructor(@HttpsServer httpServer: HttpServer) {}\n * }\n * ```\n *\n * > Note: TypeScript transform and store `HttpsServer` as `Function` type in the metadata. So to inject a factory, you must use the `@Inject(type)` decorator.\n *\n * @param {Type<any>} target\n * @param {string} targetKey\n * @param {TypedPropertyDescriptor<Function> | number} descriptor\n * @returns {any}\n * @decorator\n */\nexport function HttpsServer(target: Type<any>, targetKey: string, descriptor: TypedPropertyDescriptor<Function> | number) {\n  return Inject(HttpsServer)(target, targetKey, descriptor);\n}\n"],"sourceRoot":"../../../src"}