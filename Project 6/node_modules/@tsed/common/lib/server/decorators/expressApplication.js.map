{"version":3,"sources":["server/decorators/expressApplication.ts"],"names":[],"mappings":";;AACA,iCAAgC;AA4BhC;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,kBAAkB,CAAC,MAAiB,EAAE,SAAiB,EAAE,UAAsD;IAC7H,OAAO,WAAM,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACnE,CAAC;AAFD,gDAEC","file":"expressApplication.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {Inject} from \"@tsed/di\";\nimport * as Express from \"express\";\n\ndeclare global {\n  namespace Express {\n    interface Application {\n      use: (middleware: any) => Application;\n    }\n  }\n}\n/**\n * `ExpressApplication` is an alias type to the [Express.Application](http://expressjs.com/fr/4x/api.html#app) interface. It use the util `registerFactory()` and let you to inject [Express.Application](http://expressjs.com/fr/4x/api.html#app) created by [ServerLoader](/docs/server-loader.md#lifecycle-hooks).\n *\n * ```typescript\n * import {ExpressApplication, Service, Inject} from \"@tsed/common\";\n *\n * @Service()\n * export default class OtherService {\n *    constructor(@ExpressApplication expressApplication: Express.Application) {}\n * }\n * ```\n *\n * > Note: TypeScript transform and store `ExpressApplication` as `Function` type in the metadata. So to inject a factory, you must use the `@Inject(type)` decorator.\n *\n * @type {symbol}\n */\nexport type ExpressApplication = Express.Application;\n\n/**\n * Inject the express application instance.\n *\n *\n * ```typescript\n * import {ExpressApplication, Service, Inject} from \"@tsed/common\";\n *\n * @Service()\n * export default class OtherService {\n *    constructor(@ExpressApplication expressApplication: Express.Application) {}\n * }\n * ```\n *\n * @param {Type<any>} target\n * @param {string} targetKey\n * @param {TypedPropertyDescriptor<Function> | number} descriptor\n * @returns {any}\n * @decorator\n */\nexport function ExpressApplication(target: Type<any>, targetKey: string, descriptor: TypedPropertyDescriptor<Function> | number) {\n  return Inject(ExpressApplication)(target, targetKey, descriptor);\n}\n"],"sourceRoot":"../../../src"}