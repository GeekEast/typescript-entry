{"version":3,"sources":["converters/components/MapConverter.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,UAAU,EAAE,aAAa,EAAE,WAAW,EAAC,MAAM,qBAAqB,CAAC;AAE3E;;;;GAIG;AACH,qBACa,YAAa,YAAW,UAAU;IAC7C;;;;;;;OAOG;IACH,WAAW,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,YAAY,EAAE,aAAa,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;IAUhG;;;;OAIG;IACH,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,WAAW,GAAG,GAAG;CAOjE","file":"MapConverter.d.ts","sourcesContent":["import {Converter} from \"../decorators/converter\";\nimport {IConverter, IDeserializer, ISerializer} from \"../interfaces/index\";\n\n/**\n * Converter component for the `Map` Type.\n * @converters\n * @component\n */\n@Converter(Map)\nexport class MapConverter implements IConverter {\n  /**\n   *\n   * @param data\n   * @param target\n   * @param baseType\n   * @param deserializer\n   * @returns {Map<string, T>}\n   */\n  deserialize<T>(data: any, target: any, baseType: T, deserializer: IDeserializer): Map<string, T> {\n    const obj = new Map<string, T>();\n\n    Object.keys(data).forEach(key => {\n      obj.set(key, deserializer(data[key], baseType) as T);\n    });\n\n    return obj;\n  }\n\n  /**\n   *\n   * @param data\n   * @param serializer\n   */\n  serialize<T>(data: Map<string, T>, serializer: ISerializer): any {\n    const obj: any = {};\n\n    data.forEach((value: T, key: string) => (obj[key] = serializer(value)));\n\n    return obj;\n  }\n}\n"],"sourceRoot":"../../../src"}