{"version":3,"sources":["converters/components/PrimitiveConverter.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAE/C;;;;GAIG;AACH,qBACa,kBAAmB,YAAW,UAAU;IACnD,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,OAAO,GAAG,IAAI;IAsBxE,SAAS,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,OAAO,GAAG,GAAG;CAGlD","file":"PrimitiveConverter.d.ts","sourcesContent":["import {BadRequest} from \"ts-httpexceptions\";\nimport {Converter} from \"../decorators/converter\";\nimport {IConverter} from \"../interfaces/index\";\n\n/**\n * Converter component for the `String`, `Number` and `Boolean` Types.\n * @converters\n * @component\n */\n@Converter(String, Number, Boolean)\nexport class PrimitiveConverter implements IConverter {\n  deserialize(data: string, target: any): String | Number | Boolean | void {\n    switch (target) {\n      case String:\n        return \"\" + data;\n\n      case Number:\n        const n = +data;\n\n        if (isNaN(n)) {\n          throw new BadRequest(\"Cast error. Expression value is not a number.\");\n        }\n\n        return n;\n\n      case Boolean:\n        if (data === \"true\") return true;\n        if (data === \"false\") return false;\n\n        return !!data;\n    }\n  }\n\n  serialize(object: String | Number | Boolean): any {\n    return object;\n  }\n}\n"],"sourceRoot":"../../../src"}