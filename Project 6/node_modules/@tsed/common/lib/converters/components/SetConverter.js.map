{"version":3,"sources":["converters/components/SetConverter.ts"],"names":[],"mappings":";;;AAAA,uDAAkD;AAGlD;;;;GAIG;AAEH,IAAa,YAAY,GAAzB,MAAa,YAAY;IACvB;;;;;;;OAOG;IACH,WAAW,CAAI,IAAS,EAAE,MAAW,EAAE,QAAW,EAAE,YAA2B;QAC7E,MAAM,GAAG,GAAG,IAAI,GAAG,EAAK,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC9B,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAM,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAI,IAAY,EAAE,UAAuB;QAChD,MAAM,KAAK,GAAU,EAAE,CAAC;QAExB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAErD,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AA/BY,YAAY;IADxB,qBAAS,CAAC,GAAG,CAAC;GACF,YAAY,CA+BxB;AA/BY,oCAAY","file":"SetConverter.js","sourcesContent":["import {Converter} from \"../decorators/converter\";\nimport {IConverter, IDeserializer, ISerializer} from \"../interfaces/index\";\n\n/**\n * Converter component for the `Set` Type.\n * @converters\n * @component\n */\n@Converter(Set)\nexport class SetConverter implements IConverter {\n  /**\n   *\n   * @param data\n   * @param target\n   * @param baseType\n   * @param deserializer\n   * @returns {Map<string, T>}\n   */\n  deserialize<T>(data: any, target: any, baseType: T, deserializer: IDeserializer): Set<T> {\n    const obj = new Set<T>();\n\n    Object.keys(data).forEach(key => {\n      obj.add(deserializer(data[key], baseType) as T);\n    });\n\n    return obj;\n  }\n\n  /**\n   *\n   * @param data\n   * @param serializer\n   */\n  serialize<T>(data: Set<T>, serializer: ISerializer): any[] {\n    const array: any[] = [];\n\n    data.forEach(value => array.push(serializer(value)));\n\n    return array;\n  }\n}\n"],"sourceRoot":"../../../src"}