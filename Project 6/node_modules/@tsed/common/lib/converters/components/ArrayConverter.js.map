{"version":3,"sources":["converters/components/ArrayConverter.ts"],"names":[],"mappings":";;;AAAA,uDAAkD;AAGlD;;;;GAIG;AAEH,IAAa,cAAc,GAA3B,MAAa,cAAc;IACzB,WAAW,CAAI,IAAS,EAAE,MAAW,EAAE,QAAW,EAAE,YAA2B;QAC7E,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,YAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,SAAS,CAAC,IAAW,EAAE,UAAuB;QAC5C,OAAO,EAAE,CAAC,MAAM,CAAC,IAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAC;CACF,CAAA;AARY,cAAc;IAD1B,qBAAS,CAAC,KAAK,CAAC;GACJ,cAAc,CAQ1B;AARY,wCAAc","file":"ArrayConverter.js","sourcesContent":["import {Converter} from \"../decorators/converter\";\nimport {IConverter, IDeserializer, ISerializer} from \"../interfaces/index\";\n\n/**\n * Converter component for the `Array` Type.\n * @converters\n * @component\n */\n@Converter(Array)\nexport class ArrayConverter implements IConverter {\n  deserialize<T>(data: any, target: any, baseType: T, deserializer: IDeserializer): T[] {\n    return [].concat(data).map(item => deserializer!(item, baseType));\n  }\n\n  serialize(data: any[], serializer: ISerializer) {\n    return [].concat(data as any).map(item => serializer(item));\n  }\n}\n"],"sourceRoot":"../../../src"}