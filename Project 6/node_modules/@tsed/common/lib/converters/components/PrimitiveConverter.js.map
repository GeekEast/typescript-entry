{"version":3,"sources":["converters/components/PrimitiveConverter.ts"],"names":[],"mappings":";;;AAAA,yDAA6C;AAC7C,uDAAkD;AAGlD;;;;GAIG;AAEH,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,WAAW,CAAC,IAAY,EAAE,MAAW;QACnC,QAAQ,MAAM,EAAE;YACd,KAAK,MAAM;gBACT,OAAO,EAAE,GAAG,IAAI,CAAC;YAEnB,KAAK,MAAM;gBACT,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;gBAEhB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACZ,MAAM,IAAI,8BAAU,CAAC,+CAA+C,CAAC,CAAC;iBACvE;gBAED,OAAO,CAAC,CAAC;YAEX,KAAK,OAAO;gBACV,IAAI,IAAI,KAAK,MAAM;oBAAE,OAAO,IAAI,CAAC;gBACjC,IAAI,IAAI,KAAK,OAAO;oBAAE,OAAO,KAAK,CAAC;gBAEnC,OAAO,CAAC,CAAC,IAAI,CAAC;SACjB;IACH,CAAC;IAED,SAAS,CAAC,MAAiC;QACzC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AA1BY,kBAAkB;IAD9B,qBAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;GACtB,kBAAkB,CA0B9B;AA1BY,gDAAkB","file":"PrimitiveConverter.js","sourcesContent":["import {BadRequest} from \"ts-httpexceptions\";\nimport {Converter} from \"../decorators/converter\";\nimport {IConverter} from \"../interfaces/index\";\n\n/**\n * Converter component for the `String`, `Number` and `Boolean` Types.\n * @converters\n * @component\n */\n@Converter(String, Number, Boolean)\nexport class PrimitiveConverter implements IConverter {\n  deserialize(data: string, target: any): String | Number | Boolean | void {\n    switch (target) {\n      case String:\n        return \"\" + data;\n\n      case Number:\n        const n = +data;\n\n        if (isNaN(n)) {\n          throw new BadRequest(\"Cast error. Expression value is not a number.\");\n        }\n\n        return n;\n\n      case Boolean:\n        if (data === \"true\") return true;\n        if (data === \"false\") return false;\n\n        return !!data;\n    }\n  }\n\n  serialize(object: String | Number | Boolean): any {\n    return object;\n  }\n}\n"],"sourceRoot":"../../../src"}