{"version":3,"sources":["converters/services/ConverterService.ts"],"names":[],"mappings":"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","file":"ConverterService.js","sourcesContent":["import {getClass, isArrayOrArrayClass, isEmpty, isPrimitiveOrPrimitiveClass, Metadata, Store, Type} from \"@tsed/core\";\nimport {InjectorService, Service} from \"@tsed/di\";\nimport {ServerSettingsService} from \"../../config/services/ServerSettingsService\";\nimport {PropertyMetadata} from \"../../jsonschema/class/PropertyMetadata\";\nimport {PropertyRegistry} from \"../../jsonschema/registries/PropertyRegistry\";\nimport {CONVERTER} from \"../constants/index\";\nimport {ConverterDeserializationError} from \"../errors/ConverterDeserializationError\";\nimport {ConverterSerializationError} from \"../errors/ConverterSerializationError\";\nimport {RequiredPropertyError} from \"../errors/RequiredPropertyError\";\nimport {UnknowPropertyError} from \"../errors/UnknowPropertyError\";\nimport {IConverter, IConverterOptions, IDeserializer, ISerializer} from \"../interfaces/index\";\n\n@Service()\nexport class ConverterService {\n  private validationModelStrict = true;\n\n  constructor(private injectorService: InjectorService, serverSettings: ServerSettingsService) {\n    this.validationModelStrict = serverSettings.get<boolean>(\"validationModelStrict\");\n  }\n\n  /**\n   * Return a JsonMetadata for a properties.\n   * @param properties\n   * @param propertyKey\n   * @returns {undefined|V|string|any|T|IDBRequest}\n   */\n  static getPropertyMetadata(\n    properties: Map<string | symbol, PropertyMetadata>,\n    propertyKey: string | symbol\n  ): PropertyMetadata | undefined {\n    if (properties.has(propertyKey)) {\n      return properties.get(propertyKey);\n    }\n\n    let property;\n    properties.forEach(p => {\n      if (p.name === propertyKey || p.propertyKey === propertyKey) {\n        property = p;\n      }\n    });\n\n    return property;\n  }\n\n  /**\n   * Convert instance to plainObject.\n   *\n   * ### Options\n   *\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj\n   * @param options\n   */\n  serialize(obj: any, options: IConverterOptions = {}): any {\n    try {\n      if (isEmpty(obj)) {\n        return obj;\n      }\n\n      const converter = this.getConverter(obj);\n      const serializer: ISerializer = (o: any, opt?: any) => this.serialize(o, Object.assign({}, options, opt));\n\n      if (converter && converter.serialize) {\n        // deserialize from a custom JsonConverter\n        return converter.serialize(obj, serializer);\n      }\n\n      if (typeof obj.serialize === \"function\") {\n        // deserialize from serialize method\n        return obj.serialize(options, this);\n      }\n\n      // TODO revert change which break current projects\n      // if (options.type && !isPrimitiveOrPrimitiveClass(options.type)) {\n      //  return this.serializeClass(obj, options);\n      // }\n\n      if (typeof obj.toJSON === \"function\" && !obj.toJSON.$ignore) {\n        // deserialize from serialize method\n        return obj.toJSON();\n      }\n\n      // Default converter\n      if (!isPrimitiveOrPrimitiveClass(obj)) {\n        return this.serializeClass(obj, options);\n      }\n    } catch (err) {\n      /* istanbul ignore next */\n      throw err.name === \"BAD_REQUEST\" ? err : new ConverterSerializationError(getClass(obj), err);\n    }\n\n    /* istanbul ignore next */\n    return obj;\n  }\n\n  /**\n   *\n   * @param obj\n   * @param {IConverterOptions} options\n   * @returns {any}\n   */\n  serializeClass(obj: any, options: IConverterOptions = {}) {\n    const {checkRequiredValue = true} = options;\n\n    const plainObject: any = {};\n    const properties = PropertyRegistry.getProperties(options.type || obj);\n    const keys = properties.size ? Array.from(properties.keys()) : Object.keys(obj);\n\n    keys.forEach(propertyKey => {\n      if (typeof obj[propertyKey] !== \"function\") {\n        let propertyMetadata = ConverterService.getPropertyMetadata(properties, propertyKey);\n\n        propertyMetadata = propertyMetadata || ({} as any);\n        plainObject[propertyMetadata!.name || propertyKey] = this.serialize(obj[propertyKey], {\n          checkRequiredValue // ,\n          // TODO revert change\n          // type: propertyMetadata!.type\n        });\n      }\n    });\n\n    // Required validation\n    if (checkRequiredValue) {\n      this.checkRequiredValue(obj, properties);\n    }\n\n    return plainObject;\n  }\n\n  /**\n   * Convert a plainObject to targetType.\n   *\n   * ### Options\n   *\n   * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj Object source that will be deserialized\n   * @param targetType Pattern of the object deserialized\n   * @param baseType\n   * @param options\n   * @returns {any}\n   */\n  deserialize(obj: any, targetType: any, baseType?: any, options: IConverterOptions = {}): any {\n    const {ignoreCallback, checkRequiredValue = true} = options;\n\n    try {\n      if (ignoreCallback && ignoreCallback(obj, targetType, baseType)) {\n        return obj;\n      }\n\n      if (targetType !== Boolean && (isEmpty(obj) || isEmpty(targetType) || targetType === Object)) {\n        return obj;\n      }\n\n      const converter = this.getConverter(targetType);\n      const deserializer: IDeserializer = (o: any, targetType: any, baseType: any) => this.deserialize(o, targetType, baseType, options);\n\n      if (converter) {\n        // deserialize from a custom JsonConverter\n        return converter!.deserialize!(obj, targetType, baseType, deserializer);\n      }\n\n      /* istanbul ignore next */\n      if (isArrayOrArrayClass(obj)) {\n        const converter = this.getConverter(Array);\n\n        return converter!.deserialize!(obj, Array, baseType, deserializer);\n      }\n\n      if ((targetType as any).prototype && typeof (targetType as any).prototype.deserialize === \"function\") {\n        // deserialize from method\n\n        const instance = new targetType();\n        instance.deserialize(obj);\n\n        return instance;\n      }\n\n      // Default converter\n      const instance = new targetType();\n      const properties = PropertyRegistry.getProperties(targetType);\n\n      Object.keys(obj).forEach((propertyName: string) => {\n        const propertyMetadata = ConverterService.getPropertyMetadata(properties, propertyName);\n\n        return this.convertProperty(obj, instance, propertyName, propertyMetadata, options);\n      });\n\n      // Required validation\n      if (checkRequiredValue) {\n        this.checkRequiredValue(instance, properties);\n      }\n\n      return instance;\n    } catch (err) {\n      /* istanbul ignore next */\n      throw err.name === \"BAD_REQUEST\" ? err : new ConverterDeserializationError(targetType, obj, err);\n    }\n  }\n\n  /**\n   *\n   * @param targetType\n   * @returns {any}\n   */\n  getConverter(targetType: any): IConverter | undefined {\n    if (Metadata.has(CONVERTER, targetType)) {\n      const converter = Metadata.get(CONVERTER, targetType);\n\n      if (converter) {\n        return this.injectorService.get(converter);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param obj\n   * @param instance\n   * @param {string} propertyName\n   * @param {PropertyMetadata} propertyMetadata\n   * @param options\n   */\n  private convertProperty(obj: any, instance: any, propertyName: string, propertyMetadata?: PropertyMetadata, options?: any) {\n    this.checkStrictModelValidation(instance, propertyName, propertyMetadata);\n\n    propertyMetadata = propertyMetadata || ({} as any);\n\n    const propertyValue = obj[propertyMetadata!.name] || obj[propertyName];\n    const propertyKey = propertyMetadata!.propertyKey || propertyName;\n\n    try {\n      if (typeof instance[propertyKey] !== \"function\") {\n        instance[propertyKey] = this.deserialize(\n          propertyValue,\n          propertyMetadata!.isCollection ? propertyMetadata!.collectionType : propertyMetadata!.type,\n          propertyMetadata!.type,\n          options\n        );\n      }\n    } catch (err) {\n      /* istanbul ignore next */\n      (() => {\n        const castedError: any = new Error(\"For \" + String(propertyKey) + \" with value \" + propertyValue + \" \\n\" + err.message);\n        castedError.stack = err.stack;\n        castedError.origin = err;\n\n        throw castedError;\n      })();\n    }\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {Map<string | symbol, PropertyMetadata>} properties\n   */\n  private checkRequiredValue(instance: any, properties: Map<string | symbol, PropertyMetadata>) {\n    properties.forEach((propertyMetadata: PropertyMetadata) => {\n      if (propertyMetadata.isRequired(instance[propertyMetadata.propertyKey])) {\n        throw new RequiredPropertyError(getClass(instance), propertyMetadata.propertyKey);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {PropertyMetadata | undefined} propertyMetadata\n   */\n  private checkStrictModelValidation(instance: any, propertyKey: string | symbol, propertyMetadata: PropertyMetadata | undefined) {\n    if (this.isStrictModelValidation(getClass(instance)) && propertyMetadata === undefined) {\n      throw new UnknowPropertyError(getClass(instance), propertyKey);\n    }\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @returns {boolean}\n   */\n  private isStrictModelValidation(target: Type<any>): boolean {\n    if (target !== Object) {\n      const modelStrict = Store.from(target).get(\"modelStrict\");\n\n      if (this.validationModelStrict) {\n        return modelStrict === undefined ? true : modelStrict;\n      } else {\n        return modelStrict === true;\n      }\n    }\n\n    return false;\n  }\n}\n"],"sourceRoot":"../../../src"}