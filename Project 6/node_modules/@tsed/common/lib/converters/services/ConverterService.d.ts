import { InjectorService } from "@tsed/di";
import { ServerSettingsService } from "../../config/services/ServerSettingsService";
import { PropertyMetadata } from "../../jsonschema/class/PropertyMetadata";
import { IConverter, IConverterOptions } from "../interfaces/index";
export declare class ConverterService {
    private injectorService;
    private validationModelStrict;
    constructor(injectorService: InjectorService, serverSettings: ServerSettingsService);
    /**
     * Return a JsonMetadata for a properties.
     * @param properties
     * @param propertyKey
     * @returns {undefined|V|string|any|T|IDBRequest}
     */
    static getPropertyMetadata(properties: Map<string | symbol, PropertyMetadata>, propertyKey: string | symbol): PropertyMetadata | undefined;
    /**
     * Convert instance to plainObject.
     *
     * ### Options
     *
     * - `checkRequiredValue`: Disable the required check condition.
     *
     * @param obj
     * @param options
     */
    serialize(obj: any, options?: IConverterOptions): any;
    /**
     *
     * @param obj
     * @param {IConverterOptions} options
     * @returns {any}
     */
    serializeClass(obj: any, options?: IConverterOptions): any;
    /**
     * Convert a plainObject to targetType.
     *
     * ### Options
     *
     * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.
     * - `checkRequiredValue`: Disable the required check condition.
     *
     * @param obj Object source that will be deserialized
     * @param targetType Pattern of the object deserialized
     * @param baseType
     * @param options
     * @returns {any}
     */
    deserialize(obj: any, targetType: any, baseType?: any, options?: IConverterOptions): any;
    /**
     *
     * @param targetType
     * @returns {any}
     */
    getConverter(targetType: any): IConverter | undefined;
    /**
     *
     * @param obj
     * @param instance
     * @param {string} propertyName
     * @param {PropertyMetadata} propertyMetadata
     * @param options
     */
    private convertProperty;
    /**
     *
     * @param instance
     * @param {Map<string | symbol, PropertyMetadata>} properties
     */
    private checkRequiredValue;
    /**
     *
     * @param instance
     * @param {string} propertyKey
     * @param {PropertyMetadata | undefined} propertyMetadata
     */
    private checkStrictModelValidation;
    /**
     *
     * @param {Type<any>} target
     * @returns {boolean}
     */
    private isStrictModelValidation;
}
