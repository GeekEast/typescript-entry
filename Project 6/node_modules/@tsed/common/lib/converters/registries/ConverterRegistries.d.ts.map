{"version":3,"sources":["converters/registries/ConverterRegistries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAyB,sBAAsB,EAAkB,MAAM,UAAU,CAAC;AAEzF;;;GAGG;AAEH,eAAO,MAAM,iBAAiB,EAAE,sBAE9B,CAAC;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,eAAO,MAAM,iBAAiB,yCAAyD,CAAC","file":"ConverterRegistries.d.ts","sourcesContent":["import {Provider, ProviderType, TypedProvidersRegistry, GlobalProviders} from \"@tsed/di\";\n\n/**\n * Converter Registry.\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\n// tslint:disable-next-line: variable-name\nexport const ConverterRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.CONVERTER, Provider, {\n  injectable: true\n});\n/**\n * Add a new converter in the `ProviderRegistry`. This converter will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerConverter, InjectorService} from \"@tsed/common\";\n *\n * export default class MyConverter {\n *     constructor(){}\n *     serialize() {\n *         return \"test\";\n *     }\n * }\n *\n * registerConverter({provide: MyConverter});\n * // or\n * registerConverter(MyConverter);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myConverter = injector.get<MyConverter>(MyConverter);\n * myConverter.serialize(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerConverter = GlobalProviders.createRegisterFn(ProviderType.SERVICE);\n"],"sourceRoot":"../../../src"}