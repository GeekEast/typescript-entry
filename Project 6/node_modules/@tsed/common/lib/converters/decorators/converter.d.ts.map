{"version":3,"sources":["converters/decorators/converter.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM;AAMN;;;;;;;GAOG;AACH,wBAAgB,SAAS,CAAC,GAAG,OAAO,EAAE,GAAG,EAAE,GAAG,QAAQ,CAWrD","file":"converter.d.ts","sourcesContent":["/**\n * @module common/converters\n */\n/** */\n\nimport {Metadata} from \"@tsed/core\";\nimport {CONVERTER} from \"../constants/index\";\nimport {registerConverter} from \"../registries/ConverterRegistries\";\n\n/**\n * `@Converter(...targetTypes)` let you to define some converters for a certain type/Class.\n * It useful for a generic conversion.\n *\n * @param classes\n * @returns {(customConverter?:any)=>undefined}\n * @decorator\n */\nexport function Converter(...classes: any[]): Function {\n  return (target: any) => {\n    /* istanbul ignore next */\n    if (classes.length === 0) {\n      throw new Error(\"Converter decorator need at least one type like String, Date, Class, etc...\");\n    }\n\n    registerConverter({provide: target, type: \"converter\"});\n\n    classes.forEach(clazz => Metadata.set(CONVERTER, target, clazz));\n  };\n}\n"],"sourceRoot":"../../../src"}