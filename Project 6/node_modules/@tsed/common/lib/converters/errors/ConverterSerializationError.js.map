{"version":3,"sources":["converters/errors/ConverterSerializationError.ts"],"names":[],"mappings":";;AAAA,yDAAsD;AACtD,qCAAwC;AAExC;;GAEG;AACH,MAAa,2BAA4B,SAAQ,uCAAmB;IAIlE,YAAY,MAAiB,EAAE,GAAU;QACvC,KAAK,CAAC,2BAA2B,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAJ/D,SAAI,GAAW,+BAA+B,CAAC;QAK7C,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,YAAY,CAAC,MAAiB,EAAE,GAAU;QAC/C,OAAO,0BAA0B,aAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC;IAC5E,CAAC;CACF;AAhBD,kEAgBC","file":"ConverterSerializationError.js","sourcesContent":["import {InternalServerError} from \"ts-httpexceptions\";\nimport {Type, nameOf} from \"@tsed/core\";\n\n/**\n * @private\n */\nexport class ConverterSerializationError extends InternalServerError {\n  name: string = \"CONVERTER_SERIALIZATION_ERROR\";\n  stack: any;\n\n  constructor(target: Type<any>, err: Error) {\n    super(ConverterSerializationError.buildMessage(target, err));\n    this.stack = err.stack;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  static buildMessage(target: Type<any>, err: Error) {\n    return `Conversion failed for \"${nameOf(target)}\". ${err.message}`.trim();\n  }\n}\n"],"sourceRoot":"../../../src"}