{"version":3,"sources":["jsonschema/registries/JsonSchemesRegistry.ts"],"names":[],"mappings":"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","file":"JsonSchemesRegistry.js","sourcesContent":["import {ancestorsOf, deepExtends, isClass, Registry, Store, Type} from \"@tsed/core\";\nimport {JSONSchema6} from \"json-schema\";\nimport {JsonSchema} from \"../class/JsonSchema\";\n\nconst JSON_SCHEMA_FIELDS = [\"additionalItems\", \"items\", \"additionalProperties\", \"properties\", \"dependencies\", \"oneOf\"];\n\nconst toObj = (o: any) => JSON.parse(JSON.stringify(o));\n\nexport class JsonSchemaRegistry extends Registry<any, Partial<JsonSchema>> {\n  /**\n   *\n   * @param {Type<any>} target\n   * @param {string} propertyKey\n   * @param type\n   * @param collectionType\n   * @returns {JsonSchema}\n   */\n  property(target: Type<any>, propertyKey: string, type: any, collectionType?: any): JsonSchema {\n    if (!this.has(target)) {\n      this.merge(target, {\n        type: target\n      });\n      Store.from(target).set(\"schema\", this.get(target));\n    }\n\n    const schema = this.get(target);\n    schema.properties = schema.properties || {};\n    schema.properties[propertyKey] = JsonSchemaRegistry.createJsonSchema(schema.properties[propertyKey], type, collectionType);\n\n    return schema.properties[propertyKey];\n  }\n\n  /**\n   *\n   * @param schema\n   * @param type\n   * @param collectionType\n   */\n  private static createJsonSchema(schema: JsonSchema = new JsonSchema(), type: any, collectionType?: any): JsonSchema {\n    if (isClass(type)) {\n      schema = Object.keys(schema.toObject()).reduce((newSchema: any, key: string) => {\n        if (!(key === \"type\" || key === \"items\" || key === \"additionalProperties\")) {\n          newSchema[key] = schema[key];\n        }\n\n        return newSchema;\n      }, JsonSchema.ref(type));\n    } else {\n      schema.type = type;\n    }\n\n    if (collectionType) {\n      schema.toCollection(collectionType);\n    }\n\n    return schema!;\n  }\n\n  /**\n   *\n   * @param target\n   * @param {string} propertyKey\n   * @param value\n   */\n  required(target: any, propertyKey: string, value?: boolean) {\n    const schema = this.get(target) || {};\n    const required = schema.required || [];\n\n    if (value !== undefined) {\n      const index = required.indexOf(propertyKey);\n      if (value && index === -1) {\n        schema.required = [].concat(required, [propertyKey as never]);\n      }\n      if (!value && index > -1) {\n        required.splice(required.indexOf(propertyKey), 1);\n      }\n    }\n\n    return (schema.required || []).some((p: string) => p === propertyKey);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @returns {JSONSchema6}\n   */\n  getSchemaDefinition(target: Type<any>): JSONSchema6 {\n    return ancestorsOf(target).reduce((acc: JSONSchema6, target: Type<any>) => {\n      deepExtends(acc, this.getSchema(target));\n\n      return acc;\n    }, {});\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @returns {JSONSchema6}\n   */\n  private getSchema(target: Type<any>) {\n    const schemaDefinition: JSONSchema6 = {};\n    const schema = this.get(target);\n\n    if (schema) {\n      deepExtends(schemaDefinition, toObj(schema));\n    }\n\n    schemaDefinition.definitions = {};\n\n    this.findReferences(schemaDefinition, schemaDefinition.definitions as any);\n\n    return schemaDefinition;\n  }\n\n  /**\n   *\n   * @param {JsonSchema} schema\n   * @param definitions\n   */\n  private findReferences(schema: JSONSchema6, definitions: {[p: string]: JSONSchema6}): JSONSchema6 {\n    if (schema.$ref) {\n      return this.getRef(schema, definitions);\n    }\n\n    JSON_SCHEMA_FIELDS.forEach((key: string) => {\n      const value: any = (schema as any)[key];\n      if (value) {\n        if (value.$ref) {\n          return this.getRef(value, definitions);\n        }\n\n        Object.keys(value).forEach((index: any) => {\n          this.findReferences(value[index], definitions);\n        });\n      }\n    });\n\n    return schema;\n  }\n\n  /**\n   *\n   * @param {JSONSchema4} schema\n   * @param definitions\n   * @returns {JSONSchema4}\n   */\n  private getRef(schema: JSONSchema6, definitions: {[p: string]: JSONSchema6}): JSONSchema6 {\n    const schemaName = this.getRefName(schema.$ref!);\n    const refSchema = this.getSchemaByName(schemaName);\n\n    if (refSchema) {\n      if (!definitions[schemaName]) {\n        definitions[schemaName] = {};\n        this.findReferences(refSchema!, definitions);\n        definitions[schemaName] = refSchema.toObject();\n      }\n    } else {\n      schema.type = \"object\";\n      delete schema.$ref;\n    }\n\n    return schema;\n  }\n\n  /**\n   *\n   * @param {string} ref\n   * @returns {string}\n   */\n  private getRefName(ref: string): string {\n    return ref.replace(\"#/definitions/\", \"\");\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @returns {JsonSchema}\n   */\n  private getSchemaByName(name: string): JsonSchema | undefined {\n    let currentSchema;\n    this.forEach(schema => {\n      if (schema.refName === name) {\n        currentSchema = schema;\n      }\n    });\n\n    return currentSchema;\n  }\n}\n\n// tslint:disable-next-line: variable-name\nexport const JsonSchemesRegistry = new JsonSchemaRegistry(JsonSchema);\n"],"sourceRoot":"../../../src"}