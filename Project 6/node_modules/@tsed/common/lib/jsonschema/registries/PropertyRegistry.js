"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const index_1 = require("../../converters/constants/index");
const PropertyMetadata_1 = require("../class/PropertyMetadata");
class PropertyRegistry {
    /**
     *
     * @param target
     * @param propertyKey
     * @returns {PropertyMetadata}
     */
    static get(target, propertyKey) {
        const properties = this.getOwnProperties(target);
        if (!properties.has(propertyKey)) {
            this.set(target, propertyKey, new PropertyMetadata_1.PropertyMetadata(target, propertyKey));
        }
        return this.getOwnProperties(target).get(propertyKey);
    }
    /**
     *
     * @param target
     * @returns {Array}
     */
    static getProperties(target) {
        const map = new Map();
        const ignored = [];
        core_1.ancestorsOf(target).forEach(klass => {
            this.getOwnProperties(klass).forEach((v, k) => {
                /* istanbul ignore next */
                if (ignored.indexOf(k) !== -1) {
                    return;
                }
                if (!v.ignoreProperty) {
                    map.set(k, v);
                }
                else {
                    map.delete(k);
                    ignored.push(k);
                }
            });
        });
        return map;
    }
    /**
     *
     * @param {Type<any>} target
     * @returns {Map<string | symbol, PropertyMetadata>}
     */
    static getOwnProperties(target) {
        return core_1.Metadata.hasOwn(index_1.PROPERTIES_METADATA, target)
            ? core_1.Metadata.getOwn(index_1.PROPERTIES_METADATA, target)
            : new Map();
    }
    /**
     *
     * @param target
     * @param propertyKey
     * @param property
     */
    static set(target, propertyKey, property) {
        const properties = this.getOwnProperties(target);
        properties.set(propertyKey, property);
        core_1.Metadata.set(index_1.PROPERTIES_METADATA, properties, target);
    }
    /**
     *
     * @param target
     * @param propertyKey
     * @param allowedRequiredValues
     */
    static required(target, propertyKey, allowedRequiredValues = []) {
        const property = this.get(target, propertyKey);
        property.required = true;
        property.allowedRequiredValues = allowedRequiredValues.concat(property.allowedRequiredValues);
        this.set(target, propertyKey, property);
        this.get(target, propertyKey).store.merge("responses", {
            "400": {
                description: "BadRequest"
            }
        });
        return this;
    }
    /**
     *
     * @param {(propertyMetadata: PropertyMetadata, parameters: DecoratorParameters) => void} fn
     * @returns {Function}
     */
    static decorate(fn) {
        return (...parameters) => {
            const propertyMetadata = PropertyRegistry.get(parameters[0], parameters[1]);
            const result = fn(propertyMetadata, parameters);
            if (typeof result === "function") {
                result(...parameters);
            }
        };
    }
}
exports.PropertyRegistry = PropertyRegistry;

//# sourceMappingURL=PropertyRegistry.js.map
