{"version":3,"sources":["jsonschema/registries/PropertyRegistry.ts"],"names":[],"mappings":"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","file":"PropertyRegistry.js","sourcesContent":["import {ancestorsOf, DecoratorParameters, Metadata, Type} from \"@tsed/core\";\nimport {PROPERTIES_METADATA} from \"../../converters/constants/index\";\nimport {PropertyMetadata} from \"../class/PropertyMetadata\";\n\nexport class PropertyRegistry {\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   * @returns {PropertyMetadata}\n   */\n  static get(target: Type<any>, propertyKey: string | symbol): PropertyMetadata {\n    const properties = this.getOwnProperties(target);\n\n    if (!properties.has(propertyKey)) {\n      this.set(target, propertyKey, new PropertyMetadata(target, propertyKey));\n    }\n\n    return this.getOwnProperties(target).get(propertyKey)!;\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {Array}\n   */\n  static getProperties(target: Type<any>): Map<string | symbol, PropertyMetadata> {\n    const map = new Map<string | symbol, PropertyMetadata>();\n    const ignored: string[] = [];\n\n    ancestorsOf(target).forEach(klass => {\n      this.getOwnProperties(klass).forEach((v: PropertyMetadata, k: string) => {\n        /* istanbul ignore next */\n        if (ignored.indexOf(k) !== -1) {\n          return;\n        }\n        if (!v.ignoreProperty) {\n          map.set(k, v);\n        } else {\n          map.delete(k);\n          ignored.push(k);\n        }\n      });\n    });\n\n    return map;\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @returns {Map<string | symbol, PropertyMetadata>}\n   */\n  static getOwnProperties(target: Type<any>): Map<string | symbol, PropertyMetadata> {\n    return Metadata.hasOwn(PROPERTIES_METADATA, target)\n      ? Metadata.getOwn(PROPERTIES_METADATA, target)\n      : new Map<string | symbol, PropertyMetadata>();\n  }\n\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   * @param property\n   */\n  static set(target: Type<any>, propertyKey: string | symbol, property: PropertyMetadata): void {\n    const properties = this.getOwnProperties(target);\n\n    properties.set(propertyKey, property);\n\n    Metadata.set(PROPERTIES_METADATA, properties, target);\n  }\n\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   * @param allowedRequiredValues\n   */\n  static required(target: Type<any>, propertyKey: string | symbol, allowedRequiredValues: any[] = []) {\n    const property = this.get(target, propertyKey);\n\n    property.required = true;\n    property.allowedRequiredValues = allowedRequiredValues.concat(property.allowedRequiredValues);\n\n    this.set(target, propertyKey, property);\n    this.get(target, propertyKey).store.merge(\"responses\", {\n      \"400\": {\n        description: \"BadRequest\"\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {(propertyMetadata: PropertyMetadata, parameters: DecoratorParameters) => void} fn\n   * @returns {Function}\n   */\n  static decorate(fn: (propertyMetadata: PropertyMetadata, parameters: DecoratorParameters) => void): Function {\n    return (...parameters: any[]): any => {\n      const propertyMetadata = PropertyRegistry.get(parameters[0], parameters[1]);\n      const result: any = fn(propertyMetadata, parameters as DecoratorParameters);\n      if (typeof result === \"function\") {\n        result(...parameters);\n      }\n    };\n  }\n}\n"],"sourceRoot":"../../../src"}