{"version":3,"sources":["jsonschema/decorators/propertyType.ts"],"names":[],"mappings":";;AAEA,iDAA0C;AAE1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4CG;AACH,SAAgB,YAAY,CAAC,IAAe;IAC1C,OAAO,yBAAU,CAAC,CAAC,gBAAkC,EAAE,EAAE;QACvD,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,oCAIC","file":"propertyType.js","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {PropertyMetadata} from \"../class/PropertyMetadata\";\nimport {PropertyFn} from \"./jsonProperty\";\n\n/**\n * Set the type of the array items. The possible value is String, Boolean, Number, Date, Object, Class, etc...\n *\n * ::: tip\n * This decorator is used by the Converters to deserialize correctly your model.\n * :::\n *\n * ```typescript\n * class Model {\n *    @PropertyType(String)\n *    property: string[];\n * }\n * ```\n * ::: warning\n * You didn't use the `type Type = string | number` as parameters Type.\n * :::\n *\n * Didn't works:\n *\n * ```typescript\n * type Type = \"string\" | \"number\"\n * class Model {\n *    @PropertyType(Type)\n *    property: Type[];\n * }\n * ```\n *\n * Works with converter and AJV:\n *\n * ```typescript\n * type Type = \"string\" | \"number\"\n * class Model {\n *    @Property()\n *    @AllowTypes(\"string\", \"number\") // for AJV\n *    property: Type[];\n * }\n * ```\n *\n * @param {Type<any>} type\n * @returns {Function}\n * @decorator\n * @converters\n * @jsonschema\n * @property\n */\nexport function PropertyType(type: Type<any>) {\n  return PropertyFn((propertyMetadata: PropertyMetadata) => {\n    propertyMetadata.type = type;\n  });\n}\n"],"sourceRoot":"../../../src"}