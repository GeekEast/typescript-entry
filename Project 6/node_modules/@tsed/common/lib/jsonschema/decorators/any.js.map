{"version":3,"sources":["jsonschema/decorators/any.ts"],"names":[],"mappings":";;AAEA,4EAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,SAAgB,GAAG,CAAC,GAAG,KAA4B;IACjD,OAAO,+CAAsB,CAAC,CAAC,MAAkB,EAAE,EAAE;QACnD,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,kBAIC","file":"any.js","sourcesContent":["import {JSONSchema6TypeName} from \"json-schema\";\nimport {JsonSchema} from \"../class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * Set the type of the array items.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Any()\n *    property: any;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": [\"integer\", \"number\", \"string\", \"boolean\", \"array\", \"object\", \"null\"]\n *     }\n *   }\n * }\n * ```\n *\n * @returns {Function}\n * @param types\n * @decorator\n * @property\n * @auto-map The data will be stored on the right place according to the type and collectionType (primitive or collection).\n */\nexport function Any(...types: JSONSchema6TypeName[]) {\n  return decoratorSchemaFactory((schema: JsonSchema) => {\n    schema.mapper.type = [\"integer\", \"number\", \"string\", \"boolean\", \"array\", \"object\", \"null\"];\n  });\n}\n"],"sourceRoot":"../../../src"}