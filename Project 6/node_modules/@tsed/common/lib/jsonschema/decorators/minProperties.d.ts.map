{"version":3,"sources":["jsonschema/decorators/minProperties.ts"],"names":[],"mappings":"AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,wBAAgB,aAAa,CAAC,aAAa,EAAE,MAAM,iCAQlD","file":"minProperties.d.ts","sourcesContent":["import {JsonSchema} from \"../class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * An object instance is valid against `minProperties` if its number of properties is greater than, or equal to, the value of this keyword.\n *\n * ::: warning\n * The value of this keyword MUST be a non-negative integer.\n * :::\n *\n * ::: tip\n * Omitting this keyword has the same behavior as a value of 0.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Any()\n *    @MinProperties(10)\n *    property: any;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"any\",\n *       \"minProperties\": 10\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} minProperties\n * @returns {Function}\n * @decorator\n * @ajv\n * @property\n * @jsonschema\n */\nexport function MinProperties(minProperties: number) {\n  if (minProperties < 0) {\n    throw new Error(\"The value of minProperties MUST be a non-negative integer.\");\n  }\n\n  return decoratorSchemaFactory((schema: JsonSchema) => {\n    schema.minProperties = minProperties;\n  });\n}\n"],"sourceRoot":"../../../src"}