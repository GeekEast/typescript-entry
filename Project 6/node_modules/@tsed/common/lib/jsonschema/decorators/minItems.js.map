{"version":3,"sources":["jsonschema/decorators/minItems.ts"],"names":[],"mappings":";;AACA,4EAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,SAAgB,QAAQ,CAAC,QAAgB;IACvC,IAAI,QAAQ,GAAG,CAAC,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;KAC1E;IAED,OAAO,+CAAsB,CAAC,CAAC,MAAkB,EAAE,EAAE;QACnD,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC;AARD,4BAQC","file":"minItems.js","sourcesContent":["import {JsonSchema} from \"../class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n *\n * An array instance is valid against `minItems` if its size is greater than, or equal to, the value of this keyword.\n *\n * ::: warning\n * The value `minItems` MUST be a non-negative integer.\n * :::\n *\n * ::: tip\n * Omitting this keyword has the same behavior as a value of 0.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @PropertyType(String)\n *    @MinItems(10)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"minItems\": 10\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} minItems\n * @returns {Function}\n * @decorator\n * @ajv\n * @property\n * @jsonschema\n */\nexport function MinItems(minItems: number) {\n  if (minItems < 0) {\n    throw new Error(\"The value of minItems MUST be a non-negative integer.\");\n  }\n\n  return decoratorSchemaFactory((schema: JsonSchema) => {\n    schema.minItems = minItems;\n  });\n}\n"],"sourceRoot":"../../../src"}