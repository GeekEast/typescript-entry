{"version":3,"sources":["jsonschema/decorators/allowTypes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,mBAAmB,EAAC,MAAM,aAAa,CAAC;AAIhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0DG;AACH,wBAAgB,UAAU,CAAC,IAAI,EAAE,mBAAmB,EAAE,GAAG,KAAK,EAAE,mBAAmB,EAAE,iCAIpF","file":"allowTypes.d.ts","sourcesContent":["import {JSONSchema6TypeName} from \"json-schema\";\nimport {JsonSchema} from \"../class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * Set the type of the array items.\n *\n * ## Example\n * ### With multiple types\n *\n * ```typescript\n * class Model {\n *    @AllowTypes(\"string\", \"number\", \"boolean\", \"array\")\n *    property: \"string\" | \"number\" | \"boolean\" | \"array\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": [\"string\", \"number\", \"boolean\", \"array\"]\n *     }\n *   }\n * }\n * ```\n *\n * ### With array of multiple types\n *\n * ```typescript\n * class Model {\n *    @AllowTypes(\"string\", \"number\", \"boolean\", \"array\")\n *    property: (\"string\" | \"number\" | \"boolean\" | \"array\")[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": [\"string\", \"number\", \"boolean\", \"array\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @returns {Function}\n * @param type\n * @param types\n * @decorator\n * @property\n * @jsonschema\n * @auto-map The data will be stored on the right place according to the type and collectionType (primitive or collection).\n */\nexport function AllowTypes(type: JSONSchema6TypeName, ...types: JSONSchema6TypeName[]) {\n  return decoratorSchemaFactory((schema: JsonSchema) => {\n    schema.mapper.type = [type].concat(types);\n  });\n}\n"],"sourceRoot":"../../../src"}