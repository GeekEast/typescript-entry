{"version":3,"sources":["jsonschema/decorators/multipleOf.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DG;AACH,wBAAgB,UAAU,CAAC,UAAU,EAAE,MAAM,iCAQ5C","file":"multipleOf.d.ts","sourcesContent":["import {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * A numeric instance is valid only if division by this keyword's value results in an integer.\n *\n * !> The value of `multipleOf` MUST be a number, strictly greater than 0.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @MultipleOf(2)\n *    property: Number;\n * }\n * ```\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"multipleOf\": 2\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @PropertyType(number)\n *    @MultipleOf(2)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"multipleOf\": 2\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} multipleOf\n * @returns {Function}\n * @decorator\n * @ajv\n * @jsonschema\n * @property\n * @auto-map The data will be stored on the right place according to the type and collectionType (primitive or collection).\n */\nexport function MultipleOf(multipleOf: number) {\n  if (multipleOf <= 0) {\n    throw new Error(\"The value of multipleOf MUST be a number, strictly greater than 0.\");\n  }\n\n  return decoratorSchemaFactory(schema => {\n    schema.mapper.multipleOf = multipleOf;\n  });\n}\n"],"sourceRoot":"../../../src"}