{"version":3,"sources":["jsonschema/decorators/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAG/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,wBAAgB,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC,UAAU,CAAC,iCAIxD","file":"schema.d.ts","sourcesContent":["import {JsonSchema} from \"../class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * Write data formatted to JsonSchema.\n *\n * ## Example\n *\n * ```typescript\n * @Schema({title: \"test\"})\n * class Model {\n *    @Schema({formatMinimum: \"1987-10-24\"})\n *    @Format(\"date\")\n *    birthDate: Date\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"title\": \"test\",\n *   \"properties\": {\n *     \"birthdate\": {\n *        \"type\": \"string\",\n *        \"format\": \"date\",\n *        \"formatMinimum\": \"1987-10-24\"\n *     }\n *   }\n * }\n * ```\n *\n * @decorator\n * @jsonschema\n * @ajv\n * @swagger\n * @property\n * @param partialSchema\n * @returns {Function}\n */\nexport function Schema(partialSchema: Partial<JsonSchema>) {\n  return decoratorSchemaFactory((schema: JsonSchema) => {\n    schema.merge(partialSchema);\n  });\n}\n"],"sourceRoot":"../../../src"}