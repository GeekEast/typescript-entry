{"version":3,"sources":["jsonschema/decorators/email.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DG;AACH,wBAAgB,KAAK,kCAEpB","file":"email.d.ts","sourcesContent":["import {Format} from \"./format\";\n\n/**\n * Apply an email validation on property.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Email()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"email\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Email()\n *    @PropertyType(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"email\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @ajv\n * @property\n * @jsonschema\n * @auto-map The data will be stored on the right place according to the type and collectionType (primitive or collection).\n */\nexport function Email() {\n  return Format(\"email\");\n}\n"],"sourceRoot":"../../../src"}