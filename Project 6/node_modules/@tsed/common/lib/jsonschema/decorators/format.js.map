{"version":3,"sources":["jsonschema/decorators/format.ts"],"names":[],"mappings":";;AAAA,qCAAgC;AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0EG;AACH,SAAgB,MAAM,CAAC,MAAc;IACnC,OAAO,eAAM,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;AAC1B,CAAC;AAFD,wBAEC","file":"format.js","sourcesContent":["import {Schema} from \"./schema\";\n\n/**\n * The following formats are supported for string validation with `format` keyword:\n *\n * - **date**: full-date according to RFC3339.\n * - **time**: time with optional time-zone.\n * - **date-time**: date-time from the same source (time-zone is mandatory). date, time and date-time validate ranges in full mode and only regexp in fast mode (see options).\n * - **uri**: full uri with optional protocol.\n * - **url**: URL record.\n * - **uri-template**: URI template according to RFC6570\n * - **email**: email address.\n * - **hostname**: host name according to RFC1034.\n * - **ipv4**: IP address v4.\n * - **ipv6**: IP address v6.\n * - **regex**: tests whether a string is a valid regular expression by passing it to RegExp constructor.\n * - **uuid**: Universally Unique IDentifier according to RFC4122.\n * - **json-pointer**: JSON-pointer according to RFC6901.\n * - **relative-json-pointer**: relative JSON-pointer according to this draft.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Format(\"email\")\n *    property: string;\n * }\n * ```\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"email\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Format(\"email\")\n *    @PropertyType(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"email\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {string} format\n * @returns {Function}\n * @decorator\n * @ajv\n * @jsonschema\n * @property\n * @auto-map The data will be stored on the right place according to the type and collectionType (primitive or collection).\n */\nexport function Format(format: string) {\n  return Schema({format});\n}\n"],"sourceRoot":"../../../src"}