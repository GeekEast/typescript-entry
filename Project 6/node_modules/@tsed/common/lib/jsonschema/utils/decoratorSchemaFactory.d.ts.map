{"version":3,"sources":["jsonschema/utils/decoratorSchemaFactory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,mBAAmB,EAAmB,MAAM,YAAY,CAAC;AACjE,OAAO,EAAC,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAI/C;;;;GAIG;AACH,wBAAgB,sBAAsB,CAAC,EAAE,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,mBAAmB,KAAK,IAAI,iCAoBvG","file":"decoratorSchemaFactory.d.ts","sourcesContent":["import {DecoratorParameters, getDecoratorType} from \"@tsed/core\";\nimport {JsonSchema} from \"../class/JsonSchema\";\nimport {JsonSchemesRegistry} from \"../registries/JsonSchemesRegistry\";\nimport {PropertyRegistry} from \"../registries/PropertyRegistry\";\n\n/**\n *\n * @param {(schema: JsonSchema, parameters: DecoratorParameters) => void} fn\n * @returns {(...parameters: any[]) => any}\n */\nexport function decoratorSchemaFactory(fn: (schema: JsonSchema, parameters: DecoratorParameters) => void) {\n  return (...parameters: any[]): any => {\n    let schema: JsonSchema;\n\n    switch (getDecoratorType(parameters)) {\n      case \"property\":\n        schema = PropertyRegistry.get(parameters[0], parameters[1]).schema;\n        break;\n      case \"class\":\n        schema = JsonSchemesRegistry.createIfNotExists(parameters[0]);\n        break;\n    }\n\n    const result: any = fn(schema!, parameters as DecoratorParameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n\n    return parameters[2];\n  };\n}\n"],"sourceRoot":"../../../src"}