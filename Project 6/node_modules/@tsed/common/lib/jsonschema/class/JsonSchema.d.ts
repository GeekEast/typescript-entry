import { JSONSchema6, JSONSchema6Type, JSONSchema6TypeName } from "json-schema";
/**
 *
 * @type {string[]}
 */
export declare const JSON_TYPES: string[];
/**
 *
 * @type {string[]}
 */
export declare const AUTO_MAP_KEYS: string[];
export declare class JsonSchema implements JSONSchema6 {
    private _refName;
    private _isCollection;
    /**
     *
     * @type {string}
     */
    $id: string;
    private _type;
    id: string;
    $ref: string;
    $schema: any;
    title: string;
    description: string;
    default: JSONSchema6Type;
    additionalItems: boolean | JSONSchema6;
    items: JsonSchema;
    maxItems: number;
    minItems: number;
    uniqueItems: boolean;
    maxProperties: number;
    minProperties: number;
    required: any | string[];
    properties: {
        [key: string]: JSONSchema6;
    };
    additionalProperties: JsonSchema;
    definitions: {
        [p: string]: JSONSchema6;
    };
    patternProperties: {
        [p: string]: JSONSchema6;
    };
    dependencies: {
        [p: string]: JSONSchema6 | string[];
    };
    allOf: JSONSchema6[];
    anyOf: JSONSchema6[];
    oneOf: JSONSchema6[];
    not: JSONSchema6;
    extends: string | string[];
    multipleOf: number;
    maximum: number;
    exclusiveMaximum: number;
    minimum: number;
    exclusiveMinimum: number;
    maxLength: number;
    minLength: number;
    pattern: string;
    format: string;
    enum: JSONSchema6Type[];
    private _proxy;
    [key: string]: any;
    constructor();
    /**
     *
     * @returns {JSONSchema6}
     */
    readonly mapper: JSONSchema6;
    /**
     *
     * @returns {any | JSONSchema6TypeName | JSONSchema6TypeName[]}
     */
    /**
    *
    * @param {any | JSONSchema6TypeName | JSONSchema6TypeName[]} value
    */
    type: any | JSONSchema6TypeName | JSONSchema6TypeName[];
    /**
     *
     * @returns {string}
     */
    readonly refName: string;
    /**
     *
     * @returns {boolean}
     */
    readonly isCollection: boolean;
    /**
     *
     * @returns {boolean}
     */
    readonly isArray: boolean;
    /**
     *
     * @returns {"collection" | JSONSchema6TypeName | JSONSchema6TypeName[]}
     */
    readonly schemaType: "collection" | JSONSchema6TypeName | JSONSchema6TypeName[];
    /**
     * Write value on the right place according to the schema type
     */
    mapValue(key: string, value: any): void;
    /**
     *
     * @param collectionType
     */
    toCollection(collectionType: any): void;
    /**
     *
     * @param instance
     * @param {string} property
     */
    private forwardKeysTo;
    /**
     *
     * @returns {{}}
     */
    toJSON(): any;
    toObject(): any;
    /**
     *
     * @param obj
     */
    merge(obj: any): this;
    /**
     *
     * @param value
     * @returns {JSONSchema6TypeName | JSONSchema6TypeName[]}
     */
    static getJsonType(value: any): JSONSchema6TypeName | JSONSchema6TypeName[];
    /**
     *
     * @param type
     * @returns {JSONSchema6}
     */
    static ref(type: any): JsonSchema;
}
