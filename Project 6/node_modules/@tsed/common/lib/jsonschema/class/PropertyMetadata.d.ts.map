{"version":3,"sources":["jsonschema/class/PropertyMetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACzD,OAAO,EAAC,gBAAgB,EAAC,MAAM,8CAA8C,CAAC;AAE9E,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AAExC,qBAAa,gBAAiB,SAAQ,QAAS,YAAW,gBAAgB;IACxE;;;OAGG;IAEH,OAAO,CAAC,sBAAsB,CAAa;IAG3C,OAAO,CAAC,eAAe,CAAkB;gBAE7B,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAKzC;;;OAGG;;;;;IACC,IAAI,EAAQ,IAAI,CAAC,GAAG,CAAC;IAazB;;;OAGG;aACC,MAAM,EAAI,UAAU;IAIxB;;;OAGG;;;;;IACC,QAAQ,EAAI,OAAO;IAYvB;;;OAGG;;;;;IACC,qBAAqB,EAAI,GAAG,EAAE;IAYlC;;;OAGG;;;;;IACC,cAAc,EAAI,OAAO;IAY7B;;;;;OAKG;IACH,oBAAoB,CAAC,KAAK,EAAE,GAAG,GAAG,OAAO;IAYzC;;;;OAIG;IACH,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,OAAO;CAGhC","file":"PropertyMetadata.d.ts","sourcesContent":["import {NotEnumerable, Storable, Type} from \"@tsed/core\";\nimport {IPropertyOptions} from \"../../converters/interfaces/IPropertyOptions\";\nimport {JsonSchemesRegistry} from \"../registries/JsonSchemesRegistry\";\nimport {JsonSchema} from \"./JsonSchema\";\n\nexport class PropertyMetadata extends Storable implements IPropertyOptions {\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @NotEnumerable()\n  private _allowedRequiredValues: any[] = [];\n\n  @NotEnumerable()\n  private _ignoreProperty: boolean = false;\n\n  constructor(target: any, propertyKey: any) {\n    super(target, propertyKey);\n    this.store.set(\"schema\", JsonSchemesRegistry.property(this.target, this.propertyKey as string, this.type, this.collectionType));\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n    this.store.set(\"schema\", JsonSchemesRegistry.property(this.target, this.propertyKey as string, this.type, this.collectionType));\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @returns {JsonSchema}\n   */\n  get schema(): JsonSchema {\n    return this.store.get(\"schema\");\n  }\n\n  /**\n   * Return the required state.\n   * @returns {boolean}\n   */\n  get required(): boolean {\n    return JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string));\n  }\n\n  /**\n   * Change the state of the required data.\n   * @param value\n   */\n  set required(value: boolean) {\n    JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string), value);\n  }\n\n  /**\n   * Return the allowed values.\n   * @returns {any[]}\n   */\n  get allowedRequiredValues(): any[] {\n    return this._allowedRequiredValues;\n  }\n\n  /**\n   * Set the allowed values when the value is required.\n   * @param {any[]} value\n   */\n  set allowedRequiredValues(value: any[]) {\n    this._allowedRequiredValues = value;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get ignoreProperty(): boolean {\n    return this._ignoreProperty;\n  }\n\n  /**\n   *\n   * @param {boolean} value\n   */\n  set ignoreProperty(value: boolean) {\n    this._ignoreProperty = value;\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {boolean}\n   * @deprecated\n   */\n  isValidRequiredValue(value: any): boolean {\n    if (this.required) {\n      if (value === undefined || value === null || value === \"\") {\n        if (this.allowedRequiredValues.indexOf(value) === -1) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].indexOf(value) > -1 && this.allowedRequiredValues.indexOf(value) === -1;\n  }\n}\n"],"sourceRoot":"../../../src"}