"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const appender_1 = require("../decorators/appender");
const BaseAppender_1 = require("../class/BaseAppender");
/**
 * ## Standard Output Appender
 *
 * This appender writes all log events to the standard output stream.
 *
 * ## Configuration
 *
 * * type - stderr
 * * layout - object (optional, defaults to colouredLayout) - see layouts
 *
 * ## Example
 *
 * ```typescript
 * import {Logger} from "ts-log-debug";
 *
 * const logger = new Logger("loggerName");
 *
 * logger.appenders.set("log", {
 *     type: "stdout",
 *     levels: ["info", "trace", "debug"]
 * });
 * ```
 *
 * @private
 */
let StdoutAppender = class StdoutAppender extends BaseAppender_1.BaseAppender {
    /**
     * ## Standard Output Appender
     *
     * This appender writes all log events to the standard output stream.
     *
     * ## Configuration
     *
     * * type - stderr
     * * layout - object (optional, defaults to colouredLayout) - see layouts
     *
     * ## Example
     *
     * ```typescript
     * import {Logger} from "ts-log-debug";
     *
     * const logger = new Logger("loggerName");
     *
     * logger.appenders.set("log", {
     *     type: "stdout",
     *     levels: ["info", "trace", "debug"]
     * });
     * ```
     *
     * @private
     */
    constructor() {
        super(...arguments);
        this.log = process.stdout.write.bind(process.stdout);
    }
    write(loggingEvent) {
        this.log(`${this.layout(loggingEvent, this.config.timezoneOffset)}\n`);
    }
};
StdoutAppender = tslib_1.__decorate([
    appender_1.Appender({ name: "stdout" })
], StdoutAppender);
exports.StdoutAppender = StdoutAppender;
//# sourceMappingURL=StdoutAppender.js.map