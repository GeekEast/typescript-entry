import { LogEvent } from "../../core/LogEvent";
import { IReplacers } from "../interfaces/Replacers";
import { TokensHandlers } from "../interfaces/BasicLayoutConfiguration";
export declare class LayoutReplacer {
    private tokens;
    private timezoneOffset;
    constructor(tokens: TokensHandlers, timezoneOffset: number);
    /**
     *
     * @param loggingEvent
     * @param specifier
     * @returns {any}
     */
    categoryName: (loggingEvent: LogEvent, specifier: string) => string;
    /**
     *
     * @param loggingEvent
     * @param specifier
     * @returns {any}
     */
    formatAsDate: (loggingEvent: LogEvent, specifier: string) => string;
    /**
     *
     * @returns {string}
     */
    hostname: () => string;
    /**
     *
     * @param loggingEvent
     * @returns {any}
     */
    formatMessage: (loggingEvent: LogEvent) => string;
    /**
     *
     * @returns {string|string}
     */
    endOfLine: () => string;
    /**
     *
     * @param loggingEvent
     * @returns {string}
     */
    logLevel: (loggingEvent: LogEvent) => string;
    /**
     *
     * @param loggingEvent
     * @returns {any}
     */
    startTime: (loggingEvent: LogEvent) => string;
    /**
     *
     * @param loggingEvent
     * @returns {string}
     */
    startColour: (loggingEvent: LogEvent) => string;
    /**
     *
     * @param loggingEvent
     * @returns {string}
     */
    endColour: (loggingEvent: LogEvent) => string;
    /**
     *
     * @returns {string}
     */
    percent: () => string;
    /**
     *
     * @param loggingEvent
     * @returns {string}
     */
    pid: (loggingEvent?: LogEvent | undefined) => string;
    /**
     *
     * @param loggingEvent
     * @param specifier
     * @returns {any}
     */
    clusterInfo: (loggingEvent: LogEvent, specifier: string) => string;
    /**
     *
     * @param loggingEvent
     * @param specifier
     * @returns {any}
     */
    userDefined: (loggingEvent: LogEvent, specifier: string) => any;
    build(): IReplacers;
}
