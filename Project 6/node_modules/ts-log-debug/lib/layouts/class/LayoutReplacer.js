"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Os = require("os");
const logColors_1 = require("../constants/logColors");
const colorizeUtils_1 = require("../utils/colorizeUtils");
const Util = require("util");
/**
 *
 */
const dateFormat = require("date-format");
const eol = Os.EOL || "\n";
class LayoutReplacer {
    constructor(tokens, timezoneOffset) {
        this.tokens = tokens;
        this.timezoneOffset = timezoneOffset;
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.categoryName = (loggingEvent, specifier) => {
            let loggerName = loggingEvent.categoryName;
            if (specifier) {
                const precision = parseInt(specifier, 10);
                const loggerNameBits = loggerName.split(".");
                if (precision < loggerNameBits.length) {
                    loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(".");
                }
            }
            return loggerName;
        };
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.formatAsDate = (loggingEvent, specifier) => {
            let format = dateFormat.ISO8601_FORMAT;
            if (specifier) {
                format = specifier;
                // Pick up special cases
                if (format === "ISO8601") {
                    format = dateFormat.ISO8601_FORMAT;
                }
                else if (format === "ISO8601_WITH_TZ_OFFSET") {
                    format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;
                }
                else if (format === "ABSOLUTE") {
                    format = dateFormat.ABSOLUTETIME_FORMAT;
                }
                else if (format === "DATE") {
                    format = dateFormat.DATETIME_FORMAT;
                }
            }
            // Format the date
            return dateFormat.asString(format, loggingEvent.startTime, this.timezoneOffset);
        };
        /**
         *
         * @returns {string}
         */
        this.hostname = () => {
            return Os.hostname().toString();
        };
        /**
         *
         * @param loggingEvent
         * @returns {any}
         */
        this.formatMessage = (loggingEvent) => {
            return Util.format(...loggingEvent.data);
        };
        /**
         *
         * @returns {string|string}
         */
        this.endOfLine = () => {
            return eol;
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.logLevel = (loggingEvent) => {
            return loggingEvent.level.toString();
        };
        /**
         *
         * @param loggingEvent
         * @returns {any}
         */
        this.startTime = (loggingEvent) => {
            return dateFormat.asString("hh:mm:ss", loggingEvent.startTime, this.timezoneOffset);
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.startColour = (loggingEvent) => {
            const index = loggingEvent.level.toString();
            return colorizeUtils_1.colorizeStart(logColors_1.LOG_COLORS[index]);
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.endColour = (loggingEvent) => {
            const index = loggingEvent.level.toString();
            return colorizeUtils_1.colorizeEnd(logColors_1.LOG_COLORS[index]);
        };
        /**
         *
         * @returns {string}
         */
        this.percent = () => {
            return "%";
        };
        /**
         *
         * @param loggingEvent
         * @returns {string}
         */
        this.pid = (loggingEvent) => {
            return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();
        };
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.clusterInfo = (loggingEvent, specifier) => {
            if (loggingEvent.cluster && specifier) {
                return specifier
                    .replace("%m", loggingEvent.cluster.master)
                    .replace("%w", loggingEvent.cluster.worker)
                    .replace("%i", loggingEvent.cluster.workerId);
            }
            else if (loggingEvent.cluster) {
                return `${loggingEvent.cluster.worker}@${loggingEvent.cluster.master}`;
            }
            return this.pid();
        };
        /**
         *
         * @param loggingEvent
         * @param specifier
         * @returns {any}
         */
        this.userDefined = (loggingEvent, specifier) => {
            if (typeof this.tokens[specifier] !== "undefined") {
                return typeof this.tokens[specifier] === "function" ? this.tokens[specifier](loggingEvent) : this.tokens[specifier];
            }
            return null;
        };
    }
    build() {
        return {
            c: this.categoryName,
            d: this.formatAsDate,
            h: this.hostname,
            m: this.formatMessage,
            n: this.endOfLine,
            p: this.logLevel,
            r: this.startTime,
            "[": this.startColour,
            "]": this.endColour,
            y: this.clusterInfo,
            z: this.pid,
            "%": this.percent,
            x: this.userDefined
        };
    }
}
exports.LayoutReplacer = LayoutReplacer;
//# sourceMappingURL=LayoutReplacer.js.map